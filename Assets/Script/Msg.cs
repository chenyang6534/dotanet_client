// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protobuf/msg.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protomsg {

  /// <summary>Holder for reflection information generated from protobuf/msg.proto</summary>
  public static partial class MsgReflection {

    #region Descriptor
    /// <summary>File descriptor for protobuf/msg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJwcm90b2J1Zi9tc2cucHJvdG8SCHByb3RvbXNnIlsKB01zZ0Jhc2USEAoI",
            "TW9kZVR5cGUYASABKAkSCwoDVWlkGAIgASgFEg8KB01zZ1R5cGUYAyABKAkS",
            "EQoJQ29ubmVjdElkGAQgASgFEg0KBURhdGFzGAUgASgMIiUKEU1zZ1JlZ2lz",
            "dGVyVG9HYXRlEhAKCE1vZGVUeXBlGAEgASgJIkUKEENTX01zZ1F1aWNrTG9n",
            "aW4SEAoIUGxhdGZvcm0YASABKAkSEQoJTWFjaGluZWlkGAIgASgJEgwKBE5h",
            "bWUYAyABKAkiZgoIQ1NfTG9naW4SEwoLUGhvbmVudW1iZXIYASABKAkSEAoI",
            "UGxhdGZvcm0YAiABKAkSEQoJTWFjaGluZWlkGAMgASgJEhEKCVdlY2hhdF9p",
            "ZBgEIAEoCRINCgVRUV9pZBgFIAEoCSJLChJDU19TZWxlY3RDaGFyYWN0ZXIS",
            "NQoPU2VsZWN0Q2hhcmFjdGVyGAEgASgLMhwucHJvdG9tc2cuQ2hhcmFjdGVy",
            "QmFzZURhdGFzIiEKDkNTX0xvZGluZ1NjZW5lEg8KB1NjZW5lSUQYASABKAUi",
            "HgoQQ1NfTG9va1ZlZGlvU3VjYxIKCgJJRBgBIAEoBSIYCghDU19Vc2VBSRIM",
            "CgRBSWlkGAEgASgFIjcKCVVuaXRFcXVpcBILCgNQb3MYASABKAUSDgoGVHlw",
            "ZElEGAIgASgFEg0KBUxldmVsGAMgASgFItYDCg5Vbml0Qm9hcmREYXRhcxIK",
            "CgJJRBgBIAEoBRIMCgROYW1lGAIgASgJEhkKEUF0dHJpYnV0ZVN0cmVuZ3Ro",
            "GAMgASgCEhgKEEF0dHJpYnV0ZUFnaWxpdHkYBCABKAISHQoVQXR0cmlidXRl",
            "SW50ZWxsaWdlbmNlGAUgASgCEg4KBkF0dGFjaxgGIAEoBRITCgtBdHRhY2tT",
            "cGVlZBgHIAEoAhITCgtBdHRhY2tSYW5nZRgIIAEoAhIRCglNb3ZlU3BlZWQY",
            "CSABKAISEgoKTWFnaWNTY2FsZRgKIAEoAhIQCghNUFJlZ2FpbhgLIAEoAhIV",
            "Cg1QaHlzaWNhbEFtYW9yGAwgASgCEhYKDlBoeXNpY2FsUmVzaXN0GA0gASgC",
            "EhIKCk1hZ2ljQW1hb3IYDiABKAISEwoLU3RhdHVzQW1hb3IYDyABKAISDQoF",
            "RG9kZ2UYECABKAISEAoISFBSZWdhaW4YESABKAISGAoQQXR0cmlidXRlUHJp",
            "bWFyeRgSIAEoBRIRCglEcm9wSXRlbXMYEyABKAkSGAoQUmVtYWluRXhwZXJp",
            "ZW5jZRgUIAEoBRIjCgZFcXVpcHMYFSADKAsyEy5wcm90b21zZy5Vbml0RXF1",
            "aXAiIAoOQ1NfR2V0VW5pdEluZm8SDgoGVW5pdElEGAEgASgFIh8KDUNTX0dl",
            "dEJhZ0luZm8SDgoGVW5pdElEGAEgASgFIlYKEENTX0NoYW5nZUl0ZW1Qb3MS",
            "DgoGU3JjUG9zGAEgASgFEg8KB0Rlc3RQb3MYAiABKAUSDwoHU3JjVHlwZRgD",
            "IAEoBRIQCghEZXN0VHlwZRgEIAEoBSIgCg5DU19EZXN0cm95SXRlbRIOCgZT",
            "cmNQb3MYASABKAUiOQoLU0NfVW5pdEluZm8SKgoIVW5pdERhdGEYASABKAsy",
            "GC5wcm90b21zZy5Vbml0Qm9hcmREYXRhcyIxCgpTQ19CYWdJbmZvEiMKBkVx",
            "dWlwcxgBIAMoCzITLnByb3RvbXNnLlVuaXRFcXVpcCInChVDU19QbGF5ZXJV",
            "cGdyYWRlU2tpbGwSDgoGVHlwZUlEGAEgASgFIkMKDUNTX1BsYXllck1vdmUS",
            "CwoDSURzGAEgAygFEgkKAVgYAiABKAISCQoBWRgDIAEoAhIPCgdJc1N0YXJ0",
            "GAQgASgIIjQKD0NTX1BsYXllckF0dGFjaxILCgNJRHMYASADKAUSFAoMVGFy",
            "Z2V0VW5pdElEGAIgASgFIlkKDkNTX1BsYXllclNraWxsEgoKAklEGAEgASgF",
            "Eg8KB1NraWxsSUQYAiABKAUSCQoBWBgDIAEoAhIJCgFZGAQgASgCEhQKDFRh",
            "cmdldFVuaXRJRBgFIAEoBSIpChNDU19DaGFuZ2VBdHRhY2tNb2RlEhIKCkF0",
            "dGFja01vZGUYASABKAUiMwoPQ1NfT3JnYW5pemVUZWFtEg8KB1BsYXllcjEY",
            "ASABKAUSDwoHUGxheWVyMhgCIAEoBSJ1Cg5TQ19SZXF1ZXN0VGVhbRIUCgxT",
            "cmNQbGF5ZXJVSUQYASABKAUSDwoHU3JjTmFtZRgCIAEoCRIVCg1TcmNVbml0",
            "VHlwZUlEGAMgASgFEhAKCFNyY0xldmVsGAQgASgFEhMKC1JlcXVlc3RUeXBl",
            "GAUgASgFIlAKEkNTX1Jlc3BvbnNlT3JnVGVhbRIUCgxTcmNQbGF5ZXJVSUQY",
            "ASABKAUSDwoHSXNBZ3JlZRgCIAEoBRITCgtSZXF1ZXN0VHlwZRgDIAEoBSIi",
            "CgpDU19PdXRUZWFtEhQKDE91dFBsYXllclVJRBgBIAEoBSJtCg5UZWFtUGxh",
            "eWVySW5mbxILCgNVSUQYASABKAUSDAoETmFtZRgCIAEoCRIKCgJIUBgDIAEo",
            "BRIKCgJNUBgEIAEoBRINCgVNYXhIUBgFIAEoBRINCgVNYXhNUBgGIAEoBRIK",
            "CgJJRBgHIAEoBSJeChFTQ19VcGRhdGVUZWFtSW5mbxIOCgZUZWFtSUQYASAB",
            "KAUSDwoHTWFpblVJRBgCIAEoBRIoCgZUUEluZm8YAyADKAsyGC5wcm90b21z",
            "Zy5UZWFtUGxheWVySW5mbyIrCg5TQ19Ob3RpY2VXb3JkcxIOCgZUeXBlSUQY",
            "ASABKAUSCQoBUBgCIAMoCSLDAwoKU2tpbGxEYXRhcxIOCgZUeXBlSUQYASAB",
            "KAUSDQoFTGV2ZWwYAiABKAUSFAoMUmVtYWluQ0RUaW1lGAMgASgCEhIKCkNh",
            "blVwZ3JhZGUYBCABKAUSDQoFSW5kZXgYBSABKAUSEAoIQ2FzdFR5cGUYBiAB",
            "KAUSFgoOQ2FzdFRhcmdldFR5cGUYByABKAUSFgoOVW5pdFRhcmdldFRlYW0Y",
            "CCABKAUSFgoOVW5pdFRhcmdldENhbXAYCSABKAUSGQoRTm9DYXJlTWFnaWNJ",
            "bW11bmUYCiABKAUSEQoJQ2FzdFJhbmdlGAsgASgCEhAKCENvb2xkb3duGAwg",
            "ASgCEhEKCUh1cnRSYW5nZRgNIAEoAhIQCghNYW5hQ29zdBgOIAEoBRIYChBB",
            "dHRhY2tBdXRvQWN0aXZlGA8gASgFEg8KB1Zpc2libGUYECABKAUSGAoQUmVt",
            "YWluU2tpbGxDb3VudBgRIAEoBRIQCghNYXhMZXZlbBgSIAEoBRIVCg1SZXF1",
            "aXJlZExldmVsGBMgASgFEh0KFUxldmVsc0JldHdlZW5VcGdyYWRlcxgUIAEo",
            "BRIRCglJbml0TGV2ZWwYFSABKAUipAEKCUJ1ZmZEYXRhcxIOCgZUeXBlSUQY",
            "ASABKAUSEgoKUmVtYWluVGltZRgCIAEoAhIMCgRUaW1lGAMgASgCEg4KBlRh",
            "Z051bRgEIAEoBRIWCg5Db25uZWN0aW9uVHlwZRgFIAEoBRITCgtDb25uZWN0",
            "aW9uWBgGIAEoAhITCgtDb25uZWN0aW9uWRgHIAEoAhITCgtDb25uZWN0aW9u",
            "WhgIIAEoAiKUBwoJVW5pdERhdGFzEgwKBE5hbWUYASABKAkSDQoFTGV2ZWwY",
            "AiABKAUSCgoCSFAYAyABKAUSCgoCTVAYBCABKAUSCQoBWBgFIAEoAhIJCgFZ",
            "GAYgASgCEgoKAklEGAcgASgFEhAKCE1vZGVUeXBlGAggASgJEg0KBU1heEhQ",
            "GAkgASgFEg0KBU1heE1QGAogASgFEhIKCkV4cGVyaWVuY2UYCyABKAUSFQoN",
            "TWF4RXhwZXJpZW5jZRgMIAEoBRIRCglDb250cm9sSUQYDSABKAUSFQoNQW5p",
            "bW90b3JTdGF0ZRgOIAEoBRISCgpBdHRhY2tUaW1lGA8gASgCEhIKCkRpcmVj",
            "dGlvblgYECABKAISEgoKRGlyZWN0aW9uWRgRIAEoAhIQCghVbml0VHlwZRgS",
            "IAEoBRIaChJBdHRhY2tBY3BhYmlsaXRpZXMYEyABKAUSEgoKQXR0YWNrTW9k",
            "ZRgUIAEoBRIOCgZJc01haW4YFSABKAUSDwoHSXNEZWF0aBgWIAEoBRIRCglJ",
            "bnZpc2libGUYFyABKAUSDAoEQ2FtcBgYIAEoBRIOCgZJc01pc3MYGSABKAgS",
            "FQoNQW5pbW90b3JQYXVzZRgaIAEoBRITCgtTa2lsbEVuYWJsZRgbIAEoBRIS",
            "CgpJdGVtRW5hYmxlGBwgASgFEgkKAVoYHSABKAISFQoNSXNNaXJyb3JJbWFn",
            "ZRgeIAEoBRITCgtBdHRhY2tSYW5nZRgfIAEoAhISCgpBdHRhY2tBbmltGCAg",
            "ASgFEg4KBlR5cGVJRBghIAEoBRIYChBSZW1haW5SZXZpdmVUaW1lGCIgASgC",
            "Eg4KBlRlYW1JRBgjIAEoBRIMCgRHb2xkGCQgASgFEg8KB0RpYW1vbmQYJSAB",
            "KAUSEgoKUmV2aXZlR29sZBgmIAEoBRIVCg1SZXZpdmVEaWFtb25kGCcgASgF",
            "EhMKC0NoYXJhY3RlcmlkGCggASgFEiIKGlJlbWFpbldhdGNoVmVkaW9Db3Vu",
            "dFRvZGF5GCkgASgFEhwKFFdhdGNoVmVkaW9BZGREaWFtb25kGCogASgFEg8K",
            "B0d1aWxkSUQYKyABKAUSIAoCU0QYLCADKAsyFC5wcm90b21zZy5Ta2lsbERh",
            "dGFzEh8KAkJEGC0gAygLMhMucHJvdG9tc2cuQnVmZkRhdGFzEiEKA0lTRBgu",
            "IAMoCzIULnByb3RvbXNnLlNraWxsRGF0YXMitQEKC0J1bGxldERhdGFzEgoK",
            "AklEGAEgASgFEhAKCE1vZGVUeXBlGAIgASgJEgkKAVgYAyABKAISCQoBWRgE",
            "IAEoAhIJCgFaGAUgASgCEg0KBVN0YXRlGAYgASgFEg4KBlN0YXJ0WBgHIAEo",
            "AhIOCgZTdGFydFkYCCABKAISDgoGU3RhcnRaGAkgASgCEgwKBEVuZFgYCiAB",
            "KAISDAoERW5kWRgLIAEoAhIMCgRFbmRaGAwgASgCIkIKDlNjZW5lSXRlbURh",
            "dGFzEgoKAklEGAEgASgFEg4KBlR5cGVJRBgCIAEoBRIJCgFYGAMgASgCEgkK",
            "AVkYBCABKAIiSgoJSGFsb0RhdGFzEgoKAklEGAEgASgFEhAKCE1vZGVUeXBl",
            "GAIgASgJEgkKAVgYAyABKAISCQoBWRgEIAEoAhIJCgFaGAUgASgCIoIBChFN",
            "c2dVc2VyRW50ZXJTY2VuZRILCgNVaWQYASABKAUSEQoJQ29ubmVjdElkGAIg",
            "ASgFEhUKDVNyY1NlcnZlck5hbWUYAyABKAkSFgoORGVzdFNlcnZlck5hbWUY",
            "BCABKAkSDwoHU2NlbmVJRBgFIAEoBRINCgVEYXRhcxgGIAEoDCJyCg1Nc2dQ",
            "bGF5ZXJIdXJ0EhIKCkh1cnRVbml0SUQYASABKAUSFAoMSHVydEFsbFZhbHVl",
            "GAIgASgFEhYKDkh1cnRNYWdpY1ZhbHVlGAMgASgFEg4KBklzQ3JpdBgEIAEo",
            "BRIPCgdHZXRHb2xkGAUgASgFIsgDCglTQ19VcGRhdGUSEAoIQ3VyRnJhbWUY",
            "ASABKAUSJQoITmV3VW5pdHMYAiADKAsyEy5wcm90b21zZy5Vbml0RGF0YXMS",
            "JQoIT2xkVW5pdHMYAyADKAsyEy5wcm90b21zZy5Vbml0RGF0YXMSEwoLUmVt",
            "b3ZlVW5pdHMYBCADKAUSKQoKTmV3QnVsbGV0cxgFIAMoCzIVLnByb3RvbXNn",
            "LkJ1bGxldERhdGFzEikKCk9sZEJ1bGxldHMYBiADKAsyFS5wcm90b21zZy5C",
            "dWxsZXREYXRhcxIVCg1SZW1vdmVCdWxsZXRzGAcgAygFEiUKCE5ld0hhbG9z",
            "GAggAygLMhMucHJvdG9tc2cuSGFsb0RhdGFzEiUKCE9sZEhhbG9zGAkgAygL",
            "MhMucHJvdG9tc2cuSGFsb0RhdGFzEhMKC1JlbW92ZUhhbG9zGAogAygFEi8K",
            "DU5ld1NjZW5lSXRlbXMYCyADKAsyGC5wcm90b21zZy5TY2VuZUl0ZW1EYXRh",
            "cxIYChBSZW1vdmVTY2VuZUl0ZW1zGAwgAygFEisKClBsYXllckh1cnQYDSAD",
            "KAsyFy5wcm90b21zZy5Nc2dQbGF5ZXJIdXJ0ImQKC1NDX05ld1NjZW5lEgwK",
            "BE5hbWUYASABKAkSEAoITG9naWNGcHMYAiABKAUSEAoIQ3VyRnJhbWUYAyAB",
            "KAUSEgoKU2VydmVyTmFtZRgEIAEoCRIPCgdTY2VuZUlEGAUgASgFIlYKEkNo",
            "YXJhY3RlckJhc2VEYXRhcxITCgtDaGFyYWN0ZXJpZBgBIAEoBRIMCgROYW1l",
            "GAIgASgJEg4KBlR5cGVpZBgDIAEoBRINCgVMZXZlbBgEIAEoBSJoCgpTQ19M",
            "b2dpbmVkEgwKBENvZGUYASABKAUSCwoDVWlkGAIgASgFEg0KBUVycm9yGAMg",
            "ASgJEjAKCkNoYXJhY3RlcnMYBCADKAsyHC5wcm90b21zZy5DaGFyYWN0ZXJC",
            "YXNlRGF0YXMiTAoYU0NfU2VsZWN0Q2hhcmFjdGVyUmVzdWx0EgwKBENvZGUY",
            "ASABKAUSEwoLQ2hhcmFjdGVyaWQYAiABKAUSDQoFRXJyb3IYAyABKAUiZQoS",
            "Q29tbW9kaXR5RGF0YVByb3RvEg4KBlR5cGVJRBgBIAEoBRIOCgZJdGVtSUQY",
            "AiABKAUSEQoJUHJpY2VUeXBlGAMgASgFEg0KBVByaWNlGAQgASgFEg0KBUxl",
            "dmVsGAUgASgFIh8KD0NTX0dldFN0b3JlRGF0YRIMCgRUZXN0GAEgASgFIkAK",
            "DFNDX1N0b3JlRGF0YRIwCgpDb21tb2RpdHlzGAEgAygLMhwucHJvdG9tc2cu",
            "Q29tbW9kaXR5RGF0YVByb3RvIiEKD0NTX0J1eUNvbW1vZGl0eRIOCgZUeXBl",
            "SUQYASABKAUiJAoOQ1NfUXVpY2tSZXZpdmUSEgoKUmV2aXZlVHlwZRgBIAEo",
            "BSIcCg1DQ19EaXNjb25uZWN0EgsKA0VychgBIAEoCSJ7CgtTQ19DaGF0SW5m",
            "bxIPCgdDaGFubmVsGAEgASgFEgwKBFRpbWUYAiABKAkSDwoHU3JjTmFtZRgD",
            "IAEoCRIUCgxTcmNQbGF5ZXJVSUQYBCABKAUSFQoNRGVzdFBsYXllclVJRBgF",
            "IAEoBRIPCgdDb250ZW50GAYgASgJIkYKC0NTX0NoYXRJbmZvEg8KB0NoYW5u",
            "ZWwYASABKAUSFQoNRGVzdFBsYXllclVJRBgFIAEoBRIPCgdDb250ZW50GAYg",
            "ASgJIjcKE0NTX0FkZEZyaWVuZFJlcXVlc3QSCwoDVWlkGAEgASgFEhMKC0No",
            "YXJhY3RlcmlkGAIgASgFIjMKD0NTX1JlbW92ZUZyaWVuZBILCgNVaWQYASAB",
            "KAUSEwoLQ2hhcmFjdGVyaWQYAiABKAUiUwoUQ1NfQWRkRnJpZW5kUmVzcG9u",
            "c2USKwoKRnJpZW5kSW5mbxgBIAEoCzIXLnByb3RvbXNnLkZyaWVuZEluZm9N",
            "c2cSDgoGUmVzdWx0GAIgASgFIm0KDUZyaWVuZEluZm9Nc2cSCwoDVWlkGAEg",
            "ASgFEhMKC0NoYXJhY3RlcmlkGAIgASgFEgwKBE5hbWUYAyABKAkSDQoFTGV2",
            "ZWwYBCABKAUSDgoGVHlwZWlkGAUgASgFEg0KBVN0YXRlGAYgASgFIiAKEUNT",
            "X0dldEZyaWVuZHNMaXN0EgsKA1VpZBgBIAEoBSJuChFTQ19HZXRGcmllbmRz",
            "TGlzdBIoCgdGcmllbmRzGAEgAygLMhcucHJvdG9tc2cuRnJpZW5kSW5mb01z",
            "ZxIvCg5GcmllbmRzUmVxdWVzdBgCIAMoCzIXLnByb3RvbXNnLkZyaWVuZElu",
            "Zm9Nc2ciXAoQTWFpbFNob3J0SW5mb01zZxIKCgJJZBgBIAEoBRIQCghTZW5k",
            "TmFtZRgCIAEoCRINCgVUaXRsZRgDIAEoCRIMCgREYXRlGAQgASgJEg0KBVN0",
            "YXRlGAUgASgFIj0KC01haWxSZXdhcmRzEhAKCEl0ZW1UeXBlGAEgASgFEg0K",
            "BUNvdW50GAIgASgFEg0KBUxldmVsGAMgASgFIh4KD0NTX0dldE1haWxzTGlz",
            "dBILCgNVaWQYASABKAUiVAoPU0NfR2V0TWFpbHNMaXN0EikKBU1haWxzGAEg",
            "AygLMhoucHJvdG9tc2cuTWFpbFNob3J0SW5mb01zZxIWCg5NYWlsVXBwZXJM",
            "aW1pdBgCIAEoBSIcCg5DU19HZXRNYWlsSW5mbxIKCgJJZBgBIAEoBSKTAQoO",
            "U0NfR2V0TWFpbEluZm8SCgoCSWQYASABKAUSEAoIU2VuZE5hbWUYAiABKAkS",
            "DQoFVGl0bGUYAyABKAkSDwoHQ29udGVudBgEIAEoCRIMCgREYXRlGAUgASgJ",
            "EiYKB1Jld2FyZHMYBiADKAsyFS5wcm90b21zZy5NYWlsUmV3YXJkcxINCgVT",
            "dGF0ZRgHIAEoBSIfChFDU19HZXRNYWlsUmV3YXJkcxIKCgJJZBgBIAEoBSIv",
            "ChFTQ19HZXRNYWlsUmV3YXJkcxIKCgJJZBgBIAEoBRIOCgZSZXN1bHQYAiAB",
            "KAUiJAoWQ1NfRGVsZXRlTm9SZXdhcmRNYWlscxIKCgJJZBgBIAEoBSIrCh1D",
            "U19HZXRFeGNoYW5nZVNob3J0Q29tbW9kaXR5cxIKCgJJZBgBIAEoBSI/ChpF",
            "eGNoYW5nZVNob3J0Q29tbW9kaXR5RGF0YRIOCgZJdGVtSUQYASABKAUSEQoJ",
            "U2VsbENvdW50GAIgASgFIlkKHVNDX0dldEV4Y2hhbmdlU2hvcnRDb21tb2Rp",
            "dHlzEjgKCkNvbW1vZGl0eXMYASADKAsyJC5wcm90b21zZy5FeGNoYW5nZVNo",
            "b3J0Q29tbW9kaXR5RGF0YSIyCiBDU19HZXRFeGNoYW5nZURldGFpbGVkQ29t",
            "bW9kaXR5cxIOCgZJdGVtSUQYASABKAUiaQodRXhjaGFuZ2VEZXRhaWxlZENv",
            "bW1vZGl0eURhdGESMwoNQ29tbW9kaXR5RGF0YRgBIAEoCzIcLnByb3RvbXNn",
            "LkNvbW1vZGl0eURhdGFQcm90bxITCgtSZW1haW5kVGltZRgCIAEoBSJfCiBT",
            "Q19HZXRFeGNoYW5nZURldGFpbGVkQ29tbW9kaXR5cxI7CgpDb21tb2RpdHlz",
            "GAEgAygLMicucHJvdG9tc2cuRXhjaGFuZ2VEZXRhaWxlZENvbW1vZGl0eURh",
            "dGEiJQoXQ1NfQnV5RXhjaGFuZ2VDb21tb2RpdHkSCgoCSUQYASABKAUiTQoZ",
            "Q1NfU2hlbGZFeGNoYW5nZUNvbW1vZGl0eRIOCgZCYWdQb3MYASABKAUSEQoJ",
            "UHJpY2VUeXBlGAIgASgFEg0KBVByaWNlGAMgASgFIikKG0NTX1VuU2hlbGZF",
            "eGNoYW5nZUNvbW1vZGl0eRIKCgJJRBgBIAEoBSIeChBDU19HZXRTZWxsVUlJ",
            "bmZvEgoKAklEGAEgASgFIoQCChBTQ19HZXRTZWxsVUlJbmZvEhoKElNoZWxm",
            "RXhjaGFuZ2VMaW1pdBgBIAEoBRIXCg9TZWxsRXhjaGFuZ2VUYXgYAiABKAIS",
            "IQoZU2hlbGZFeGNoYW5nZUZlZVByaWNlVHlwZRgDIAEoBRIdChVTaGVsZkV4",
            "Y2hhbmdlRmVlUHJpY2UYBCABKAUSFwoPQXV0b1VuU2hlbGZUaW1lGAUgASgF",
            "EjsKCkNvbW1vZGl0eXMYBiADKAsyJy5wcm90b21zZy5FeGNoYW5nZURldGFp",
            "bGVkQ29tbW9kaXR5RGF0YRIjCgZFcXVpcHMYByADKAsyEy5wcm90b21zZy5V",
            "bml0RXF1aXAiIQoTQ1NfR2V0QWxsR3VpbGRzSW5mbxIKCgJJRBgBIAEoBSLg",
            "AQoOR3VpbGRTaG9ydEluZm8SCgoCSUQYASABKAUSDAoETmFtZRgCIAEoCRIN",
            "CgVMZXZlbBgDIAEoBRISCgpFeHBlcmllbmNlGAQgASgFEhUKDU1heEV4cGVy",
            "aWVuY2UYBSABKAUSFgoOQ2hhcmFjdGVyQ291bnQYBiABKAUSEAoITWF4Q291",
            "bnQYByABKAUSFQoNUHJlc2lkZW50TmFtZRgIIAEoCRIRCglKb2luYXVkaXQY",
            "CSABKAUSFgoOSm9pbmxldmVsbGltaXQYCiABKAUSDgoGTm90aWNlGAsgASgJ",
            "Im0KE1NDX0dldEFsbEd1aWxkc0luZm8SKAoGR3VpbGRzGAEgAygLMhgucHJv",
            "dG9tc2cuR3VpbGRTaG9ydEluZm8SFwoPQ3JlYXRlUHJpY2VUeXBlGAIgASgF",
            "EhMKC0NyZWF0ZVByaWNlGAMgASgFIh4KDkNTX0NyZWF0ZUd1aWxkEgwKBE5h",
            "bWUYASABKAkiGgoMQ1NfSm9pbkd1aWxkEgoKAklEGAEgASgFIh0KD0NTX0dl",
            "dEd1aWxkSW5mbxIKCgJJRBgBIAEoBSJuCg9TQ19HZXRHdWlsZEluZm8SLwoN",
            "R3VpbGRCYXNlSW5mbxgBIAEoCzIYLnByb3RvbXNnLkd1aWxkU2hvcnRJbmZv",
            "EioKCkNoYXJhY3RlcnMYAiADKAsyFi5wcm90b21zZy5HdWlsZENoYUluZm8i",
            "1gEKDEd1aWxkQ2hhSW5mbxILCgNVaWQYASABKAUSEwoLQ2hhcmFjdGVyaWQY",
            "AiABKAUSDAoETmFtZRgDIAEoCRINCgVMZXZlbBgEIAEoBRIOCgZUeXBlaWQY",
            "BSABKAUSEAoIUGluTGV2ZWwYBiABKAUSFQoNUGluRXhwZXJpZW5jZRgHIAEo",
            "BRIMCgRQb3N0GAggASgFEhQKDFBpbkxldmVsTmFtZRgJIAEoCRIQCghQb3N0",
            "TmFtZRgKIAEoCRIYChBQaW5NYXhFeHBlcmllbmNlGAsgASgFIiMKFUNTX0dl",
            "dEpvaW5HdWlsZFBsYXllchIKCgJJRBgBIAEoBSJKChVTQ19HZXRKb2luR3Vp",
            "bGRQbGF5ZXISMQoRUmVxdWVzdENoYXJhY3RlcnMYASADKAsyFi5wcm90b21z",
            "Zy5HdWlsZENoYUluZm8iQQoaQ1NfUmVzcG9uc2VKb2luR3VpbGRQbGF5ZXIS",
            "EwoLQ2hhcmFjdGVyaWQYASABKAUSDgoGUmVzdWx0GAIgASgFIisKFENTX0Rl",
            "bGV0ZUd1aWxkUGxheWVyEhMKC0NoYXJhY3RlcmlkGAEgASgFIh8KD0NTX0d1",
            "aWxkT3BlcmF0ZRIMCgRDb2RlGAEgASgFIiAKEkNTX0dldEF1Y3Rpb25JdGVt",
            "cxIKCgJJRBgBIAEoBSI6ChJTQ19HZXRBdWN0aW9uSXRlbXMSJAoFSXRlbXMY",
            "ASADKAsyFS5wcm90b21zZy5BdWN0aW9uSXRlbSKqAQoLQXVjdGlvbkl0ZW0S",
            "CgoCSUQYASABKAUSDgoGSXRlbUlEGAIgASgFEhEKCVByaWNlVHlwZRgDIAEo",
            "BRINCgVQcmljZRgEIAEoBRINCgVMZXZlbBgFIAEoBRIbChNCaWRkZXJDaGFy",
            "YWN0ZXJOYW1lGAYgASgJEh0KFVJlY2VpdmVjaGFyYWN0ZXJzTmFtZRgHIAMo",
            "CRISCgpSZW1haW5UaW1lGAggASgFIjMKFkNTX05ld1ByaWNlQXVjdGlvbkl0",
            "ZW0SCgoCSUQYASABKAUSDQoFUHJpY2UYAiABKAUiIQoTQ1NfR2V0R3VpbGRN",
            "YXBzSW5mbxIKCgJJRBgBIAEoBSI7ChNTQ19HZXRHdWlsZE1hcHNJbmZvEiQK",
            "BE1hcHMYASADKAsyFi5wcm90b21zZy5HdWlsZE1hcEluZm8ingEKDEd1aWxk",
            "TWFwSW5mbxIKCgJJRBgBIAEoBRIUCgxPcGVuTW9udGhEYXkYAiABKAUSEwoL",
            "T3BlbldlZWtEYXkYAyABKAkSFQoNT3BlblN0YXJ0VGltZRgEIAEoCRITCgtP",
            "cGVuRW5kVGltZRgFIAEoCRIWCg5OZWVkR3VpbGRMZXZlbBgGIAEoBRITCgtO",
            "ZXh0U2NlbmVJRBgHIAEoBSIdCg9DU19Hb3RvR3VpbGRNYXASCgoCSUQYASAB",
            "KAUiIQoPU0NfR290b0d1aWxkTWFwEg4KBlJlc3VsdBgBIAEoBSIkChZDU19H",
            "ZXRBY3Rpdml0eU1hcHNJbmZvEgoKAklEGAEgASgFIkEKFlNDX0dldEFjdGl2",
            "aXR5TWFwc0luZm8SJwoETWFwcxgBIAMoCzIZLnByb3RvbXNnLkFjdGl2aXR5",
            "TWFwSW5mbyK+AQoPQWN0aXZpdHlNYXBJbmZvEgoKAklEGAEgASgFEhQKDE9w",
            "ZW5Nb250aERheRgCIAEoBRITCgtPcGVuV2Vla0RheRgDIAEoCRIVCg1PcGVu",
            "U3RhcnRUaW1lGAQgASgJEhMKC09wZW5FbmRUaW1lGAUgASgJEhEKCU5lZWRM",
            "ZXZlbBgGIAEoBRITCgtOZXh0U2NlbmVJRBgHIAEoBRIRCglQcmljZVR5cGUY",
            "CCABKAUSDQoFUHJpY2UYCSABKAUiIAoNQ1NfR2V0TWFwSW5mbxIPCgdTY2Vu",
            "ZUlEGAEgASgFIkoKDVNDX0dldE1hcEluZm8SDwoHU2NlbmVJRBgBIAEoBRIV",
            "Cg1Cb3NzRnJlc2hUaW1lGAIgASgFEhEKCURyb3BJdGVtcxgDIAMoBSIgChJD",
            "U19Hb3RvQWN0aXZpdHlNYXASCgoCSUQYASABKAUiJAoSU0NfR290b0FjdGl2",
            "aXR5TWFwEg4KBlJlc3VsdBgBIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.MsgBase), global::Protomsg.MsgBase.Parser, new[]{ "ModeType", "Uid", "MsgType", "ConnectId", "Datas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.MsgRegisterToGate), global::Protomsg.MsgRegisterToGate.Parser, new[]{ "ModeType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_MsgQuickLogin), global::Protomsg.CS_MsgQuickLogin.Parser, new[]{ "Platform", "Machineid", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_Login), global::Protomsg.CS_Login.Parser, new[]{ "Phonenumber", "Platform", "Machineid", "WechatId", "QQId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_SelectCharacter), global::Protomsg.CS_SelectCharacter.Parser, new[]{ "SelectCharacter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_LodingScene), global::Protomsg.CS_LodingScene.Parser, new[]{ "SceneID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_LookVedioSucc), global::Protomsg.CS_LookVedioSucc.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_UseAI), global::Protomsg.CS_UseAI.Parser, new[]{ "AIid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.UnitEquip), global::Protomsg.UnitEquip.Parser, new[]{ "Pos", "TypdID", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.UnitBoardDatas), global::Protomsg.UnitBoardDatas.Parser, new[]{ "ID", "Name", "AttributeStrength", "AttributeAgility", "AttributeIntelligence", "Attack", "AttackSpeed", "AttackRange", "MoveSpeed", "MagicScale", "MPRegain", "PhysicalAmaor", "PhysicalResist", "MagicAmaor", "StatusAmaor", "Dodge", "HPRegain", "AttributePrimary", "DropItems", "RemainExperience", "Equips" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GetUnitInfo), global::Protomsg.CS_GetUnitInfo.Parser, new[]{ "UnitID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GetBagInfo), global::Protomsg.CS_GetBagInfo.Parser, new[]{ "UnitID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_ChangeItemPos), global::Protomsg.CS_ChangeItemPos.Parser, new[]{ "SrcPos", "DestPos", "SrcType", "DestType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_DestroyItem), global::Protomsg.CS_DestroyItem.Parser, new[]{ "SrcPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_UnitInfo), global::Protomsg.SC_UnitInfo.Parser, new[]{ "UnitData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_BagInfo), global::Protomsg.SC_BagInfo.Parser, new[]{ "Equips" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_PlayerUpgradeSkill), global::Protomsg.CS_PlayerUpgradeSkill.Parser, new[]{ "TypeID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_PlayerMove), global::Protomsg.CS_PlayerMove.Parser, new[]{ "IDs", "X", "Y", "IsStart" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_PlayerAttack), global::Protomsg.CS_PlayerAttack.Parser, new[]{ "IDs", "TargetUnitID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_PlayerSkill), global::Protomsg.CS_PlayerSkill.Parser, new[]{ "ID", "SkillID", "X", "Y", "TargetUnitID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_ChangeAttackMode), global::Protomsg.CS_ChangeAttackMode.Parser, new[]{ "AttackMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_OrganizeTeam), global::Protomsg.CS_OrganizeTeam.Parser, new[]{ "Player1", "Player2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_RequestTeam), global::Protomsg.SC_RequestTeam.Parser, new[]{ "SrcPlayerUID", "SrcName", "SrcUnitTypeID", "SrcLevel", "RequestType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_ResponseOrgTeam), global::Protomsg.CS_ResponseOrgTeam.Parser, new[]{ "SrcPlayerUID", "IsAgree", "RequestType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_OutTeam), global::Protomsg.CS_OutTeam.Parser, new[]{ "OutPlayerUID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.TeamPlayerInfo), global::Protomsg.TeamPlayerInfo.Parser, new[]{ "UID", "Name", "HP", "MP", "MaxHP", "MaxMP", "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_UpdateTeamInfo), global::Protomsg.SC_UpdateTeamInfo.Parser, new[]{ "TeamID", "MainUID", "TPInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_NoticeWords), global::Protomsg.SC_NoticeWords.Parser, new[]{ "TypeID", "P" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SkillDatas), global::Protomsg.SkillDatas.Parser, new[]{ "TypeID", "Level", "RemainCDTime", "CanUpgrade", "Index", "CastType", "CastTargetType", "UnitTargetTeam", "UnitTargetCamp", "NoCareMagicImmune", "CastRange", "Cooldown", "HurtRange", "ManaCost", "AttackAutoActive", "Visible", "RemainSkillCount", "MaxLevel", "RequiredLevel", "LevelsBetweenUpgrades", "InitLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.BuffDatas), global::Protomsg.BuffDatas.Parser, new[]{ "TypeID", "RemainTime", "Time", "TagNum", "ConnectionType", "ConnectionX", "ConnectionY", "ConnectionZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.UnitDatas), global::Protomsg.UnitDatas.Parser, new[]{ "Name", "Level", "HP", "MP", "X", "Y", "ID", "ModeType", "MaxHP", "MaxMP", "Experience", "MaxExperience", "ControlID", "AnimotorState", "AttackTime", "DirectionX", "DirectionY", "UnitType", "AttackAcpabilities", "AttackMode", "IsMain", "IsDeath", "Invisible", "Camp", "IsMiss", "AnimotorPause", "SkillEnable", "ItemEnable", "Z", "IsMirrorImage", "AttackRange", "AttackAnim", "TypeID", "RemainReviveTime", "TeamID", "Gold", "Diamond", "ReviveGold", "ReviveDiamond", "Characterid", "RemainWatchVedioCountToday", "WatchVedioAddDiamond", "GuildID", "SD", "BD", "ISD" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.BulletDatas), global::Protomsg.BulletDatas.Parser, new[]{ "ID", "ModeType", "X", "Y", "Z", "State", "StartX", "StartY", "StartZ", "EndX", "EndY", "EndZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SceneItemDatas), global::Protomsg.SceneItemDatas.Parser, new[]{ "ID", "TypeID", "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.HaloDatas), global::Protomsg.HaloDatas.Parser, new[]{ "ID", "ModeType", "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.MsgUserEnterScene), global::Protomsg.MsgUserEnterScene.Parser, new[]{ "Uid", "ConnectId", "SrcServerName", "DestServerName", "SceneID", "Datas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.MsgPlayerHurt), global::Protomsg.MsgPlayerHurt.Parser, new[]{ "HurtUnitID", "HurtAllValue", "HurtMagicValue", "IsCrit", "GetGold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_Update), global::Protomsg.SC_Update.Parser, new[]{ "CurFrame", "NewUnits", "OldUnits", "RemoveUnits", "NewBullets", "OldBullets", "RemoveBullets", "NewHalos", "OldHalos", "RemoveHalos", "NewSceneItems", "RemoveSceneItems", "PlayerHurt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_NewScene), global::Protomsg.SC_NewScene.Parser, new[]{ "Name", "LogicFps", "CurFrame", "ServerName", "SceneID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CharacterBaseDatas), global::Protomsg.CharacterBaseDatas.Parser, new[]{ "Characterid", "Name", "Typeid", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_Logined), global::Protomsg.SC_Logined.Parser, new[]{ "Code", "Uid", "Error", "Characters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_SelectCharacterResult), global::Protomsg.SC_SelectCharacterResult.Parser, new[]{ "Code", "Characterid", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CommodityDataProto), global::Protomsg.CommodityDataProto.Parser, new[]{ "TypeID", "ItemID", "PriceType", "Price", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GetStoreData), global::Protomsg.CS_GetStoreData.Parser, new[]{ "Test" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_StoreData), global::Protomsg.SC_StoreData.Parser, new[]{ "Commoditys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_BuyCommodity), global::Protomsg.CS_BuyCommodity.Parser, new[]{ "TypeID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_QuickRevive), global::Protomsg.CS_QuickRevive.Parser, new[]{ "ReviveType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CC_Disconnect), global::Protomsg.CC_Disconnect.Parser, new[]{ "Err" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_ChatInfo), global::Protomsg.SC_ChatInfo.Parser, new[]{ "Channel", "Time", "SrcName", "SrcPlayerUID", "DestPlayerUID", "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_ChatInfo), global::Protomsg.CS_ChatInfo.Parser, new[]{ "Channel", "DestPlayerUID", "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_AddFriendRequest), global::Protomsg.CS_AddFriendRequest.Parser, new[]{ "Uid", "Characterid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_RemoveFriend), global::Protomsg.CS_RemoveFriend.Parser, new[]{ "Uid", "Characterid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_AddFriendResponse), global::Protomsg.CS_AddFriendResponse.Parser, new[]{ "FriendInfo", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.FriendInfoMsg), global::Protomsg.FriendInfoMsg.Parser, new[]{ "Uid", "Characterid", "Name", "Level", "Typeid", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GetFriendsList), global::Protomsg.CS_GetFriendsList.Parser, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_GetFriendsList), global::Protomsg.SC_GetFriendsList.Parser, new[]{ "Friends", "FriendsRequest" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.MailShortInfoMsg), global::Protomsg.MailShortInfoMsg.Parser, new[]{ "Id", "SendName", "Title", "Date", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.MailRewards), global::Protomsg.MailRewards.Parser, new[]{ "ItemType", "Count", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GetMailsList), global::Protomsg.CS_GetMailsList.Parser, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_GetMailsList), global::Protomsg.SC_GetMailsList.Parser, new[]{ "Mails", "MailUpperLimit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GetMailInfo), global::Protomsg.CS_GetMailInfo.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_GetMailInfo), global::Protomsg.SC_GetMailInfo.Parser, new[]{ "Id", "SendName", "Title", "Content", "Date", "Rewards", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GetMailRewards), global::Protomsg.CS_GetMailRewards.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_GetMailRewards), global::Protomsg.SC_GetMailRewards.Parser, new[]{ "Id", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_DeleteNoRewardMails), global::Protomsg.CS_DeleteNoRewardMails.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GetExchangeShortCommoditys), global::Protomsg.CS_GetExchangeShortCommoditys.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.ExchangeShortCommodityData), global::Protomsg.ExchangeShortCommodityData.Parser, new[]{ "ItemID", "SellCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_GetExchangeShortCommoditys), global::Protomsg.SC_GetExchangeShortCommoditys.Parser, new[]{ "Commoditys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GetExchangeDetailedCommoditys), global::Protomsg.CS_GetExchangeDetailedCommoditys.Parser, new[]{ "ItemID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.ExchangeDetailedCommodityData), global::Protomsg.ExchangeDetailedCommodityData.Parser, new[]{ "CommodityData", "RemaindTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_GetExchangeDetailedCommoditys), global::Protomsg.SC_GetExchangeDetailedCommoditys.Parser, new[]{ "Commoditys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_BuyExchangeCommodity), global::Protomsg.CS_BuyExchangeCommodity.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_ShelfExchangeCommodity), global::Protomsg.CS_ShelfExchangeCommodity.Parser, new[]{ "BagPos", "PriceType", "Price" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_UnShelfExchangeCommodity), global::Protomsg.CS_UnShelfExchangeCommodity.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GetSellUIInfo), global::Protomsg.CS_GetSellUIInfo.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_GetSellUIInfo), global::Protomsg.SC_GetSellUIInfo.Parser, new[]{ "ShelfExchangeLimit", "SellExchangeTax", "ShelfExchangeFeePriceType", "ShelfExchangeFeePrice", "AutoUnShelfTime", "Commoditys", "Equips" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GetAllGuildsInfo), global::Protomsg.CS_GetAllGuildsInfo.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.GuildShortInfo), global::Protomsg.GuildShortInfo.Parser, new[]{ "ID", "Name", "Level", "Experience", "MaxExperience", "CharacterCount", "MaxCount", "PresidentName", "Joinaudit", "Joinlevellimit", "Notice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_GetAllGuildsInfo), global::Protomsg.SC_GetAllGuildsInfo.Parser, new[]{ "Guilds", "CreatePriceType", "CreatePrice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_CreateGuild), global::Protomsg.CS_CreateGuild.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_JoinGuild), global::Protomsg.CS_JoinGuild.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GetGuildInfo), global::Protomsg.CS_GetGuildInfo.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_GetGuildInfo), global::Protomsg.SC_GetGuildInfo.Parser, new[]{ "GuildBaseInfo", "Characters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.GuildChaInfo), global::Protomsg.GuildChaInfo.Parser, new[]{ "Uid", "Characterid", "Name", "Level", "Typeid", "PinLevel", "PinExperience", "Post", "PinLevelName", "PostName", "PinMaxExperience" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GetJoinGuildPlayer), global::Protomsg.CS_GetJoinGuildPlayer.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_GetJoinGuildPlayer), global::Protomsg.SC_GetJoinGuildPlayer.Parser, new[]{ "RequestCharacters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_ResponseJoinGuildPlayer), global::Protomsg.CS_ResponseJoinGuildPlayer.Parser, new[]{ "Characterid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_DeleteGuildPlayer), global::Protomsg.CS_DeleteGuildPlayer.Parser, new[]{ "Characterid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GuildOperate), global::Protomsg.CS_GuildOperate.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GetAuctionItems), global::Protomsg.CS_GetAuctionItems.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_GetAuctionItems), global::Protomsg.SC_GetAuctionItems.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.AuctionItem), global::Protomsg.AuctionItem.Parser, new[]{ "ID", "ItemID", "PriceType", "Price", "Level", "BidderCharacterName", "ReceivecharactersName", "RemainTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_NewPriceAuctionItem), global::Protomsg.CS_NewPriceAuctionItem.Parser, new[]{ "ID", "Price" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GetGuildMapsInfo), global::Protomsg.CS_GetGuildMapsInfo.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_GetGuildMapsInfo), global::Protomsg.SC_GetGuildMapsInfo.Parser, new[]{ "Maps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.GuildMapInfo), global::Protomsg.GuildMapInfo.Parser, new[]{ "ID", "OpenMonthDay", "OpenWeekDay", "OpenStartTime", "OpenEndTime", "NeedGuildLevel", "NextSceneID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GotoGuildMap), global::Protomsg.CS_GotoGuildMap.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_GotoGuildMap), global::Protomsg.SC_GotoGuildMap.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GetActivityMapsInfo), global::Protomsg.CS_GetActivityMapsInfo.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_GetActivityMapsInfo), global::Protomsg.SC_GetActivityMapsInfo.Parser, new[]{ "Maps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.ActivityMapInfo), global::Protomsg.ActivityMapInfo.Parser, new[]{ "ID", "OpenMonthDay", "OpenWeekDay", "OpenStartTime", "OpenEndTime", "NeedLevel", "NextSceneID", "PriceType", "Price" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GetMapInfo), global::Protomsg.CS_GetMapInfo.Parser, new[]{ "SceneID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_GetMapInfo), global::Protomsg.SC_GetMapInfo.Parser, new[]{ "SceneID", "BossFreshTime", "DropItems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GotoActivityMap), global::Protomsg.CS_GotoActivityMap.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_GotoActivityMap), global::Protomsg.SC_GotoActivityMap.Parser, new[]{ "Result" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MsgBase : pb::IMessage<MsgBase> {
    private static readonly pb::MessageParser<MsgBase> _parser = new pb::MessageParser<MsgBase>(() => new MsgBase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBase(MsgBase other) : this() {
      modeType_ = other.modeType_;
      uid_ = other.uid_;
      msgType_ = other.msgType_;
      connectId_ = other.connectId_;
      datas_ = other.datas_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBase Clone() {
      return new MsgBase(this);
    }

    /// <summary>Field number for the "ModeType" field.</summary>
    public const int ModeTypeFieldNumber = 1;
    private string modeType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModeType {
      get { return modeType_; }
      set {
        modeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 2;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 3;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ConnectId" field.</summary>
    public const int ConnectIdFieldNumber = 4;
    private int connectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConnectId {
      get { return connectId_; }
      set {
        connectId_ = value;
      }
    }

    /// <summary>Field number for the "Datas" field.</summary>
    public const int DatasFieldNumber = 5;
    private pb::ByteString datas_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Datas {
      get { return datas_; }
      set {
        datas_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModeType != other.ModeType) return false;
      if (Uid != other.Uid) return false;
      if (MsgType != other.MsgType) return false;
      if (ConnectId != other.ConnectId) return false;
      if (Datas != other.Datas) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModeType.Length != 0) hash ^= ModeType.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (ConnectId != 0) hash ^= ConnectId.GetHashCode();
      if (Datas.Length != 0) hash ^= Datas.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModeType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ModeType);
      }
      if (Uid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Uid);
      }
      if (MsgType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MsgType);
      }
      if (ConnectId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ConnectId);
      }
      if (Datas.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Datas);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModeType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModeType);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (MsgType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (ConnectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConnectId);
      }
      if (Datas.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Datas);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgBase other) {
      if (other == null) {
        return;
      }
      if (other.ModeType.Length != 0) {
        ModeType = other.ModeType;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.ConnectId != 0) {
        ConnectId = other.ConnectId;
      }
      if (other.Datas.Length != 0) {
        Datas = other.Datas;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ModeType = input.ReadString();
            break;
          }
          case 16: {
            Uid = input.ReadInt32();
            break;
          }
          case 26: {
            MsgType = input.ReadString();
            break;
          }
          case 32: {
            ConnectId = input.ReadInt32();
            break;
          }
          case 42: {
            Datas = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgRegisterToGate : pb::IMessage<MsgRegisterToGate> {
    private static readonly pb::MessageParser<MsgRegisterToGate> _parser = new pb::MessageParser<MsgRegisterToGate>(() => new MsgRegisterToGate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgRegisterToGate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgRegisterToGate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgRegisterToGate(MsgRegisterToGate other) : this() {
      modeType_ = other.modeType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgRegisterToGate Clone() {
      return new MsgRegisterToGate(this);
    }

    /// <summary>Field number for the "ModeType" field.</summary>
    public const int ModeTypeFieldNumber = 1;
    private string modeType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModeType {
      get { return modeType_; }
      set {
        modeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgRegisterToGate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgRegisterToGate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModeType != other.ModeType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModeType.Length != 0) hash ^= ModeType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModeType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ModeType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModeType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModeType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgRegisterToGate other) {
      if (other == null) {
        return;
      }
      if (other.ModeType.Length != 0) {
        ModeType = other.ModeType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ModeType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CS_MsgQuickLogin : pb::IMessage<CS_MsgQuickLogin> {
    private static readonly pb::MessageParser<CS_MsgQuickLogin> _parser = new pb::MessageParser<CS_MsgQuickLogin>(() => new CS_MsgQuickLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_MsgQuickLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_MsgQuickLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_MsgQuickLogin(CS_MsgQuickLogin other) : this() {
      platform_ = other.platform_;
      machineid_ = other.machineid_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_MsgQuickLogin Clone() {
      return new CS_MsgQuickLogin(this);
    }

    /// <summary>Field number for the "Platform" field.</summary>
    public const int PlatformFieldNumber = 1;
    private string platform_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Machineid" field.</summary>
    public const int MachineidFieldNumber = 2;
    private string machineid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Machineid {
      get { return machineid_; }
      set {
        machineid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_MsgQuickLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_MsgQuickLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Platform != other.Platform) return false;
      if (Machineid != other.Machineid) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (Machineid.Length != 0) hash ^= Machineid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Platform.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Platform);
      }
      if (Machineid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Machineid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (Machineid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Machineid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_MsgQuickLogin other) {
      if (other == null) {
        return;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.Machineid.Length != 0) {
        Machineid = other.Machineid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Platform = input.ReadString();
            break;
          }
          case 18: {
            Machineid = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CS_Login : pb::IMessage<CS_Login> {
    private static readonly pb::MessageParser<CS_Login> _parser = new pb::MessageParser<CS_Login>(() => new CS_Login());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Login> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Login() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Login(CS_Login other) : this() {
      phonenumber_ = other.phonenumber_;
      platform_ = other.platform_;
      machineid_ = other.machineid_;
      wechatId_ = other.wechatId_;
      qQId_ = other.qQId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Login Clone() {
      return new CS_Login(this);
    }

    /// <summary>Field number for the "Phonenumber" field.</summary>
    public const int PhonenumberFieldNumber = 1;
    private string phonenumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phonenumber {
      get { return phonenumber_; }
      set {
        phonenumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Platform" field.</summary>
    public const int PlatformFieldNumber = 2;
    private string platform_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Machineid" field.</summary>
    public const int MachineidFieldNumber = 3;
    private string machineid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Machineid {
      get { return machineid_; }
      set {
        machineid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Wechat_id" field.</summary>
    public const int WechatIdFieldNumber = 4;
    private string wechatId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WechatId {
      get { return wechatId_; }
      set {
        wechatId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "QQ_id" field.</summary>
    public const int QQIdFieldNumber = 5;
    private string qQId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QQId {
      get { return qQId_; }
      set {
        qQId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Login);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Login other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Phonenumber != other.Phonenumber) return false;
      if (Platform != other.Platform) return false;
      if (Machineid != other.Machineid) return false;
      if (WechatId != other.WechatId) return false;
      if (QQId != other.QQId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Phonenumber.Length != 0) hash ^= Phonenumber.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (Machineid.Length != 0) hash ^= Machineid.GetHashCode();
      if (WechatId.Length != 0) hash ^= WechatId.GetHashCode();
      if (QQId.Length != 0) hash ^= QQId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Phonenumber.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Phonenumber);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Platform);
      }
      if (Machineid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Machineid);
      }
      if (WechatId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WechatId);
      }
      if (QQId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(QQId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Phonenumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phonenumber);
      }
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (Machineid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Machineid);
      }
      if (WechatId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WechatId);
      }
      if (QQId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QQId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Login other) {
      if (other == null) {
        return;
      }
      if (other.Phonenumber.Length != 0) {
        Phonenumber = other.Phonenumber;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.Machineid.Length != 0) {
        Machineid = other.Machineid;
      }
      if (other.WechatId.Length != 0) {
        WechatId = other.WechatId;
      }
      if (other.QQId.Length != 0) {
        QQId = other.QQId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Phonenumber = input.ReadString();
            break;
          }
          case 18: {
            Platform = input.ReadString();
            break;
          }
          case 26: {
            Machineid = input.ReadString();
            break;
          }
          case 34: {
            WechatId = input.ReadString();
            break;
          }
          case 42: {
            QQId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登录成功后的 选择角色
  /// </summary>
  public sealed partial class CS_SelectCharacter : pb::IMessage<CS_SelectCharacter> {
    private static readonly pb::MessageParser<CS_SelectCharacter> _parser = new pb::MessageParser<CS_SelectCharacter>(() => new CS_SelectCharacter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_SelectCharacter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_SelectCharacter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_SelectCharacter(CS_SelectCharacter other) : this() {
      selectCharacter_ = other.selectCharacter_ != null ? other.selectCharacter_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_SelectCharacter Clone() {
      return new CS_SelectCharacter(this);
    }

    /// <summary>Field number for the "SelectCharacter" field.</summary>
    public const int SelectCharacterFieldNumber = 1;
    private global::Protomsg.CharacterBaseDatas selectCharacter_;
    /// <summary>
    ///选择角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protomsg.CharacterBaseDatas SelectCharacter {
      get { return selectCharacter_; }
      set {
        selectCharacter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_SelectCharacter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_SelectCharacter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SelectCharacter, other.SelectCharacter)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selectCharacter_ != null) hash ^= SelectCharacter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selectCharacter_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SelectCharacter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selectCharacter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectCharacter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_SelectCharacter other) {
      if (other == null) {
        return;
      }
      if (other.selectCharacter_ != null) {
        if (selectCharacter_ == null) {
          selectCharacter_ = new global::Protomsg.CharacterBaseDatas();
        }
        SelectCharacter.MergeFrom(other.SelectCharacter);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selectCharacter_ == null) {
              selectCharacter_ = new global::Protomsg.CharacterBaseDatas();
            }
            input.ReadMessage(selectCharacter_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///loading界面加载完成
  /// </summary>
  public sealed partial class CS_LodingScene : pb::IMessage<CS_LodingScene> {
    private static readonly pb::MessageParser<CS_LodingScene> _parser = new pb::MessageParser<CS_LodingScene>(() => new CS_LodingScene());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_LodingScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_LodingScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_LodingScene(CS_LodingScene other) : this() {
      sceneID_ = other.sceneID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_LodingScene Clone() {
      return new CS_LodingScene(this);
    }

    /// <summary>Field number for the "SceneID" field.</summary>
    public const int SceneIDFieldNumber = 1;
    private int sceneID_;
    /// <summary>
    ///场景ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneID {
      get { return sceneID_; }
      set {
        sceneID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_LodingScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_LodingScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneID != other.SceneID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneID != 0) hash ^= SceneID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SceneID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SceneID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_LodingScene other) {
      if (other == null) {
        return;
      }
      if (other.SceneID != 0) {
        SceneID = other.SceneID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SceneID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///观看视频
  /// </summary>
  public sealed partial class CS_LookVedioSucc : pb::IMessage<CS_LookVedioSucc> {
    private static readonly pb::MessageParser<CS_LookVedioSucc> _parser = new pb::MessageParser<CS_LookVedioSucc>(() => new CS_LookVedioSucc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_LookVedioSucc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_LookVedioSucc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_LookVedioSucc(CS_LookVedioSucc other) : this() {
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_LookVedioSucc Clone() {
      return new CS_LookVedioSucc(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///ID  1表示看视频得砖石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_LookVedioSucc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_LookVedioSucc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_LookVedioSucc other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///使用AI
  /// </summary>
  public sealed partial class CS_UseAI : pb::IMessage<CS_UseAI> {
    private static readonly pb::MessageParser<CS_UseAI> _parser = new pb::MessageParser<CS_UseAI>(() => new CS_UseAI());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_UseAI> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_UseAI() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_UseAI(CS_UseAI other) : this() {
      aIid_ = other.aIid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_UseAI Clone() {
      return new CS_UseAI(this);
    }

    /// <summary>Field number for the "AIid" field.</summary>
    public const int AIidFieldNumber = 1;
    private int aIid_;
    /// <summary>
    ///AIid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AIid {
      get { return aIid_; }
      set {
        aIid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_UseAI);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_UseAI other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AIid != other.AIid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AIid != 0) hash ^= AIid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AIid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AIid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AIid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AIid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_UseAI other) {
      if (other == null) {
        return;
      }
      if (other.AIid != 0) {
        AIid = other.AIid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AIid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///装备栏
  /// </summary>
  public sealed partial class UnitEquip : pb::IMessage<UnitEquip> {
    private static readonly pb::MessageParser<UnitEquip> _parser = new pb::MessageParser<UnitEquip>(() => new UnitEquip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitEquip(UnitEquip other) : this() {
      pos_ = other.pos_;
      typdID_ = other.typdID_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitEquip Clone() {
      return new UnitEquip(this);
    }

    /// <summary>Field number for the "Pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "TypdID" field.</summary>
    public const int TypdIDFieldNumber = 2;
    private int typdID_;
    /// <summary>
    ///类型id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypdID {
      get { return typdID_; }
      set {
        typdID_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnitEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnitEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (TypdID != other.TypdID) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (TypdID != 0) hash ^= TypdID.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (TypdID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TypdID);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (TypdID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypdID);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnitEquip other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.TypdID != 0) {
        TypdID = other.TypdID;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 16: {
            TypdID = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单位面板详细信息
  /// </summary>
  public sealed partial class UnitBoardDatas : pb::IMessage<UnitBoardDatas> {
    private static readonly pb::MessageParser<UnitBoardDatas> _parser = new pb::MessageParser<UnitBoardDatas>(() => new UnitBoardDatas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitBoardDatas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitBoardDatas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitBoardDatas(UnitBoardDatas other) : this() {
      iD_ = other.iD_;
      name_ = other.name_;
      attributeStrength_ = other.attributeStrength_;
      attributeAgility_ = other.attributeAgility_;
      attributeIntelligence_ = other.attributeIntelligence_;
      attack_ = other.attack_;
      attackSpeed_ = other.attackSpeed_;
      attackRange_ = other.attackRange_;
      moveSpeed_ = other.moveSpeed_;
      magicScale_ = other.magicScale_;
      mPRegain_ = other.mPRegain_;
      physicalAmaor_ = other.physicalAmaor_;
      physicalResist_ = other.physicalResist_;
      magicAmaor_ = other.magicAmaor_;
      statusAmaor_ = other.statusAmaor_;
      dodge_ = other.dodge_;
      hPRegain_ = other.hPRegain_;
      attributePrimary_ = other.attributePrimary_;
      dropItems_ = other.dropItems_;
      remainExperience_ = other.remainExperience_;
      equips_ = other.equips_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitBoardDatas Clone() {
      return new UnitBoardDatas(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AttributeStrength" field.</summary>
    public const int AttributeStrengthFieldNumber = 3;
    private float attributeStrength_;
    /// <summary>
    ///力量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttributeStrength {
      get { return attributeStrength_; }
      set {
        attributeStrength_ = value;
      }
    }

    /// <summary>Field number for the "AttributeAgility" field.</summary>
    public const int AttributeAgilityFieldNumber = 4;
    private float attributeAgility_;
    /// <summary>
    ///敏捷
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttributeAgility {
      get { return attributeAgility_; }
      set {
        attributeAgility_ = value;
      }
    }

    /// <summary>Field number for the "AttributeIntelligence" field.</summary>
    public const int AttributeIntelligenceFieldNumber = 5;
    private float attributeIntelligence_;
    /// <summary>
    ///智力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttributeIntelligence {
      get { return attributeIntelligence_; }
      set {
        attributeIntelligence_ = value;
      }
    }

    /// <summary>Field number for the "Attack" field.</summary>
    public const int AttackFieldNumber = 6;
    private int attack_;
    /// <summary>
    ///攻击力 (基础攻击力+属性影响+buff影响)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "AttackSpeed" field.</summary>
    public const int AttackSpeedFieldNumber = 7;
    private float attackSpeed_;
    /// <summary>
    ///攻击速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackSpeed {
      get { return attackSpeed_; }
      set {
        attackSpeed_ = value;
      }
    }

    /// <summary>Field number for the "AttackRange" field.</summary>
    public const int AttackRangeFieldNumber = 8;
    private float attackRange_;
    /// <summary>
    ///攻击范围 攻击距离
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackRange {
      get { return attackRange_; }
      set {
        attackRange_ = value;
      }
    }

    /// <summary>Field number for the "MoveSpeed" field.</summary>
    public const int MoveSpeedFieldNumber = 9;
    private float moveSpeed_;
    /// <summary>
    ///移动速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveSpeed {
      get { return moveSpeed_; }
      set {
        moveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "MagicScale" field.</summary>
    public const int MagicScaleFieldNumber = 10;
    private float magicScale_;
    /// <summary>
    ///技能增强
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MagicScale {
      get { return magicScale_; }
      set {
        magicScale_ = value;
      }
    }

    /// <summary>Field number for the "MPRegain" field.</summary>
    public const int MPRegainFieldNumber = 11;
    private float mPRegain_;
    /// <summary>
    ///魔法恢复
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MPRegain {
      get { return mPRegain_; }
      set {
        mPRegain_ = value;
      }
    }

    /// <summary>Field number for the "PhysicalAmaor" field.</summary>
    public const int PhysicalAmaorFieldNumber = 12;
    private float physicalAmaor_;
    /// <summary>
    ///物理护甲
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PhysicalAmaor {
      get { return physicalAmaor_; }
      set {
        physicalAmaor_ = value;
      }
    }

    /// <summary>Field number for the "PhysicalResist" field.</summary>
    public const int PhysicalResistFieldNumber = 13;
    private float physicalResist_;
    /// <summary>
    ///物理伤害抵挡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PhysicalResist {
      get { return physicalResist_; }
      set {
        physicalResist_ = value;
      }
    }

    /// <summary>Field number for the "MagicAmaor" field.</summary>
    public const int MagicAmaorFieldNumber = 14;
    private float magicAmaor_;
    /// <summary>
    ///魔法抗性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MagicAmaor {
      get { return magicAmaor_; }
      set {
        magicAmaor_ = value;
      }
    }

    /// <summary>Field number for the "StatusAmaor" field.</summary>
    public const int StatusAmaorFieldNumber = 15;
    private float statusAmaor_;
    /// <summary>
    ///状态抗性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StatusAmaor {
      get { return statusAmaor_; }
      set {
        statusAmaor_ = value;
      }
    }

    /// <summary>Field number for the "Dodge" field.</summary>
    public const int DodgeFieldNumber = 16;
    private float dodge_;
    /// <summary>
    ///闪避(0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Dodge {
      get { return dodge_; }
      set {
        dodge_ = value;
      }
    }

    /// <summary>Field number for the "HPRegain" field.</summary>
    public const int HPRegainFieldNumber = 17;
    private float hPRegain_;
    /// <summary>
    ///生命恢复
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HPRegain {
      get { return hPRegain_; }
      set {
        hPRegain_ = value;
      }
    }

    /// <summary>Field number for the "AttributePrimary" field.</summary>
    public const int AttributePrimaryFieldNumber = 18;
    private int attributePrimary_;
    /// <summary>
    ///主属性(1:力量 2:敏捷 3:智力)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttributePrimary {
      get { return attributePrimary_; }
      set {
        attributePrimary_ = value;
      }
    }

    /// <summary>Field number for the "DropItems" field.</summary>
    public const int DropItemsFieldNumber = 19;
    private string dropItems_ = "";
    /// <summary>
    ///掉落道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DropItems {
      get { return dropItems_; }
      set {
        dropItems_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RemainExperience" field.</summary>
    public const int RemainExperienceFieldNumber = 20;
    private int remainExperience_;
    /// <summary>
    ///今天剩余可以获取到的经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainExperience {
      get { return remainExperience_; }
      set {
        remainExperience_ = value;
      }
    }

    /// <summary>Field number for the "Equips" field.</summary>
    public const int EquipsFieldNumber = 21;
    private static readonly pb::FieldCodec<global::Protomsg.UnitEquip> _repeated_equips_codec
        = pb::FieldCodec.ForMessage(170, global::Protomsg.UnitEquip.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.UnitEquip> equips_ = new pbc::RepeatedField<global::Protomsg.UnitEquip>();
    /// <summary>
    ///装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.UnitEquip> Equips {
      get { return equips_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnitBoardDatas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnitBoardDatas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttributeStrength, other.AttributeStrength)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttributeAgility, other.AttributeAgility)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttributeIntelligence, other.AttributeIntelligence)) return false;
      if (Attack != other.Attack) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackSpeed, other.AttackSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackRange, other.AttackRange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveSpeed, other.MoveSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MagicScale, other.MagicScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MPRegain, other.MPRegain)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PhysicalAmaor, other.PhysicalAmaor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PhysicalResist, other.PhysicalResist)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MagicAmaor, other.MagicAmaor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StatusAmaor, other.StatusAmaor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Dodge, other.Dodge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HPRegain, other.HPRegain)) return false;
      if (AttributePrimary != other.AttributePrimary) return false;
      if (DropItems != other.DropItems) return false;
      if (RemainExperience != other.RemainExperience) return false;
      if(!equips_.Equals(other.equips_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (AttributeStrength != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttributeStrength);
      if (AttributeAgility != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttributeAgility);
      if (AttributeIntelligence != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttributeIntelligence);
      if (Attack != 0) hash ^= Attack.GetHashCode();
      if (AttackSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackSpeed);
      if (AttackRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackRange);
      if (MoveSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveSpeed);
      if (MagicScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MagicScale);
      if (MPRegain != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MPRegain);
      if (PhysicalAmaor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PhysicalAmaor);
      if (PhysicalResist != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PhysicalResist);
      if (MagicAmaor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MagicAmaor);
      if (StatusAmaor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StatusAmaor);
      if (Dodge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Dodge);
      if (HPRegain != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HPRegain);
      if (AttributePrimary != 0) hash ^= AttributePrimary.GetHashCode();
      if (DropItems.Length != 0) hash ^= DropItems.GetHashCode();
      if (RemainExperience != 0) hash ^= RemainExperience.GetHashCode();
      hash ^= equips_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (AttributeStrength != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(AttributeStrength);
      }
      if (AttributeAgility != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(AttributeAgility);
      }
      if (AttributeIntelligence != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(AttributeIntelligence);
      }
      if (Attack != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Attack);
      }
      if (AttackSpeed != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(AttackSpeed);
      }
      if (AttackRange != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(AttackRange);
      }
      if (MoveSpeed != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(MoveSpeed);
      }
      if (MagicScale != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(MagicScale);
      }
      if (MPRegain != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(MPRegain);
      }
      if (PhysicalAmaor != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(PhysicalAmaor);
      }
      if (PhysicalResist != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(PhysicalResist);
      }
      if (MagicAmaor != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(MagicAmaor);
      }
      if (StatusAmaor != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(StatusAmaor);
      }
      if (Dodge != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(Dodge);
      }
      if (HPRegain != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(HPRegain);
      }
      if (AttributePrimary != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(AttributePrimary);
      }
      if (DropItems.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(DropItems);
      }
      if (RemainExperience != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(RemainExperience);
      }
      equips_.WriteTo(output, _repeated_equips_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (AttributeStrength != 0F) {
        size += 1 + 4;
      }
      if (AttributeAgility != 0F) {
        size += 1 + 4;
      }
      if (AttributeIntelligence != 0F) {
        size += 1 + 4;
      }
      if (Attack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
      }
      if (AttackSpeed != 0F) {
        size += 1 + 4;
      }
      if (AttackRange != 0F) {
        size += 1 + 4;
      }
      if (MoveSpeed != 0F) {
        size += 1 + 4;
      }
      if (MagicScale != 0F) {
        size += 1 + 4;
      }
      if (MPRegain != 0F) {
        size += 1 + 4;
      }
      if (PhysicalAmaor != 0F) {
        size += 1 + 4;
      }
      if (PhysicalResist != 0F) {
        size += 1 + 4;
      }
      if (MagicAmaor != 0F) {
        size += 1 + 4;
      }
      if (StatusAmaor != 0F) {
        size += 1 + 4;
      }
      if (Dodge != 0F) {
        size += 2 + 4;
      }
      if (HPRegain != 0F) {
        size += 2 + 4;
      }
      if (AttributePrimary != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttributePrimary);
      }
      if (DropItems.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DropItems);
      }
      if (RemainExperience != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RemainExperience);
      }
      size += equips_.CalculateSize(_repeated_equips_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnitBoardDatas other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.AttributeStrength != 0F) {
        AttributeStrength = other.AttributeStrength;
      }
      if (other.AttributeAgility != 0F) {
        AttributeAgility = other.AttributeAgility;
      }
      if (other.AttributeIntelligence != 0F) {
        AttributeIntelligence = other.AttributeIntelligence;
      }
      if (other.Attack != 0) {
        Attack = other.Attack;
      }
      if (other.AttackSpeed != 0F) {
        AttackSpeed = other.AttackSpeed;
      }
      if (other.AttackRange != 0F) {
        AttackRange = other.AttackRange;
      }
      if (other.MoveSpeed != 0F) {
        MoveSpeed = other.MoveSpeed;
      }
      if (other.MagicScale != 0F) {
        MagicScale = other.MagicScale;
      }
      if (other.MPRegain != 0F) {
        MPRegain = other.MPRegain;
      }
      if (other.PhysicalAmaor != 0F) {
        PhysicalAmaor = other.PhysicalAmaor;
      }
      if (other.PhysicalResist != 0F) {
        PhysicalResist = other.PhysicalResist;
      }
      if (other.MagicAmaor != 0F) {
        MagicAmaor = other.MagicAmaor;
      }
      if (other.StatusAmaor != 0F) {
        StatusAmaor = other.StatusAmaor;
      }
      if (other.Dodge != 0F) {
        Dodge = other.Dodge;
      }
      if (other.HPRegain != 0F) {
        HPRegain = other.HPRegain;
      }
      if (other.AttributePrimary != 0) {
        AttributePrimary = other.AttributePrimary;
      }
      if (other.DropItems.Length != 0) {
        DropItems = other.DropItems;
      }
      if (other.RemainExperience != 0) {
        RemainExperience = other.RemainExperience;
      }
      equips_.Add(other.equips_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 29: {
            AttributeStrength = input.ReadFloat();
            break;
          }
          case 37: {
            AttributeAgility = input.ReadFloat();
            break;
          }
          case 45: {
            AttributeIntelligence = input.ReadFloat();
            break;
          }
          case 48: {
            Attack = input.ReadInt32();
            break;
          }
          case 61: {
            AttackSpeed = input.ReadFloat();
            break;
          }
          case 69: {
            AttackRange = input.ReadFloat();
            break;
          }
          case 77: {
            MoveSpeed = input.ReadFloat();
            break;
          }
          case 85: {
            MagicScale = input.ReadFloat();
            break;
          }
          case 93: {
            MPRegain = input.ReadFloat();
            break;
          }
          case 101: {
            PhysicalAmaor = input.ReadFloat();
            break;
          }
          case 109: {
            PhysicalResist = input.ReadFloat();
            break;
          }
          case 117: {
            MagicAmaor = input.ReadFloat();
            break;
          }
          case 125: {
            StatusAmaor = input.ReadFloat();
            break;
          }
          case 133: {
            Dodge = input.ReadFloat();
            break;
          }
          case 141: {
            HPRegain = input.ReadFloat();
            break;
          }
          case 144: {
            AttributePrimary = input.ReadInt32();
            break;
          }
          case 154: {
            DropItems = input.ReadString();
            break;
          }
          case 160: {
            RemainExperience = input.ReadInt32();
            break;
          }
          case 170: {
            equips_.AddEntriesFrom(input, _repeated_equips_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取单位面板详细信息 
  /// </summary>
  public sealed partial class CS_GetUnitInfo : pb::IMessage<CS_GetUnitInfo> {
    private static readonly pb::MessageParser<CS_GetUnitInfo> _parser = new pb::MessageParser<CS_GetUnitInfo>(() => new CS_GetUnitInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GetUnitInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetUnitInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetUnitInfo(CS_GetUnitInfo other) : this() {
      unitID_ = other.unitID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetUnitInfo Clone() {
      return new CS_GetUnitInfo(this);
    }

    /// <summary>Field number for the "UnitID" field.</summary>
    public const int UnitIDFieldNumber = 1;
    private int unitID_;
    /// <summary>
    ///单位对象id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnitID {
      get { return unitID_; }
      set {
        unitID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GetUnitInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GetUnitInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitID != other.UnitID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnitID != 0) hash ^= UnitID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnitID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GetUnitInfo other) {
      if (other == null) {
        return;
      }
      if (other.UnitID != 0) {
        UnitID = other.UnitID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnitID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取自己背包详细信息 
  /// </summary>
  public sealed partial class CS_GetBagInfo : pb::IMessage<CS_GetBagInfo> {
    private static readonly pb::MessageParser<CS_GetBagInfo> _parser = new pb::MessageParser<CS_GetBagInfo>(() => new CS_GetBagInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GetBagInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetBagInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetBagInfo(CS_GetBagInfo other) : this() {
      unitID_ = other.unitID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetBagInfo Clone() {
      return new CS_GetBagInfo(this);
    }

    /// <summary>Field number for the "UnitID" field.</summary>
    public const int UnitIDFieldNumber = 1;
    private int unitID_;
    /// <summary>
    ///单位对象id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnitID {
      get { return unitID_; }
      set {
        unitID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GetBagInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GetBagInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitID != other.UnitID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnitID != 0) hash ^= UnitID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnitID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GetBagInfo other) {
      if (other == null) {
        return;
      }
      if (other.UnitID != 0) {
        UnitID = other.UnitID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnitID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///交换道具位置 背包位置
  /// </summary>
  public sealed partial class CS_ChangeItemPos : pb::IMessage<CS_ChangeItemPos> {
    private static readonly pb::MessageParser<CS_ChangeItemPos> _parser = new pb::MessageParser<CS_ChangeItemPos>(() => new CS_ChangeItemPos());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_ChangeItemPos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ChangeItemPos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ChangeItemPos(CS_ChangeItemPos other) : this() {
      srcPos_ = other.srcPos_;
      destPos_ = other.destPos_;
      srcType_ = other.srcType_;
      destType_ = other.destType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ChangeItemPos Clone() {
      return new CS_ChangeItemPos(this);
    }

    /// <summary>Field number for the "SrcPos" field.</summary>
    public const int SrcPosFieldNumber = 1;
    private int srcPos_;
    /// <summary>
    ///源位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SrcPos {
      get { return srcPos_; }
      set {
        srcPos_ = value;
      }
    }

    /// <summary>Field number for the "DestPos" field.</summary>
    public const int DestPosFieldNumber = 2;
    private int destPos_;
    /// <summary>
    ///目标位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestPos {
      get { return destPos_; }
      set {
        destPos_ = value;
      }
    }

    /// <summary>Field number for the "SrcType" field.</summary>
    public const int SrcTypeFieldNumber = 3;
    private int srcType_;
    /// <summary>
    ///源类型 1表示装备栏 2表示背包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SrcType {
      get { return srcType_; }
      set {
        srcType_ = value;
      }
    }

    /// <summary>Field number for the "DestType" field.</summary>
    public const int DestTypeFieldNumber = 4;
    private int destType_;
    /// <summary>
    ///目标类型 1表示装备栏 2表示背包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestType {
      get { return destType_; }
      set {
        destType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_ChangeItemPos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_ChangeItemPos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SrcPos != other.SrcPos) return false;
      if (DestPos != other.DestPos) return false;
      if (SrcType != other.SrcType) return false;
      if (DestType != other.DestType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SrcPos != 0) hash ^= SrcPos.GetHashCode();
      if (DestPos != 0) hash ^= DestPos.GetHashCode();
      if (SrcType != 0) hash ^= SrcType.GetHashCode();
      if (DestType != 0) hash ^= DestType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SrcPos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SrcPos);
      }
      if (DestPos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DestPos);
      }
      if (SrcType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SrcType);
      }
      if (DestType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DestType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SrcPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrcPos);
      }
      if (DestPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestPos);
      }
      if (SrcType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrcType);
      }
      if (DestType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_ChangeItemPos other) {
      if (other == null) {
        return;
      }
      if (other.SrcPos != 0) {
        SrcPos = other.SrcPos;
      }
      if (other.DestPos != 0) {
        DestPos = other.DestPos;
      }
      if (other.SrcType != 0) {
        SrcType = other.SrcType;
      }
      if (other.DestType != 0) {
        DestType = other.DestType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SrcPos = input.ReadInt32();
            break;
          }
          case 16: {
            DestPos = input.ReadInt32();
            break;
          }
          case 24: {
            SrcType = input.ReadInt32();
            break;
          }
          case 32: {
            DestType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///删除道具
  /// </summary>
  public sealed partial class CS_DestroyItem : pb::IMessage<CS_DestroyItem> {
    private static readonly pb::MessageParser<CS_DestroyItem> _parser = new pb::MessageParser<CS_DestroyItem>(() => new CS_DestroyItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_DestroyItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_DestroyItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_DestroyItem(CS_DestroyItem other) : this() {
      srcPos_ = other.srcPos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_DestroyItem Clone() {
      return new CS_DestroyItem(this);
    }

    /// <summary>Field number for the "SrcPos" field.</summary>
    public const int SrcPosFieldNumber = 1;
    private int srcPos_;
    /// <summary>
    ///源位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SrcPos {
      get { return srcPos_; }
      set {
        srcPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_DestroyItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_DestroyItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SrcPos != other.SrcPos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SrcPos != 0) hash ^= SrcPos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SrcPos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SrcPos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SrcPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrcPos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_DestroyItem other) {
      if (other == null) {
        return;
      }
      if (other.SrcPos != 0) {
        SrcPos = other.SrcPos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SrcPos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_UnitInfo : pb::IMessage<SC_UnitInfo> {
    private static readonly pb::MessageParser<SC_UnitInfo> _parser = new pb::MessageParser<SC_UnitInfo>(() => new SC_UnitInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_UnitInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_UnitInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_UnitInfo(SC_UnitInfo other) : this() {
      unitData_ = other.unitData_ != null ? other.unitData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_UnitInfo Clone() {
      return new SC_UnitInfo(this);
    }

    /// <summary>Field number for the "UnitData" field.</summary>
    public const int UnitDataFieldNumber = 1;
    private global::Protomsg.UnitBoardDatas unitData_;
    /// <summary>
    ///单位面板信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protomsg.UnitBoardDatas UnitData {
      get { return unitData_; }
      set {
        unitData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_UnitInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_UnitInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UnitData, other.UnitData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (unitData_ != null) hash ^= UnitData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (unitData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UnitData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (unitData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_UnitInfo other) {
      if (other == null) {
        return;
      }
      if (other.unitData_ != null) {
        if (unitData_ == null) {
          unitData_ = new global::Protomsg.UnitBoardDatas();
        }
        UnitData.MergeFrom(other.UnitData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (unitData_ == null) {
              unitData_ = new global::Protomsg.UnitBoardDatas();
            }
            input.ReadMessage(unitData_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_BagInfo : pb::IMessage<SC_BagInfo> {
    private static readonly pb::MessageParser<SC_BagInfo> _parser = new pb::MessageParser<SC_BagInfo>(() => new SC_BagInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_BagInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_BagInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_BagInfo(SC_BagInfo other) : this() {
      equips_ = other.equips_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_BagInfo Clone() {
      return new SC_BagInfo(this);
    }

    /// <summary>Field number for the "Equips" field.</summary>
    public const int EquipsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protomsg.UnitEquip> _repeated_equips_codec
        = pb::FieldCodec.ForMessage(10, global::Protomsg.UnitEquip.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.UnitEquip> equips_ = new pbc::RepeatedField<global::Protomsg.UnitEquip>();
    /// <summary>
    ///装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.UnitEquip> Equips {
      get { return equips_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_BagInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_BagInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!equips_.Equals(other.equips_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= equips_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      equips_.WriteTo(output, _repeated_equips_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += equips_.CalculateSize(_repeated_equips_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_BagInfo other) {
      if (other == null) {
        return;
      }
      equips_.Add(other.equips_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            equips_.AddEntriesFrom(input, _repeated_equips_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家升级技能
  /// </summary>
  public sealed partial class CS_PlayerUpgradeSkill : pb::IMessage<CS_PlayerUpgradeSkill> {
    private static readonly pb::MessageParser<CS_PlayerUpgradeSkill> _parser = new pb::MessageParser<CS_PlayerUpgradeSkill>(() => new CS_PlayerUpgradeSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_PlayerUpgradeSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerUpgradeSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerUpgradeSkill(CS_PlayerUpgradeSkill other) : this() {
      typeID_ = other.typeID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerUpgradeSkill Clone() {
      return new CS_PlayerUpgradeSkill(this);
    }

    /// <summary>Field number for the "TypeID" field.</summary>
    public const int TypeIDFieldNumber = 1;
    private int typeID_;
    /// <summary>
    ///技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_PlayerUpgradeSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_PlayerUpgradeSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeID != other.TypeID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TypeID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_PlayerUpgradeSkill other) {
      if (other == null) {
        return;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TypeID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家移动操作
  /// </summary>
  public sealed partial class CS_PlayerMove : pb::IMessage<CS_PlayerMove> {
    private static readonly pb::MessageParser<CS_PlayerMove> _parser = new pb::MessageParser<CS_PlayerMove>(() => new CS_PlayerMove());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_PlayerMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerMove(CS_PlayerMove other) : this() {
      iDs_ = other.iDs_.Clone();
      x_ = other.x_;
      y_ = other.y_;
      isStart_ = other.isStart_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerMove Clone() {
      return new CS_PlayerMove(this);
    }

    /// <summary>Field number for the "IDs" field.</summary>
    public const int IDsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_iDs_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> iDs_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///操作的单位对象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IDs {
      get { return iDs_; }
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    /// <summary>
    ///移动的x方向 技能的目标点x或目标方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    /// <summary>
    ///移动的Y方向 技能的目标点Y或目标方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "IsStart" field.</summary>
    public const int IsStartFieldNumber = 4;
    private bool isStart_;
    /// <summary>
    ///true 表示开始移动  false表示结束移动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStart {
      get { return isStart_; }
      set {
        isStart_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_PlayerMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_PlayerMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!iDs_.Equals(other.iDs_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (IsStart != other.IsStart) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= iDs_.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (IsStart != false) hash ^= IsStart.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      iDs_.WriteTo(output, _repeated_iDs_codec);
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (IsStart != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsStart);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += iDs_.CalculateSize(_repeated_iDs_codec);
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (IsStart != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_PlayerMove other) {
      if (other == null) {
        return;
      }
      iDs_.Add(other.iDs_);
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.IsStart != false) {
        IsStart = other.IsStart;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            iDs_.AddEntriesFrom(input, _repeated_iDs_codec);
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 32: {
            IsStart = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家攻击操作
  /// </summary>
  public sealed partial class CS_PlayerAttack : pb::IMessage<CS_PlayerAttack> {
    private static readonly pb::MessageParser<CS_PlayerAttack> _parser = new pb::MessageParser<CS_PlayerAttack>(() => new CS_PlayerAttack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_PlayerAttack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerAttack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerAttack(CS_PlayerAttack other) : this() {
      iDs_ = other.iDs_.Clone();
      targetUnitID_ = other.targetUnitID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerAttack Clone() {
      return new CS_PlayerAttack(this);
    }

    /// <summary>Field number for the "IDs" field.</summary>
    public const int IDsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_iDs_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> iDs_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///操作的单位对象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IDs {
      get { return iDs_; }
    }

    /// <summary>Field number for the "TargetUnitID" field.</summary>
    public const int TargetUnitIDFieldNumber = 2;
    private int targetUnitID_;
    /// <summary>
    ///攻击对象id 或者技能对象ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetUnitID {
      get { return targetUnitID_; }
      set {
        targetUnitID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_PlayerAttack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_PlayerAttack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!iDs_.Equals(other.iDs_)) return false;
      if (TargetUnitID != other.TargetUnitID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= iDs_.GetHashCode();
      if (TargetUnitID != 0) hash ^= TargetUnitID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      iDs_.WriteTo(output, _repeated_iDs_codec);
      if (TargetUnitID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetUnitID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += iDs_.CalculateSize(_repeated_iDs_codec);
      if (TargetUnitID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetUnitID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_PlayerAttack other) {
      if (other == null) {
        return;
      }
      iDs_.Add(other.iDs_);
      if (other.TargetUnitID != 0) {
        TargetUnitID = other.TargetUnitID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            iDs_.AddEntriesFrom(input, _repeated_iDs_codec);
            break;
          }
          case 16: {
            TargetUnitID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家技能操作(包括道具)
  /// </summary>
  public sealed partial class CS_PlayerSkill : pb::IMessage<CS_PlayerSkill> {
    private static readonly pb::MessageParser<CS_PlayerSkill> _parser = new pb::MessageParser<CS_PlayerSkill>(() => new CS_PlayerSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_PlayerSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerSkill(CS_PlayerSkill other) : this() {
      iD_ = other.iD_;
      skillID_ = other.skillID_;
      x_ = other.x_;
      y_ = other.y_;
      targetUnitID_ = other.targetUnitID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerSkill Clone() {
      return new CS_PlayerSkill(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///操作的单位对象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "SkillID" field.</summary>
    public const int SkillIDFieldNumber = 2;
    private int skillID_;
    /// <summary>
    ///技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillID {
      get { return skillID_; }
      set {
        skillID_ = value;
      }
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 3;
    private float x_;
    /// <summary>
    ///移动的x方向 技能的目标点x或目标方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 4;
    private float y_;
    /// <summary>
    ///移动的Y方向 技能的目标点Y或目标方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "TargetUnitID" field.</summary>
    public const int TargetUnitIDFieldNumber = 5;
    private int targetUnitID_;
    /// <summary>
    ///攻击对象id 或者技能对象ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetUnitID {
      get { return targetUnitID_; }
      set {
        targetUnitID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_PlayerSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_PlayerSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (SkillID != other.SkillID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (TargetUnitID != other.TargetUnitID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (SkillID != 0) hash ^= SkillID.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (TargetUnitID != 0) hash ^= TargetUnitID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (SkillID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillID);
      }
      if (X != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Y);
      }
      if (TargetUnitID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TargetUnitID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (SkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillID);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (TargetUnitID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetUnitID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_PlayerSkill other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.SkillID != 0) {
        SkillID = other.SkillID;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.TargetUnitID != 0) {
        TargetUnitID = other.TargetUnitID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            SkillID = input.ReadInt32();
            break;
          }
          case 29: {
            X = input.ReadFloat();
            break;
          }
          case 37: {
            Y = input.ReadFloat();
            break;
          }
          case 40: {
            TargetUnitID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家切换攻击模式
  /// </summary>
  public sealed partial class CS_ChangeAttackMode : pb::IMessage<CS_ChangeAttackMode> {
    private static readonly pb::MessageParser<CS_ChangeAttackMode> _parser = new pb::MessageParser<CS_ChangeAttackMode>(() => new CS_ChangeAttackMode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_ChangeAttackMode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ChangeAttackMode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ChangeAttackMode(CS_ChangeAttackMode other) : this() {
      attackMode_ = other.attackMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ChangeAttackMode Clone() {
      return new CS_ChangeAttackMode(this);
    }

    /// <summary>Field number for the "AttackMode" field.</summary>
    public const int AttackModeFieldNumber = 1;
    private int attackMode_;
    /// <summary>
    ///切换后的攻击模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackMode {
      get { return attackMode_; }
      set {
        attackMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_ChangeAttackMode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_ChangeAttackMode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttackMode != other.AttackMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttackMode != 0) hash ^= AttackMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttackMode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AttackMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttackMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_ChangeAttackMode other) {
      if (other == null) {
        return;
      }
      if (other.AttackMode != 0) {
        AttackMode = other.AttackMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AttackMode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///组队操作
  /// </summary>
  public sealed partial class CS_OrganizeTeam : pb::IMessage<CS_OrganizeTeam> {
    private static readonly pb::MessageParser<CS_OrganizeTeam> _parser = new pb::MessageParser<CS_OrganizeTeam>(() => new CS_OrganizeTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_OrganizeTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_OrganizeTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_OrganizeTeam(CS_OrganizeTeam other) : this() {
      player1_ = other.player1_;
      player2_ = other.player2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_OrganizeTeam Clone() {
      return new CS_OrganizeTeam(this);
    }

    /// <summary>Field number for the "Player1" field.</summary>
    public const int Player1FieldNumber = 1;
    private int player1_;
    /// <summary>
    ///玩家1的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player1 {
      get { return player1_; }
      set {
        player1_ = value;
      }
    }

    /// <summary>Field number for the "Player2" field.</summary>
    public const int Player2FieldNumber = 2;
    private int player2_;
    /// <summary>
    ///玩家2的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player2 {
      get { return player2_; }
      set {
        player2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_OrganizeTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_OrganizeTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player1 != other.Player1) return false;
      if (Player2 != other.Player2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player1 != 0) hash ^= Player1.GetHashCode();
      if (Player2 != 0) hash ^= Player2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Player1);
      }
      if (Player2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Player2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player1);
      }
      if (Player2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_OrganizeTeam other) {
      if (other == null) {
        return;
      }
      if (other.Player1 != 0) {
        Player1 = other.Player1;
      }
      if (other.Player2 != 0) {
        Player2 = other.Player2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player1 = input.ReadInt32();
            break;
          }
          case 16: {
            Player2 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///组队请求
  /// </summary>
  public sealed partial class SC_RequestTeam : pb::IMessage<SC_RequestTeam> {
    private static readonly pb::MessageParser<SC_RequestTeam> _parser = new pb::MessageParser<SC_RequestTeam>(() => new SC_RequestTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_RequestTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_RequestTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_RequestTeam(SC_RequestTeam other) : this() {
      srcPlayerUID_ = other.srcPlayerUID_;
      srcName_ = other.srcName_;
      srcUnitTypeID_ = other.srcUnitTypeID_;
      srcLevel_ = other.srcLevel_;
      requestType_ = other.requestType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_RequestTeam Clone() {
      return new SC_RequestTeam(this);
    }

    /// <summary>Field number for the "SrcPlayerUID" field.</summary>
    public const int SrcPlayerUIDFieldNumber = 1;
    private int srcPlayerUID_;
    /// <summary>
    ///来源uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SrcPlayerUID {
      get { return srcPlayerUID_; }
      set {
        srcPlayerUID_ = value;
      }
    }

    /// <summary>Field number for the "SrcName" field.</summary>
    public const int SrcNameFieldNumber = 2;
    private string srcName_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SrcName {
      get { return srcName_; }
      set {
        srcName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SrcUnitTypeID" field.</summary>
    public const int SrcUnitTypeIDFieldNumber = 3;
    private int srcUnitTypeID_;
    /// <summary>
    ///单位类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SrcUnitTypeID {
      get { return srcUnitTypeID_; }
      set {
        srcUnitTypeID_ = value;
      }
    }

    /// <summary>Field number for the "SrcLevel" field.</summary>
    public const int SrcLevelFieldNumber = 4;
    private int srcLevel_;
    /// <summary>
    ///单位等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SrcLevel {
      get { return srcLevel_; }
      set {
        srcLevel_ = value;
      }
    }

    /// <summary>Field number for the "RequestType" field.</summary>
    public const int RequestTypeFieldNumber = 5;
    private int requestType_;
    /// <summary>
    /// 组队类型 1:请求加入战队 2:邀请目标加入战队
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestType {
      get { return requestType_; }
      set {
        requestType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_RequestTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_RequestTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SrcPlayerUID != other.SrcPlayerUID) return false;
      if (SrcName != other.SrcName) return false;
      if (SrcUnitTypeID != other.SrcUnitTypeID) return false;
      if (SrcLevel != other.SrcLevel) return false;
      if (RequestType != other.RequestType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SrcPlayerUID != 0) hash ^= SrcPlayerUID.GetHashCode();
      if (SrcName.Length != 0) hash ^= SrcName.GetHashCode();
      if (SrcUnitTypeID != 0) hash ^= SrcUnitTypeID.GetHashCode();
      if (SrcLevel != 0) hash ^= SrcLevel.GetHashCode();
      if (RequestType != 0) hash ^= RequestType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SrcPlayerUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SrcPlayerUID);
      }
      if (SrcName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SrcName);
      }
      if (SrcUnitTypeID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SrcUnitTypeID);
      }
      if (SrcLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SrcLevel);
      }
      if (RequestType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RequestType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SrcPlayerUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrcPlayerUID);
      }
      if (SrcName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SrcName);
      }
      if (SrcUnitTypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrcUnitTypeID);
      }
      if (SrcLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrcLevel);
      }
      if (RequestType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_RequestTeam other) {
      if (other == null) {
        return;
      }
      if (other.SrcPlayerUID != 0) {
        SrcPlayerUID = other.SrcPlayerUID;
      }
      if (other.SrcName.Length != 0) {
        SrcName = other.SrcName;
      }
      if (other.SrcUnitTypeID != 0) {
        SrcUnitTypeID = other.SrcUnitTypeID;
      }
      if (other.SrcLevel != 0) {
        SrcLevel = other.SrcLevel;
      }
      if (other.RequestType != 0) {
        RequestType = other.RequestType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SrcPlayerUID = input.ReadInt32();
            break;
          }
          case 18: {
            SrcName = input.ReadString();
            break;
          }
          case 24: {
            SrcUnitTypeID = input.ReadInt32();
            break;
          }
          case 32: {
            SrcLevel = input.ReadInt32();
            break;
          }
          case 40: {
            RequestType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///回复组队请求
  /// </summary>
  public sealed partial class CS_ResponseOrgTeam : pb::IMessage<CS_ResponseOrgTeam> {
    private static readonly pb::MessageParser<CS_ResponseOrgTeam> _parser = new pb::MessageParser<CS_ResponseOrgTeam>(() => new CS_ResponseOrgTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_ResponseOrgTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ResponseOrgTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ResponseOrgTeam(CS_ResponseOrgTeam other) : this() {
      srcPlayerUID_ = other.srcPlayerUID_;
      isAgree_ = other.isAgree_;
      requestType_ = other.requestType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ResponseOrgTeam Clone() {
      return new CS_ResponseOrgTeam(this);
    }

    /// <summary>Field number for the "SrcPlayerUID" field.</summary>
    public const int SrcPlayerUIDFieldNumber = 1;
    private int srcPlayerUID_;
    /// <summary>
    ///来源uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SrcPlayerUID {
      get { return srcPlayerUID_; }
      set {
        srcPlayerUID_ = value;
      }
    }

    /// <summary>Field number for the "IsAgree" field.</summary>
    public const int IsAgreeFieldNumber = 2;
    private int isAgree_;
    /// <summary>
    ///是否同意  1同意 2不同意
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsAgree {
      get { return isAgree_; }
      set {
        isAgree_ = value;
      }
    }

    /// <summary>Field number for the "RequestType" field.</summary>
    public const int RequestTypeFieldNumber = 3;
    private int requestType_;
    /// <summary>
    /// 组队类型 1:请求加入战队 2:邀请目标加入战队
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestType {
      get { return requestType_; }
      set {
        requestType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_ResponseOrgTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_ResponseOrgTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SrcPlayerUID != other.SrcPlayerUID) return false;
      if (IsAgree != other.IsAgree) return false;
      if (RequestType != other.RequestType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SrcPlayerUID != 0) hash ^= SrcPlayerUID.GetHashCode();
      if (IsAgree != 0) hash ^= IsAgree.GetHashCode();
      if (RequestType != 0) hash ^= RequestType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SrcPlayerUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SrcPlayerUID);
      }
      if (IsAgree != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IsAgree);
      }
      if (RequestType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RequestType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SrcPlayerUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrcPlayerUID);
      }
      if (IsAgree != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsAgree);
      }
      if (RequestType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_ResponseOrgTeam other) {
      if (other == null) {
        return;
      }
      if (other.SrcPlayerUID != 0) {
        SrcPlayerUID = other.SrcPlayerUID;
      }
      if (other.IsAgree != 0) {
        IsAgree = other.IsAgree;
      }
      if (other.RequestType != 0) {
        RequestType = other.RequestType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SrcPlayerUID = input.ReadInt32();
            break;
          }
          case 16: {
            IsAgree = input.ReadInt32();
            break;
          }
          case 24: {
            RequestType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///队伍踢人
  /// </summary>
  public sealed partial class CS_OutTeam : pb::IMessage<CS_OutTeam> {
    private static readonly pb::MessageParser<CS_OutTeam> _parser = new pb::MessageParser<CS_OutTeam>(() => new CS_OutTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_OutTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_OutTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_OutTeam(CS_OutTeam other) : this() {
      outPlayerUID_ = other.outPlayerUID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_OutTeam Clone() {
      return new CS_OutTeam(this);
    }

    /// <summary>Field number for the "OutPlayerUID" field.</summary>
    public const int OutPlayerUIDFieldNumber = 1;
    private int outPlayerUID_;
    /// <summary>
    ///被踢者的UID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutPlayerUID {
      get { return outPlayerUID_; }
      set {
        outPlayerUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_OutTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_OutTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutPlayerUID != other.OutPlayerUID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OutPlayerUID != 0) hash ^= OutPlayerUID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OutPlayerUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OutPlayerUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OutPlayerUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutPlayerUID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_OutTeam other) {
      if (other == null) {
        return;
      }
      if (other.OutPlayerUID != 0) {
        OutPlayerUID = other.OutPlayerUID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OutPlayerUID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///队伍玩家信息
  /// </summary>
  public sealed partial class TeamPlayerInfo : pb::IMessage<TeamPlayerInfo> {
    private static readonly pb::MessageParser<TeamPlayerInfo> _parser = new pb::MessageParser<TeamPlayerInfo>(() => new TeamPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayerInfo(TeamPlayerInfo other) : this() {
      uID_ = other.uID_;
      name_ = other.name_;
      hP_ = other.hP_;
      mP_ = other.mP_;
      maxHP_ = other.maxHP_;
      maxMP_ = other.maxMP_;
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamPlayerInfo Clone() {
      return new TeamPlayerInfo(this);
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 1;
    private int uID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UID {
      get { return uID_; }
      set {
        uID_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HP" field.</summary>
    public const int HPFieldNumber = 3;
    private int hP_;
    /// <summary>
    ///血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HP {
      get { return hP_; }
      set {
        hP_ = value;
      }
    }

    /// <summary>Field number for the "MP" field.</summary>
    public const int MPFieldNumber = 4;
    private int mP_;
    /// <summary>
    ///魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MP {
      get { return mP_; }
      set {
        mP_ = value;
      }
    }

    /// <summary>Field number for the "MaxHP" field.</summary>
    public const int MaxHPFieldNumber = 5;
    private int maxHP_;
    /// <summary>
    ///最大血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHP {
      get { return maxHP_; }
      set {
        maxHP_ = value;
      }
    }

    /// <summary>Field number for the "MaxMP" field.</summary>
    public const int MaxMPFieldNumber = 6;
    private int maxMP_;
    /// <summary>
    ///最大魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxMP {
      get { return maxMP_; }
      set {
        maxMP_ = value;
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 7;
    private int iD_;
    /// <summary>
    ///单位ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UID != other.UID) return false;
      if (Name != other.Name) return false;
      if (HP != other.HP) return false;
      if (MP != other.MP) return false;
      if (MaxHP != other.MaxHP) return false;
      if (MaxMP != other.MaxMP) return false;
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UID != 0) hash ^= UID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (HP != 0) hash ^= HP.GetHashCode();
      if (MP != 0) hash ^= MP.GetHashCode();
      if (MaxHP != 0) hash ^= MaxHP.GetHashCode();
      if (MaxMP != 0) hash ^= MaxMP.GetHashCode();
      if (ID != 0) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HP != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HP);
      }
      if (MP != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MP);
      }
      if (MaxHP != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxHP);
      }
      if (MaxMP != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxMP);
      }
      if (ID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HP);
      }
      if (MP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MP);
      }
      if (MaxHP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHP);
      }
      if (MaxMP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMP);
      }
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.UID != 0) {
        UID = other.UID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.HP != 0) {
        HP = other.HP;
      }
      if (other.MP != 0) {
        MP = other.MP;
      }
      if (other.MaxHP != 0) {
        MaxHP = other.MaxHP;
      }
      if (other.MaxMP != 0) {
        MaxMP = other.MaxMP;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UID = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            HP = input.ReadInt32();
            break;
          }
          case 32: {
            MP = input.ReadInt32();
            break;
          }
          case 40: {
            MaxHP = input.ReadInt32();
            break;
          }
          case 48: {
            MaxMP = input.ReadInt32();
            break;
          }
          case 56: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更新队伍信息
  /// </summary>
  public sealed partial class SC_UpdateTeamInfo : pb::IMessage<SC_UpdateTeamInfo> {
    private static readonly pb::MessageParser<SC_UpdateTeamInfo> _parser = new pb::MessageParser<SC_UpdateTeamInfo>(() => new SC_UpdateTeamInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_UpdateTeamInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_UpdateTeamInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_UpdateTeamInfo(SC_UpdateTeamInfo other) : this() {
      teamID_ = other.teamID_;
      mainUID_ = other.mainUID_;
      tPInfo_ = other.tPInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_UpdateTeamInfo Clone() {
      return new SC_UpdateTeamInfo(this);
    }

    /// <summary>Field number for the "TeamID" field.</summary>
    public const int TeamIDFieldNumber = 1;
    private int teamID_;
    /// <summary>
    ///队伍ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "MainUID" field.</summary>
    public const int MainUIDFieldNumber = 2;
    private int mainUID_;
    /// <summary>
    ///队长的UID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MainUID {
      get { return mainUID_; }
      set {
        mainUID_ = value;
      }
    }

    /// <summary>Field number for the "TPInfo" field.</summary>
    public const int TPInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protomsg.TeamPlayerInfo> _repeated_tPInfo_codec
        = pb::FieldCodec.ForMessage(26, global::Protomsg.TeamPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.TeamPlayerInfo> tPInfo_ = new pbc::RepeatedField<global::Protomsg.TeamPlayerInfo>();
    /// <summary>
    ///成员信息(包括队长在内)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.TeamPlayerInfo> TPInfo {
      get { return tPInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_UpdateTeamInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_UpdateTeamInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamID != other.TeamID) return false;
      if (MainUID != other.MainUID) return false;
      if(!tPInfo_.Equals(other.tPInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamID != 0) hash ^= TeamID.GetHashCode();
      if (MainUID != 0) hash ^= MainUID.GetHashCode();
      hash ^= tPInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TeamID);
      }
      if (MainUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MainUID);
      }
      tPInfo_.WriteTo(output, _repeated_tPInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamID);
      }
      if (MainUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainUID);
      }
      size += tPInfo_.CalculateSize(_repeated_tPInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_UpdateTeamInfo other) {
      if (other == null) {
        return;
      }
      if (other.TeamID != 0) {
        TeamID = other.TeamID;
      }
      if (other.MainUID != 0) {
        MainUID = other.MainUID;
      }
      tPInfo_.Add(other.tPInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TeamID = input.ReadInt32();
            break;
          }
          case 16: {
            MainUID = input.ReadInt32();
            break;
          }
          case 26: {
            tPInfo_.AddEntriesFrom(input, _repeated_tPInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///提示文字
  /// </summary>
  public sealed partial class SC_NoticeWords : pb::IMessage<SC_NoticeWords> {
    private static readonly pb::MessageParser<SC_NoticeWords> _parser = new pb::MessageParser<SC_NoticeWords>(() => new SC_NoticeWords());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_NoticeWords> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NoticeWords() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NoticeWords(SC_NoticeWords other) : this() {
      typeID_ = other.typeID_;
      p_ = other.p_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NoticeWords Clone() {
      return new SC_NoticeWords(this);
    }

    /// <summary>Field number for the "TypeID" field.</summary>
    public const int TypeIDFieldNumber = 1;
    private int typeID_;
    /// <summary>
    ///id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "P" field.</summary>
    public const int PFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_p_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> p_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> P {
      get { return p_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_NoticeWords);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_NoticeWords other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeID != other.TypeID) return false;
      if(!p_.Equals(other.p_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      hash ^= p_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TypeID);
      }
      p_.WriteTo(output, _repeated_p_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      size += p_.CalculateSize(_repeated_p_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_NoticeWords other) {
      if (other == null) {
        return;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      p_.Add(other.p_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TypeID = input.ReadInt32();
            break;
          }
          case 18: {
            p_.AddEntriesFrom(input, _repeated_p_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///技能数据
  /// </summary>
  public sealed partial class SkillDatas : pb::IMessage<SkillDatas> {
    private static readonly pb::MessageParser<SkillDatas> _parser = new pb::MessageParser<SkillDatas>(() => new SkillDatas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillDatas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillDatas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillDatas(SkillDatas other) : this() {
      typeID_ = other.typeID_;
      level_ = other.level_;
      remainCDTime_ = other.remainCDTime_;
      canUpgrade_ = other.canUpgrade_;
      index_ = other.index_;
      castType_ = other.castType_;
      castTargetType_ = other.castTargetType_;
      unitTargetTeam_ = other.unitTargetTeam_;
      unitTargetCamp_ = other.unitTargetCamp_;
      noCareMagicImmune_ = other.noCareMagicImmune_;
      castRange_ = other.castRange_;
      cooldown_ = other.cooldown_;
      hurtRange_ = other.hurtRange_;
      manaCost_ = other.manaCost_;
      attackAutoActive_ = other.attackAutoActive_;
      visible_ = other.visible_;
      remainSkillCount_ = other.remainSkillCount_;
      maxLevel_ = other.maxLevel_;
      requiredLevel_ = other.requiredLevel_;
      levelsBetweenUpgrades_ = other.levelsBetweenUpgrades_;
      initLevel_ = other.initLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillDatas Clone() {
      return new SkillDatas(this);
    }

    /// <summary>Field number for the "TypeID" field.</summary>
    public const int TypeIDFieldNumber = 1;
    private int typeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "RemainCDTime" field.</summary>
    public const int RemainCDTimeFieldNumber = 3;
    private float remainCDTime_;
    /// <summary>
    ///技能CD剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RemainCDTime {
      get { return remainCDTime_; }
      set {
        remainCDTime_ = value;
      }
    }

    /// <summary>Field number for the "CanUpgrade" field.</summary>
    public const int CanUpgradeFieldNumber = 4;
    private int canUpgrade_;
    /// <summary>
    ///是否可以升级 1 表示可以  2 表示不可以
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanUpgrade {
      get { return canUpgrade_; }
      set {
        canUpgrade_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 5;
    private int index_;
    /// <summary>
    ///位置索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "CastType" field.</summary>
    public const int CastTypeFieldNumber = 6;
    private int castType_;
    /// <summary>
    ///施法类型:  1:主动技能  2:被动技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CastType {
      get { return castType_; }
      set {
        castType_ = value;
      }
    }

    /// <summary>Field number for the "CastTargetType" field.</summary>
    public const int CastTargetTypeFieldNumber = 7;
    private int castTargetType_;
    /// <summary>
    ///施法目标类型 1:自身为目标 2:以单位为目标 3:以地面1点为目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CastTargetType {
      get { return castTargetType_; }
      set {
        castTargetType_ = value;
      }
    }

    /// <summary>Field number for the "UnitTargetTeam" field.</summary>
    public const int UnitTargetTeamFieldNumber = 8;
    private int unitTargetTeam_;
    /// <summary>
    ///目标单位关系 1:友方  2:敌方 3:友方敌方都行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnitTargetTeam {
      get { return unitTargetTeam_; }
      set {
        unitTargetTeam_ = value;
      }
    }

    /// <summary>Field number for the "UnitTargetCamp" field.</summary>
    public const int UnitTargetCampFieldNumber = 9;
    private int unitTargetCamp_;
    /// <summary>
    ///目标单位阵营 (1:玩家 2:NPC) 3:玩家NPC都行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnitTargetCamp {
      get { return unitTargetCamp_; }
      set {
        unitTargetCamp_ = value;
      }
    }

    /// <summary>Field number for the "NoCareMagicImmune" field.</summary>
    public const int NoCareMagicImmuneFieldNumber = 10;
    private int noCareMagicImmune_;
    /// <summary>
    ///无视技能免疫 (1:无视技能免疫 2:非)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NoCareMagicImmune {
      get { return noCareMagicImmune_; }
      set {
        noCareMagicImmune_ = value;
      }
    }

    /// <summary>Field number for the "CastRange" field.</summary>
    public const int CastRangeFieldNumber = 11;
    private float castRange_;
    /// <summary>
    ///施法距离
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CastRange {
      get { return castRange_; }
      set {
        castRange_ = value;
      }
    }

    /// <summary>Field number for the "Cooldown" field.</summary>
    public const int CooldownFieldNumber = 12;
    private float cooldown_;
    /// <summary>
    ///技能冷却时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Cooldown {
      get { return cooldown_; }
      set {
        cooldown_ = value;
      }
    }

    /// <summary>Field number for the "HurtRange" field.</summary>
    public const int HurtRangeFieldNumber = 13;
    private float hurtRange_;
    /// <summary>
    ///伤害范围 小于等于0表示单体
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HurtRange {
      get { return hurtRange_; }
      set {
        hurtRange_ = value;
      }
    }

    /// <summary>Field number for the "ManaCost" field.</summary>
    public const int ManaCostFieldNumber = 14;
    private int manaCost_;
    /// <summary>
    ///技能魔法消耗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ManaCost {
      get { return manaCost_; }
      set {
        manaCost_ = value;
      }
    }

    /// <summary>Field number for the "AttackAutoActive" field.</summary>
    public const int AttackAutoActiveFieldNumber = 15;
    private int attackAutoActive_;
    /// <summary>
    /////攻击时自动释放 是否激活 1:激活 2:否
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackAutoActive {
      get { return attackAutoActive_; }
      set {
        attackAutoActive_ = value;
      }
    }

    /// <summary>Field number for the "Visible" field.</summary>
    public const int VisibleFieldNumber = 16;
    private int visible_;
    /// <summary>
    /////技能是否显示 1:是 2:否
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Visible {
      get { return visible_; }
      set {
        visible_ = value;
      }
    }

    /// <summary>Field number for the "RemainSkillCount" field.</summary>
    public const int RemainSkillCountFieldNumber = 17;
    private int remainSkillCount_;
    /// <summary>
    ///技能剩余点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainSkillCount {
      get { return remainSkillCount_; }
      set {
        remainSkillCount_ = value;
      }
    }

    /// <summary>Field number for the "MaxLevel" field.</summary>
    public const int MaxLevelFieldNumber = 18;
    private int maxLevel_;
    /// <summary>
    ///技能最大等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxLevel {
      get { return maxLevel_; }
      set {
        maxLevel_ = value;
      }
    }

    /// <summary>Field number for the "RequiredLevel" field.</summary>
    public const int RequiredLevelFieldNumber = 19;
    private int requiredLevel_;
    /// <summary>
    ///需要多少级可以学习该技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequiredLevel {
      get { return requiredLevel_; }
      set {
        requiredLevel_ = value;
      }
    }

    /// <summary>Field number for the "LevelsBetweenUpgrades" field.</summary>
    public const int LevelsBetweenUpgradesFieldNumber = 20;
    private int levelsBetweenUpgrades_;
    /// <summary>
    ///学习该技能的等级步长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelsBetweenUpgrades {
      get { return levelsBetweenUpgrades_; }
      set {
        levelsBetweenUpgrades_ = value;
      }
    }

    /// <summary>Field number for the "InitLevel" field.</summary>
    public const int InitLevelFieldNumber = 21;
    private int initLevel_;
    /// <summary>
    ///技能初始等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitLevel {
      get { return initLevel_; }
      set {
        initLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillDatas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillDatas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeID != other.TypeID) return false;
      if (Level != other.Level) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RemainCDTime, other.RemainCDTime)) return false;
      if (CanUpgrade != other.CanUpgrade) return false;
      if (Index != other.Index) return false;
      if (CastType != other.CastType) return false;
      if (CastTargetType != other.CastTargetType) return false;
      if (UnitTargetTeam != other.UnitTargetTeam) return false;
      if (UnitTargetCamp != other.UnitTargetCamp) return false;
      if (NoCareMagicImmune != other.NoCareMagicImmune) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CastRange, other.CastRange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Cooldown, other.Cooldown)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HurtRange, other.HurtRange)) return false;
      if (ManaCost != other.ManaCost) return false;
      if (AttackAutoActive != other.AttackAutoActive) return false;
      if (Visible != other.Visible) return false;
      if (RemainSkillCount != other.RemainSkillCount) return false;
      if (MaxLevel != other.MaxLevel) return false;
      if (RequiredLevel != other.RequiredLevel) return false;
      if (LevelsBetweenUpgrades != other.LevelsBetweenUpgrades) return false;
      if (InitLevel != other.InitLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (RemainCDTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RemainCDTime);
      if (CanUpgrade != 0) hash ^= CanUpgrade.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (CastType != 0) hash ^= CastType.GetHashCode();
      if (CastTargetType != 0) hash ^= CastTargetType.GetHashCode();
      if (UnitTargetTeam != 0) hash ^= UnitTargetTeam.GetHashCode();
      if (UnitTargetCamp != 0) hash ^= UnitTargetCamp.GetHashCode();
      if (NoCareMagicImmune != 0) hash ^= NoCareMagicImmune.GetHashCode();
      if (CastRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CastRange);
      if (Cooldown != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Cooldown);
      if (HurtRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HurtRange);
      if (ManaCost != 0) hash ^= ManaCost.GetHashCode();
      if (AttackAutoActive != 0) hash ^= AttackAutoActive.GetHashCode();
      if (Visible != 0) hash ^= Visible.GetHashCode();
      if (RemainSkillCount != 0) hash ^= RemainSkillCount.GetHashCode();
      if (MaxLevel != 0) hash ^= MaxLevel.GetHashCode();
      if (RequiredLevel != 0) hash ^= RequiredLevel.GetHashCode();
      if (LevelsBetweenUpgrades != 0) hash ^= LevelsBetweenUpgrades.GetHashCode();
      if (InitLevel != 0) hash ^= InitLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TypeID);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (RemainCDTime != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(RemainCDTime);
      }
      if (CanUpgrade != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CanUpgrade);
      }
      if (Index != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Index);
      }
      if (CastType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CastType);
      }
      if (CastTargetType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CastTargetType);
      }
      if (UnitTargetTeam != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(UnitTargetTeam);
      }
      if (UnitTargetCamp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(UnitTargetCamp);
      }
      if (NoCareMagicImmune != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(NoCareMagicImmune);
      }
      if (CastRange != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(CastRange);
      }
      if (Cooldown != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(Cooldown);
      }
      if (HurtRange != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(HurtRange);
      }
      if (ManaCost != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ManaCost);
      }
      if (AttackAutoActive != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(AttackAutoActive);
      }
      if (Visible != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Visible);
      }
      if (RemainSkillCount != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(RemainSkillCount);
      }
      if (MaxLevel != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(MaxLevel);
      }
      if (RequiredLevel != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(RequiredLevel);
      }
      if (LevelsBetweenUpgrades != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(LevelsBetweenUpgrades);
      }
      if (InitLevel != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(InitLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (RemainCDTime != 0F) {
        size += 1 + 4;
      }
      if (CanUpgrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanUpgrade);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (CastType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CastType);
      }
      if (CastTargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CastTargetType);
      }
      if (UnitTargetTeam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitTargetTeam);
      }
      if (UnitTargetCamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitTargetCamp);
      }
      if (NoCareMagicImmune != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NoCareMagicImmune);
      }
      if (CastRange != 0F) {
        size += 1 + 4;
      }
      if (Cooldown != 0F) {
        size += 1 + 4;
      }
      if (HurtRange != 0F) {
        size += 1 + 4;
      }
      if (ManaCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ManaCost);
      }
      if (AttackAutoActive != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackAutoActive);
      }
      if (Visible != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Visible);
      }
      if (RemainSkillCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RemainSkillCount);
      }
      if (MaxLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxLevel);
      }
      if (RequiredLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RequiredLevel);
      }
      if (LevelsBetweenUpgrades != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LevelsBetweenUpgrades);
      }
      if (InitLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InitLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillDatas other) {
      if (other == null) {
        return;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.RemainCDTime != 0F) {
        RemainCDTime = other.RemainCDTime;
      }
      if (other.CanUpgrade != 0) {
        CanUpgrade = other.CanUpgrade;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.CastType != 0) {
        CastType = other.CastType;
      }
      if (other.CastTargetType != 0) {
        CastTargetType = other.CastTargetType;
      }
      if (other.UnitTargetTeam != 0) {
        UnitTargetTeam = other.UnitTargetTeam;
      }
      if (other.UnitTargetCamp != 0) {
        UnitTargetCamp = other.UnitTargetCamp;
      }
      if (other.NoCareMagicImmune != 0) {
        NoCareMagicImmune = other.NoCareMagicImmune;
      }
      if (other.CastRange != 0F) {
        CastRange = other.CastRange;
      }
      if (other.Cooldown != 0F) {
        Cooldown = other.Cooldown;
      }
      if (other.HurtRange != 0F) {
        HurtRange = other.HurtRange;
      }
      if (other.ManaCost != 0) {
        ManaCost = other.ManaCost;
      }
      if (other.AttackAutoActive != 0) {
        AttackAutoActive = other.AttackAutoActive;
      }
      if (other.Visible != 0) {
        Visible = other.Visible;
      }
      if (other.RemainSkillCount != 0) {
        RemainSkillCount = other.RemainSkillCount;
      }
      if (other.MaxLevel != 0) {
        MaxLevel = other.MaxLevel;
      }
      if (other.RequiredLevel != 0) {
        RequiredLevel = other.RequiredLevel;
      }
      if (other.LevelsBetweenUpgrades != 0) {
        LevelsBetweenUpgrades = other.LevelsBetweenUpgrades;
      }
      if (other.InitLevel != 0) {
        InitLevel = other.InitLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TypeID = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 29: {
            RemainCDTime = input.ReadFloat();
            break;
          }
          case 32: {
            CanUpgrade = input.ReadInt32();
            break;
          }
          case 40: {
            Index = input.ReadInt32();
            break;
          }
          case 48: {
            CastType = input.ReadInt32();
            break;
          }
          case 56: {
            CastTargetType = input.ReadInt32();
            break;
          }
          case 64: {
            UnitTargetTeam = input.ReadInt32();
            break;
          }
          case 72: {
            UnitTargetCamp = input.ReadInt32();
            break;
          }
          case 80: {
            NoCareMagicImmune = input.ReadInt32();
            break;
          }
          case 93: {
            CastRange = input.ReadFloat();
            break;
          }
          case 101: {
            Cooldown = input.ReadFloat();
            break;
          }
          case 109: {
            HurtRange = input.ReadFloat();
            break;
          }
          case 112: {
            ManaCost = input.ReadInt32();
            break;
          }
          case 120: {
            AttackAutoActive = input.ReadInt32();
            break;
          }
          case 128: {
            Visible = input.ReadInt32();
            break;
          }
          case 136: {
            RemainSkillCount = input.ReadInt32();
            break;
          }
          case 144: {
            MaxLevel = input.ReadInt32();
            break;
          }
          case 152: {
            RequiredLevel = input.ReadInt32();
            break;
          }
          case 160: {
            LevelsBetweenUpgrades = input.ReadInt32();
            break;
          }
          case 168: {
            InitLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///buff数据
  /// </summary>
  public sealed partial class BuffDatas : pb::IMessage<BuffDatas> {
    private static readonly pb::MessageParser<BuffDatas> _parser = new pb::MessageParser<BuffDatas>(() => new BuffDatas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuffDatas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffDatas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffDatas(BuffDatas other) : this() {
      typeID_ = other.typeID_;
      remainTime_ = other.remainTime_;
      time_ = other.time_;
      tagNum_ = other.tagNum_;
      connectionType_ = other.connectionType_;
      connectionX_ = other.connectionX_;
      connectionY_ = other.connectionY_;
      connectionZ_ = other.connectionZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffDatas Clone() {
      return new BuffDatas(this);
    }

    /// <summary>Field number for the "TypeID" field.</summary>
    public const int TypeIDFieldNumber = 1;
    private int typeID_;
    /// <summary>
    ///buffid 对应人物身上的特效 buff图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "RemainTime" field.</summary>
    public const int RemainTimeFieldNumber = 2;
    private float remainTime_;
    /// <summary>
    ///剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RemainTime {
      get { return remainTime_; }
      set {
        remainTime_ = value;
      }
    }

    /// <summary>Field number for the "Time" field.</summary>
    public const int TimeFieldNumber = 3;
    private float time_;
    /// <summary>
    ///总时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "TagNum" field.</summary>
    public const int TagNumFieldNumber = 4;
    private int tagNum_;
    /// <summary>
    ///标记数字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TagNum {
      get { return tagNum_; }
      set {
        tagNum_ = value;
      }
    }

    /// <summary>Field number for the "ConnectionType" field.</summary>
    public const int ConnectionTypeFieldNumber = 5;
    private int connectionType_;
    /// <summary>
    ///是否有连接 0表示没有 1表示有连接点 2表示有连接单位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConnectionType {
      get { return connectionType_; }
      set {
        connectionType_ = value;
      }
    }

    /// <summary>Field number for the "ConnectionX" field.</summary>
    public const int ConnectionXFieldNumber = 6;
    private float connectionX_;
    /// <summary>
    ///连接点x
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConnectionX {
      get { return connectionX_; }
      set {
        connectionX_ = value;
      }
    }

    /// <summary>Field number for the "ConnectionY" field.</summary>
    public const int ConnectionYFieldNumber = 7;
    private float connectionY_;
    /// <summary>
    ///连接点y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConnectionY {
      get { return connectionY_; }
      set {
        connectionY_ = value;
      }
    }

    /// <summary>Field number for the "ConnectionZ" field.</summary>
    public const int ConnectionZFieldNumber = 8;
    private float connectionZ_;
    /// <summary>
    ///连接点z
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConnectionZ {
      get { return connectionZ_; }
      set {
        connectionZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuffDatas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuffDatas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeID != other.TypeID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RemainTime, other.RemainTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
      if (TagNum != other.TagNum) return false;
      if (ConnectionType != other.ConnectionType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConnectionX, other.ConnectionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConnectionY, other.ConnectionY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConnectionZ, other.ConnectionZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (RemainTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RemainTime);
      if (Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
      if (TagNum != 0) hash ^= TagNum.GetHashCode();
      if (ConnectionType != 0) hash ^= ConnectionType.GetHashCode();
      if (ConnectionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConnectionX);
      if (ConnectionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConnectionY);
      if (ConnectionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConnectionZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TypeID);
      }
      if (RemainTime != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(RemainTime);
      }
      if (Time != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Time);
      }
      if (TagNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TagNum);
      }
      if (ConnectionType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ConnectionType);
      }
      if (ConnectionX != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(ConnectionX);
      }
      if (ConnectionY != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(ConnectionY);
      }
      if (ConnectionZ != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(ConnectionZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (RemainTime != 0F) {
        size += 1 + 4;
      }
      if (Time != 0F) {
        size += 1 + 4;
      }
      if (TagNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TagNum);
      }
      if (ConnectionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConnectionType);
      }
      if (ConnectionX != 0F) {
        size += 1 + 4;
      }
      if (ConnectionY != 0F) {
        size += 1 + 4;
      }
      if (ConnectionZ != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuffDatas other) {
      if (other == null) {
        return;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.RemainTime != 0F) {
        RemainTime = other.RemainTime;
      }
      if (other.Time != 0F) {
        Time = other.Time;
      }
      if (other.TagNum != 0) {
        TagNum = other.TagNum;
      }
      if (other.ConnectionType != 0) {
        ConnectionType = other.ConnectionType;
      }
      if (other.ConnectionX != 0F) {
        ConnectionX = other.ConnectionX;
      }
      if (other.ConnectionY != 0F) {
        ConnectionY = other.ConnectionY;
      }
      if (other.ConnectionZ != 0F) {
        ConnectionZ = other.ConnectionZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TypeID = input.ReadInt32();
            break;
          }
          case 21: {
            RemainTime = input.ReadFloat();
            break;
          }
          case 29: {
            Time = input.ReadFloat();
            break;
          }
          case 32: {
            TagNum = input.ReadInt32();
            break;
          }
          case 40: {
            ConnectionType = input.ReadInt32();
            break;
          }
          case 53: {
            ConnectionX = input.ReadFloat();
            break;
          }
          case 61: {
            ConnectionY = input.ReadFloat();
            break;
          }
          case 69: {
            ConnectionZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单位数据
  /// </summary>
  public sealed partial class UnitDatas : pb::IMessage<UnitDatas> {
    private static readonly pb::MessageParser<UnitDatas> _parser = new pb::MessageParser<UnitDatas>(() => new UnitDatas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitDatas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitDatas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitDatas(UnitDatas other) : this() {
      name_ = other.name_;
      level_ = other.level_;
      hP_ = other.hP_;
      mP_ = other.mP_;
      x_ = other.x_;
      y_ = other.y_;
      iD_ = other.iD_;
      modeType_ = other.modeType_;
      maxHP_ = other.maxHP_;
      maxMP_ = other.maxMP_;
      experience_ = other.experience_;
      maxExperience_ = other.maxExperience_;
      controlID_ = other.controlID_;
      animotorState_ = other.animotorState_;
      attackTime_ = other.attackTime_;
      directionX_ = other.directionX_;
      directionY_ = other.directionY_;
      unitType_ = other.unitType_;
      attackAcpabilities_ = other.attackAcpabilities_;
      attackMode_ = other.attackMode_;
      isMain_ = other.isMain_;
      isDeath_ = other.isDeath_;
      invisible_ = other.invisible_;
      camp_ = other.camp_;
      isMiss_ = other.isMiss_;
      animotorPause_ = other.animotorPause_;
      skillEnable_ = other.skillEnable_;
      itemEnable_ = other.itemEnable_;
      z_ = other.z_;
      isMirrorImage_ = other.isMirrorImage_;
      attackRange_ = other.attackRange_;
      attackAnim_ = other.attackAnim_;
      typeID_ = other.typeID_;
      remainReviveTime_ = other.remainReviveTime_;
      teamID_ = other.teamID_;
      gold_ = other.gold_;
      diamond_ = other.diamond_;
      reviveGold_ = other.reviveGold_;
      reviveDiamond_ = other.reviveDiamond_;
      characterid_ = other.characterid_;
      remainWatchVedioCountToday_ = other.remainWatchVedioCountToday_;
      watchVedioAddDiamond_ = other.watchVedioAddDiamond_;
      guildID_ = other.guildID_;
      sD_ = other.sD_.Clone();
      bD_ = other.bD_.Clone();
      iSD_ = other.iSD_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitDatas Clone() {
      return new UnitDatas(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "HP" field.</summary>
    public const int HPFieldNumber = 3;
    private int hP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HP {
      get { return hP_; }
      set {
        hP_ = value;
      }
    }

    /// <summary>Field number for the "MP" field.</summary>
    public const int MPFieldNumber = 4;
    private int mP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MP {
      get { return mP_; }
      set {
        mP_ = value;
      }
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 5;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 6;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 7;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "ModeType" field.</summary>
    public const int ModeTypeFieldNumber = 8;
    private string modeType_ = "";
    /// <summary>
    ///模型类型(客户端使用的模型名字)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModeType {
      get { return modeType_; }
      set {
        modeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaxHP" field.</summary>
    public const int MaxHPFieldNumber = 9;
    private int maxHP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHP {
      get { return maxHP_; }
      set {
        maxHP_ = value;
      }
    }

    /// <summary>Field number for the "MaxMP" field.</summary>
    public const int MaxMPFieldNumber = 10;
    private int maxMP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxMP {
      get { return maxMP_; }
      set {
        maxMP_ = value;
      }
    }

    /// <summary>Field number for the "Experience" field.</summary>
    public const int ExperienceFieldNumber = 11;
    private int experience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Experience {
      get { return experience_; }
      set {
        experience_ = value;
      }
    }

    /// <summary>Field number for the "MaxExperience" field.</summary>
    public const int MaxExperienceFieldNumber = 12;
    private int maxExperience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxExperience {
      get { return maxExperience_; }
      set {
        maxExperience_ = value;
      }
    }

    /// <summary>Field number for the "ControlID" field.</summary>
    public const int ControlIDFieldNumber = 13;
    private int controlID_;
    /// <summary>
    ///控制者id uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ControlID {
      get { return controlID_; }
      set {
        controlID_ = value;
      }
    }

    /// <summary>Field number for the "AnimotorState" field.</summary>
    public const int AnimotorStateFieldNumber = 14;
    private int animotorState_;
    /// <summary>
    ///动画状态 1:idle 2:walk 3:attack 4:skill 5:death
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimotorState {
      get { return animotorState_; }
      set {
        animotorState_ = value;
      }
    }

    /// <summary>Field number for the "AttackTime" field.</summary>
    public const int AttackTimeFieldNumber = 15;
    private float attackTime_;
    /// <summary>
    ///攻击动画时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackTime {
      get { return attackTime_; }
      set {
        attackTime_ = value;
      }
    }

    /// <summary>Field number for the "DirectionX" field.</summary>
    public const int DirectionXFieldNumber = 16;
    private float directionX_;
    /// <summary>
    ///方向x
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirectionX {
      get { return directionX_; }
      set {
        directionX_ = value;
      }
    }

    /// <summary>Field number for the "DirectionY" field.</summary>
    public const int DirectionYFieldNumber = 17;
    private float directionY_;
    /// <summary>
    ///方向y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirectionY {
      get { return directionY_; }
      set {
        directionY_ = value;
      }
    }

    /// <summary>Field number for the "UnitType" field.</summary>
    public const int UnitTypeFieldNumber = 18;
    private int unitType_;
    /// <summary>
    ///单位类型(1:英雄 2:普通单位 3:远古 4:boss)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnitType {
      get { return unitType_; }
      set {
        unitType_ = value;
      }
    }

    /// <summary>Field number for the "AttackAcpabilities" field.</summary>
    public const int AttackAcpabilitiesFieldNumber = 19;
    private int attackAcpabilities_;
    /// <summary>
    ///(1:近程攻击 2:远程攻击)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackAcpabilities {
      get { return attackAcpabilities_; }
      set {
        attackAcpabilities_ = value;
      }
    }

    /// <summary>Field number for the "AttackMode" field.</summary>
    public const int AttackModeFieldNumber = 20;
    private int attackMode_;
    /// <summary>
    ///攻击模式(1:和平模式 2:组队模式 3:全体模式 4:阵营模式(玩家,NPC) 5:行会模式)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackMode {
      get { return attackMode_; }
      set {
        attackMode_ = value;
      }
    }

    /// <summary>Field number for the "IsMain" field.</summary>
    public const int IsMainFieldNumber = 21;
    private int isMain_;
    /// <summary>
    ///是否是主单位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsMain {
      get { return isMain_; }
      set {
        isMain_ = value;
      }
    }

    /// <summary>Field number for the "IsDeath" field.</summary>
    public const int IsDeathFieldNumber = 22;
    private int isDeath_;
    /// <summary>
    ///是否死亡((1:死亡 2:没死)) 死亡后不显示血条
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsDeath {
      get { return isDeath_; }
      set {
        isDeath_ = value;
      }
    }

    /// <summary>Field number for the "Invisible" field.</summary>
    public const int InvisibleFieldNumber = 23;
    private int invisible_;
    /// <summary>
    ///是否隐身 1:是 2:否
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Invisible {
      get { return invisible_; }
      set {
        invisible_ = value;
      }
    }

    /// <summary>Field number for the "Camp" field.</summary>
    public const int CampFieldNumber = 24;
    private int camp_;
    /// <summary>
    ///阵营 (1:玩家 2:NPC)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    /// <summary>Field number for the "IsMiss" field.</summary>
    public const int IsMissFieldNumber = 25;
    private bool isMiss_;
    /// <summary>
    ///显示相关的 本次是否有miss效果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMiss {
      get { return isMiss_; }
      set {
        isMiss_ = value;
      }
    }

    /// <summary>Field number for the "AnimotorPause" field.</summary>
    public const int AnimotorPauseFieldNumber = 26;
    private int animotorPause_;
    /// <summary>
    ///动画暂停 1表示是 2表示否
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimotorPause {
      get { return animotorPause_; }
      set {
        animotorPause_ = value;
      }
    }

    /// <summary>Field number for the "SkillEnable" field.</summary>
    public const int SkillEnableFieldNumber = 27;
    private int skillEnable_;
    /// <summary>
    ///能否使用主动技能 (比如 被眩晕和沉默不能使用主动技能) 1:可以 2:不可以
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillEnable {
      get { return skillEnable_; }
      set {
        skillEnable_ = value;
      }
    }

    /// <summary>Field number for the "ItemEnable" field.</summary>
    public const int ItemEnableFieldNumber = 28;
    private int itemEnable_;
    /// <summary>
    ///能否使用主动道具 (比如 被眩晕和禁用道具不能使用主动道具) 1:可以 2:不可以
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemEnable {
      get { return itemEnable_; }
      set {
        itemEnable_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 29;
    private float z_;
    /// <summary>
    ///z坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "IsMirrorImage" field.</summary>
    public const int IsMirrorImageFieldNumber = 30;
    private int isMirrorImage_;
    /// <summary>
    ///是否是镜像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsMirrorImage {
      get { return isMirrorImage_; }
      set {
        isMirrorImage_ = value;
      }
    }

    /// <summary>Field number for the "AttackRange" field.</summary>
    public const int AttackRangeFieldNumber = 31;
    private float attackRange_;
    /// <summary>
    ///攻击距离
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackRange {
      get { return attackRange_; }
      set {
        attackRange_ = value;
      }
    }

    /// <summary>Field number for the "AttackAnim" field.</summary>
    public const int AttackAnimFieldNumber = 32;
    private int attackAnim_;
    /// <summary>
    ///攻击动画
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackAnim {
      get { return attackAnim_; }
      set {
        attackAnim_ = value;
      }
    }

    /// <summary>Field number for the "TypeID" field.</summary>
    public const int TypeIDFieldNumber = 33;
    private int typeID_;
    /// <summary>
    ///类型id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "RemainReviveTime" field.</summary>
    public const int RemainReviveTimeFieldNumber = 34;
    private float remainReviveTime_;
    /// <summary>
    ///剩余复活时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RemainReviveTime {
      get { return remainReviveTime_; }
      set {
        remainReviveTime_ = value;
      }
    }

    /// <summary>Field number for the "TeamID" field.</summary>
    public const int TeamIDFieldNumber = 35;
    private int teamID_;
    /// <summary>
    ///组队的队伍ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "Gold" field.</summary>
    public const int GoldFieldNumber = 36;
    private int gold_;
    /// <summary>
    ///金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "Diamond" field.</summary>
    public const int DiamondFieldNumber = 37;
    private int diamond_;
    /// <summary>
    ///钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "ReviveGold" field.</summary>
    public const int ReviveGoldFieldNumber = 38;
    private int reviveGold_;
    /// <summary>
    ///复活需要的金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReviveGold {
      get { return reviveGold_; }
      set {
        reviveGold_ = value;
      }
    }

    /// <summary>Field number for the "ReviveDiamond" field.</summary>
    public const int ReviveDiamondFieldNumber = 39;
    private int reviveDiamond_;
    /// <summary>
    ///复活需要的砖石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReviveDiamond {
      get { return reviveDiamond_; }
      set {
        reviveDiamond_ = value;
      }
    }

    /// <summary>Field number for the "Characterid" field.</summary>
    public const int CharacteridFieldNumber = 40;
    private int characterid_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Characterid {
      get { return characterid_; }
      set {
        characterid_ = value;
      }
    }

    /// <summary>Field number for the "RemainWatchVedioCountToday" field.</summary>
    public const int RemainWatchVedioCountTodayFieldNumber = 41;
    private int remainWatchVedioCountToday_;
    /// <summary>
    ///今日剩余观看视频次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainWatchVedioCountToday {
      get { return remainWatchVedioCountToday_; }
      set {
        remainWatchVedioCountToday_ = value;
      }
    }

    /// <summary>Field number for the "WatchVedioAddDiamond" field.</summary>
    public const int WatchVedioAddDiamondFieldNumber = 42;
    private int watchVedioAddDiamond_;
    /// <summary>
    ///当前观看视频奖励砖石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WatchVedioAddDiamond {
      get { return watchVedioAddDiamond_; }
      set {
        watchVedioAddDiamond_ = value;
      }
    }

    /// <summary>Field number for the "GuildID" field.</summary>
    public const int GuildIDFieldNumber = 43;
    private int guildID_;
    /// <summary>
    ///公会ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildID {
      get { return guildID_; }
      set {
        guildID_ = value;
      }
    }

    /// <summary>Field number for the "SD" field.</summary>
    public const int SDFieldNumber = 44;
    private static readonly pb::FieldCodec<global::Protomsg.SkillDatas> _repeated_sD_codec
        = pb::FieldCodec.ForMessage(354, global::Protomsg.SkillDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.SkillDatas> sD_ = new pbc::RepeatedField<global::Protomsg.SkillDatas>();
    /// <summary>
    ///技能数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.SkillDatas> SD {
      get { return sD_; }
    }

    /// <summary>Field number for the "BD" field.</summary>
    public const int BDFieldNumber = 45;
    private static readonly pb::FieldCodec<global::Protomsg.BuffDatas> _repeated_bD_codec
        = pb::FieldCodec.ForMessage(362, global::Protomsg.BuffDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.BuffDatas> bD_ = new pbc::RepeatedField<global::Protomsg.BuffDatas>();
    /// <summary>
    ///buff数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.BuffDatas> BD {
      get { return bD_; }
    }

    /// <summary>Field number for the "ISD" field.</summary>
    public const int ISDFieldNumber = 46;
    private static readonly pb::FieldCodec<global::Protomsg.SkillDatas> _repeated_iSD_codec
        = pb::FieldCodec.ForMessage(370, global::Protomsg.SkillDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.SkillDatas> iSD_ = new pbc::RepeatedField<global::Protomsg.SkillDatas>();
    /// <summary>
    ///道具技能数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.SkillDatas> ISD {
      get { return iSD_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnitDatas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnitDatas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (HP != other.HP) return false;
      if (MP != other.MP) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (ID != other.ID) return false;
      if (ModeType != other.ModeType) return false;
      if (MaxHP != other.MaxHP) return false;
      if (MaxMP != other.MaxMP) return false;
      if (Experience != other.Experience) return false;
      if (MaxExperience != other.MaxExperience) return false;
      if (ControlID != other.ControlID) return false;
      if (AnimotorState != other.AnimotorState) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackTime, other.AttackTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DirectionX, other.DirectionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DirectionY, other.DirectionY)) return false;
      if (UnitType != other.UnitType) return false;
      if (AttackAcpabilities != other.AttackAcpabilities) return false;
      if (AttackMode != other.AttackMode) return false;
      if (IsMain != other.IsMain) return false;
      if (IsDeath != other.IsDeath) return false;
      if (Invisible != other.Invisible) return false;
      if (Camp != other.Camp) return false;
      if (IsMiss != other.IsMiss) return false;
      if (AnimotorPause != other.AnimotorPause) return false;
      if (SkillEnable != other.SkillEnable) return false;
      if (ItemEnable != other.ItemEnable) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (IsMirrorImage != other.IsMirrorImage) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackRange, other.AttackRange)) return false;
      if (AttackAnim != other.AttackAnim) return false;
      if (TypeID != other.TypeID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RemainReviveTime, other.RemainReviveTime)) return false;
      if (TeamID != other.TeamID) return false;
      if (Gold != other.Gold) return false;
      if (Diamond != other.Diamond) return false;
      if (ReviveGold != other.ReviveGold) return false;
      if (ReviveDiamond != other.ReviveDiamond) return false;
      if (Characterid != other.Characterid) return false;
      if (RemainWatchVedioCountToday != other.RemainWatchVedioCountToday) return false;
      if (WatchVedioAddDiamond != other.WatchVedioAddDiamond) return false;
      if (GuildID != other.GuildID) return false;
      if(!sD_.Equals(other.sD_)) return false;
      if(!bD_.Equals(other.bD_)) return false;
      if(!iSD_.Equals(other.iSD_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (HP != 0) hash ^= HP.GetHashCode();
      if (MP != 0) hash ^= MP.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (ID != 0) hash ^= ID.GetHashCode();
      if (ModeType.Length != 0) hash ^= ModeType.GetHashCode();
      if (MaxHP != 0) hash ^= MaxHP.GetHashCode();
      if (MaxMP != 0) hash ^= MaxMP.GetHashCode();
      if (Experience != 0) hash ^= Experience.GetHashCode();
      if (MaxExperience != 0) hash ^= MaxExperience.GetHashCode();
      if (ControlID != 0) hash ^= ControlID.GetHashCode();
      if (AnimotorState != 0) hash ^= AnimotorState.GetHashCode();
      if (AttackTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackTime);
      if (DirectionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DirectionX);
      if (DirectionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DirectionY);
      if (UnitType != 0) hash ^= UnitType.GetHashCode();
      if (AttackAcpabilities != 0) hash ^= AttackAcpabilities.GetHashCode();
      if (AttackMode != 0) hash ^= AttackMode.GetHashCode();
      if (IsMain != 0) hash ^= IsMain.GetHashCode();
      if (IsDeath != 0) hash ^= IsDeath.GetHashCode();
      if (Invisible != 0) hash ^= Invisible.GetHashCode();
      if (Camp != 0) hash ^= Camp.GetHashCode();
      if (IsMiss != false) hash ^= IsMiss.GetHashCode();
      if (AnimotorPause != 0) hash ^= AnimotorPause.GetHashCode();
      if (SkillEnable != 0) hash ^= SkillEnable.GetHashCode();
      if (ItemEnable != 0) hash ^= ItemEnable.GetHashCode();
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (IsMirrorImage != 0) hash ^= IsMirrorImage.GetHashCode();
      if (AttackRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackRange);
      if (AttackAnim != 0) hash ^= AttackAnim.GetHashCode();
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (RemainReviveTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RemainReviveTime);
      if (TeamID != 0) hash ^= TeamID.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (Diamond != 0) hash ^= Diamond.GetHashCode();
      if (ReviveGold != 0) hash ^= ReviveGold.GetHashCode();
      if (ReviveDiamond != 0) hash ^= ReviveDiamond.GetHashCode();
      if (Characterid != 0) hash ^= Characterid.GetHashCode();
      if (RemainWatchVedioCountToday != 0) hash ^= RemainWatchVedioCountToday.GetHashCode();
      if (WatchVedioAddDiamond != 0) hash ^= WatchVedioAddDiamond.GetHashCode();
      if (GuildID != 0) hash ^= GuildID.GetHashCode();
      hash ^= sD_.GetHashCode();
      hash ^= bD_.GetHashCode();
      hash ^= iSD_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (HP != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HP);
      }
      if (MP != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MP);
      }
      if (X != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Y);
      }
      if (ID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ID);
      }
      if (ModeType.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ModeType);
      }
      if (MaxHP != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MaxHP);
      }
      if (MaxMP != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxMP);
      }
      if (Experience != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Experience);
      }
      if (MaxExperience != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MaxExperience);
      }
      if (ControlID != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ControlID);
      }
      if (AnimotorState != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(AnimotorState);
      }
      if (AttackTime != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(AttackTime);
      }
      if (DirectionX != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(DirectionX);
      }
      if (DirectionY != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(DirectionY);
      }
      if (UnitType != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(UnitType);
      }
      if (AttackAcpabilities != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(AttackAcpabilities);
      }
      if (AttackMode != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(AttackMode);
      }
      if (IsMain != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(IsMain);
      }
      if (IsDeath != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(IsDeath);
      }
      if (Invisible != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Invisible);
      }
      if (Camp != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Camp);
      }
      if (IsMiss != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(IsMiss);
      }
      if (AnimotorPause != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(AnimotorPause);
      }
      if (SkillEnable != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(SkillEnable);
      }
      if (ItemEnable != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(ItemEnable);
      }
      if (Z != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(Z);
      }
      if (IsMirrorImage != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(IsMirrorImage);
      }
      if (AttackRange != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(AttackRange);
      }
      if (AttackAnim != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(AttackAnim);
      }
      if (TypeID != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(TypeID);
      }
      if (RemainReviveTime != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(RemainReviveTime);
      }
      if (TeamID != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(TeamID);
      }
      if (Gold != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(Gold);
      }
      if (Diamond != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(Diamond);
      }
      if (ReviveGold != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(ReviveGold);
      }
      if (ReviveDiamond != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(ReviveDiamond);
      }
      if (Characterid != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(Characterid);
      }
      if (RemainWatchVedioCountToday != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(RemainWatchVedioCountToday);
      }
      if (WatchVedioAddDiamond != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(WatchVedioAddDiamond);
      }
      if (GuildID != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(GuildID);
      }
      sD_.WriteTo(output, _repeated_sD_codec);
      bD_.WriteTo(output, _repeated_bD_codec);
      iSD_.WriteTo(output, _repeated_iSD_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (HP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HP);
      }
      if (MP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MP);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (ModeType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModeType);
      }
      if (MaxHP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHP);
      }
      if (MaxMP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMP);
      }
      if (Experience != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Experience);
      }
      if (MaxExperience != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxExperience);
      }
      if (ControlID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ControlID);
      }
      if (AnimotorState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimotorState);
      }
      if (AttackTime != 0F) {
        size += 1 + 4;
      }
      if (DirectionX != 0F) {
        size += 2 + 4;
      }
      if (DirectionY != 0F) {
        size += 2 + 4;
      }
      if (UnitType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnitType);
      }
      if (AttackAcpabilities != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackAcpabilities);
      }
      if (AttackMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackMode);
      }
      if (IsMain != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsMain);
      }
      if (IsDeath != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsDeath);
      }
      if (Invisible != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Invisible);
      }
      if (Camp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Camp);
      }
      if (IsMiss != false) {
        size += 2 + 1;
      }
      if (AnimotorPause != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AnimotorPause);
      }
      if (SkillEnable != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SkillEnable);
      }
      if (ItemEnable != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemEnable);
      }
      if (Z != 0F) {
        size += 2 + 4;
      }
      if (IsMirrorImage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsMirrorImage);
      }
      if (AttackRange != 0F) {
        size += 2 + 4;
      }
      if (AttackAnim != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackAnim);
      }
      if (TypeID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (RemainReviveTime != 0F) {
        size += 2 + 4;
      }
      if (TeamID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TeamID);
      }
      if (Gold != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (Diamond != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      if (ReviveGold != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReviveGold);
      }
      if (ReviveDiamond != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReviveDiamond);
      }
      if (Characterid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Characterid);
      }
      if (RemainWatchVedioCountToday != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RemainWatchVedioCountToday);
      }
      if (WatchVedioAddDiamond != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WatchVedioAddDiamond);
      }
      if (GuildID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GuildID);
      }
      size += sD_.CalculateSize(_repeated_sD_codec);
      size += bD_.CalculateSize(_repeated_bD_codec);
      size += iSD_.CalculateSize(_repeated_iSD_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnitDatas other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.HP != 0) {
        HP = other.HP;
      }
      if (other.MP != 0) {
        MP = other.MP;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.ModeType.Length != 0) {
        ModeType = other.ModeType;
      }
      if (other.MaxHP != 0) {
        MaxHP = other.MaxHP;
      }
      if (other.MaxMP != 0) {
        MaxMP = other.MaxMP;
      }
      if (other.Experience != 0) {
        Experience = other.Experience;
      }
      if (other.MaxExperience != 0) {
        MaxExperience = other.MaxExperience;
      }
      if (other.ControlID != 0) {
        ControlID = other.ControlID;
      }
      if (other.AnimotorState != 0) {
        AnimotorState = other.AnimotorState;
      }
      if (other.AttackTime != 0F) {
        AttackTime = other.AttackTime;
      }
      if (other.DirectionX != 0F) {
        DirectionX = other.DirectionX;
      }
      if (other.DirectionY != 0F) {
        DirectionY = other.DirectionY;
      }
      if (other.UnitType != 0) {
        UnitType = other.UnitType;
      }
      if (other.AttackAcpabilities != 0) {
        AttackAcpabilities = other.AttackAcpabilities;
      }
      if (other.AttackMode != 0) {
        AttackMode = other.AttackMode;
      }
      if (other.IsMain != 0) {
        IsMain = other.IsMain;
      }
      if (other.IsDeath != 0) {
        IsDeath = other.IsDeath;
      }
      if (other.Invisible != 0) {
        Invisible = other.Invisible;
      }
      if (other.Camp != 0) {
        Camp = other.Camp;
      }
      if (other.IsMiss != false) {
        IsMiss = other.IsMiss;
      }
      if (other.AnimotorPause != 0) {
        AnimotorPause = other.AnimotorPause;
      }
      if (other.SkillEnable != 0) {
        SkillEnable = other.SkillEnable;
      }
      if (other.ItemEnable != 0) {
        ItemEnable = other.ItemEnable;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.IsMirrorImage != 0) {
        IsMirrorImage = other.IsMirrorImage;
      }
      if (other.AttackRange != 0F) {
        AttackRange = other.AttackRange;
      }
      if (other.AttackAnim != 0) {
        AttackAnim = other.AttackAnim;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.RemainReviveTime != 0F) {
        RemainReviveTime = other.RemainReviveTime;
      }
      if (other.TeamID != 0) {
        TeamID = other.TeamID;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.Diamond != 0) {
        Diamond = other.Diamond;
      }
      if (other.ReviveGold != 0) {
        ReviveGold = other.ReviveGold;
      }
      if (other.ReviveDiamond != 0) {
        ReviveDiamond = other.ReviveDiamond;
      }
      if (other.Characterid != 0) {
        Characterid = other.Characterid;
      }
      if (other.RemainWatchVedioCountToday != 0) {
        RemainWatchVedioCountToday = other.RemainWatchVedioCountToday;
      }
      if (other.WatchVedioAddDiamond != 0) {
        WatchVedioAddDiamond = other.WatchVedioAddDiamond;
      }
      if (other.GuildID != 0) {
        GuildID = other.GuildID;
      }
      sD_.Add(other.sD_);
      bD_.Add(other.bD_);
      iSD_.Add(other.iSD_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            HP = input.ReadInt32();
            break;
          }
          case 32: {
            MP = input.ReadInt32();
            break;
          }
          case 45: {
            X = input.ReadFloat();
            break;
          }
          case 53: {
            Y = input.ReadFloat();
            break;
          }
          case 56: {
            ID = input.ReadInt32();
            break;
          }
          case 66: {
            ModeType = input.ReadString();
            break;
          }
          case 72: {
            MaxHP = input.ReadInt32();
            break;
          }
          case 80: {
            MaxMP = input.ReadInt32();
            break;
          }
          case 88: {
            Experience = input.ReadInt32();
            break;
          }
          case 96: {
            MaxExperience = input.ReadInt32();
            break;
          }
          case 104: {
            ControlID = input.ReadInt32();
            break;
          }
          case 112: {
            AnimotorState = input.ReadInt32();
            break;
          }
          case 125: {
            AttackTime = input.ReadFloat();
            break;
          }
          case 133: {
            DirectionX = input.ReadFloat();
            break;
          }
          case 141: {
            DirectionY = input.ReadFloat();
            break;
          }
          case 144: {
            UnitType = input.ReadInt32();
            break;
          }
          case 152: {
            AttackAcpabilities = input.ReadInt32();
            break;
          }
          case 160: {
            AttackMode = input.ReadInt32();
            break;
          }
          case 168: {
            IsMain = input.ReadInt32();
            break;
          }
          case 176: {
            IsDeath = input.ReadInt32();
            break;
          }
          case 184: {
            Invisible = input.ReadInt32();
            break;
          }
          case 192: {
            Camp = input.ReadInt32();
            break;
          }
          case 200: {
            IsMiss = input.ReadBool();
            break;
          }
          case 208: {
            AnimotorPause = input.ReadInt32();
            break;
          }
          case 216: {
            SkillEnable = input.ReadInt32();
            break;
          }
          case 224: {
            ItemEnable = input.ReadInt32();
            break;
          }
          case 237: {
            Z = input.ReadFloat();
            break;
          }
          case 240: {
            IsMirrorImage = input.ReadInt32();
            break;
          }
          case 253: {
            AttackRange = input.ReadFloat();
            break;
          }
          case 256: {
            AttackAnim = input.ReadInt32();
            break;
          }
          case 264: {
            TypeID = input.ReadInt32();
            break;
          }
          case 277: {
            RemainReviveTime = input.ReadFloat();
            break;
          }
          case 280: {
            TeamID = input.ReadInt32();
            break;
          }
          case 288: {
            Gold = input.ReadInt32();
            break;
          }
          case 296: {
            Diamond = input.ReadInt32();
            break;
          }
          case 304: {
            ReviveGold = input.ReadInt32();
            break;
          }
          case 312: {
            ReviveDiamond = input.ReadInt32();
            break;
          }
          case 320: {
            Characterid = input.ReadInt32();
            break;
          }
          case 328: {
            RemainWatchVedioCountToday = input.ReadInt32();
            break;
          }
          case 336: {
            WatchVedioAddDiamond = input.ReadInt32();
            break;
          }
          case 344: {
            GuildID = input.ReadInt32();
            break;
          }
          case 354: {
            sD_.AddEntriesFrom(input, _repeated_sD_codec);
            break;
          }
          case 362: {
            bD_.AddEntriesFrom(input, _repeated_bD_codec);
            break;
          }
          case 370: {
            iSD_.AddEntriesFrom(input, _repeated_iSD_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BulletDatas : pb::IMessage<BulletDatas> {
    private static readonly pb::MessageParser<BulletDatas> _parser = new pb::MessageParser<BulletDatas>(() => new BulletDatas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BulletDatas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletDatas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletDatas(BulletDatas other) : this() {
      iD_ = other.iD_;
      modeType_ = other.modeType_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      state_ = other.state_;
      startX_ = other.startX_;
      startY_ = other.startY_;
      startZ_ = other.startZ_;
      endX_ = other.endX_;
      endY_ = other.endY_;
      endZ_ = other.endZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletDatas Clone() {
      return new BulletDatas(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///子弹唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "ModeType" field.</summary>
    public const int ModeTypeFieldNumber = 2;
    private string modeType_ = "";
    /// <summary>
    ///弹道特效模型 (客户端使用的模型名字)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModeType {
      get { return modeType_; }
      set {
        modeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 3;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 4;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 5;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 6;
    private int state_;
    /// <summary>
    ///状态 子弹状态(1:创建 需要创建特效,2:移动,3:到达后计算结果(伤害和回血) 4:完成 可以删除了)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "StartX" field.</summary>
    public const int StartXFieldNumber = 7;
    private float startX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartX {
      get { return startX_; }
      set {
        startX_ = value;
      }
    }

    /// <summary>Field number for the "StartY" field.</summary>
    public const int StartYFieldNumber = 8;
    private float startY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartY {
      get { return startY_; }
      set {
        startY_ = value;
      }
    }

    /// <summary>Field number for the "StartZ" field.</summary>
    public const int StartZFieldNumber = 9;
    private float startZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartZ {
      get { return startZ_; }
      set {
        startZ_ = value;
      }
    }

    /// <summary>Field number for the "EndX" field.</summary>
    public const int EndXFieldNumber = 10;
    private float endX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndX {
      get { return endX_; }
      set {
        endX_ = value;
      }
    }

    /// <summary>Field number for the "EndY" field.</summary>
    public const int EndYFieldNumber = 11;
    private float endY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndY {
      get { return endY_; }
      set {
        endY_ = value;
      }
    }

    /// <summary>Field number for the "EndZ" field.</summary>
    public const int EndZFieldNumber = 12;
    private float endZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndZ {
      get { return endZ_; }
      set {
        endZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BulletDatas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BulletDatas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (ModeType != other.ModeType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (State != other.State) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartX, other.StartX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartY, other.StartY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartZ, other.StartZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndX, other.EndX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndY, other.EndY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndZ, other.EndZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (ModeType.Length != 0) hash ^= ModeType.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (State != 0) hash ^= State.GetHashCode();
      if (StartX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartX);
      if (StartY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartY);
      if (StartZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartZ);
      if (EndX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndX);
      if (EndY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndY);
      if (EndZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (ModeType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ModeType);
      }
      if (X != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Z);
      }
      if (State != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(State);
      }
      if (StartX != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(StartX);
      }
      if (StartY != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(StartY);
      }
      if (StartZ != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(StartZ);
      }
      if (EndX != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(EndX);
      }
      if (EndY != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(EndY);
      }
      if (EndZ != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(EndZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (ModeType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModeType);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (StartX != 0F) {
        size += 1 + 4;
      }
      if (StartY != 0F) {
        size += 1 + 4;
      }
      if (StartZ != 0F) {
        size += 1 + 4;
      }
      if (EndX != 0F) {
        size += 1 + 4;
      }
      if (EndY != 0F) {
        size += 1 + 4;
      }
      if (EndZ != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BulletDatas other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.ModeType.Length != 0) {
        ModeType = other.ModeType;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.StartX != 0F) {
        StartX = other.StartX;
      }
      if (other.StartY != 0F) {
        StartY = other.StartY;
      }
      if (other.StartZ != 0F) {
        StartZ = other.StartZ;
      }
      if (other.EndX != 0F) {
        EndX = other.EndX;
      }
      if (other.EndY != 0F) {
        EndY = other.EndY;
      }
      if (other.EndZ != 0F) {
        EndZ = other.EndZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            ModeType = input.ReadString();
            break;
          }
          case 29: {
            X = input.ReadFloat();
            break;
          }
          case 37: {
            Y = input.ReadFloat();
            break;
          }
          case 45: {
            Z = input.ReadFloat();
            break;
          }
          case 48: {
            State = input.ReadInt32();
            break;
          }
          case 61: {
            StartX = input.ReadFloat();
            break;
          }
          case 69: {
            StartY = input.ReadFloat();
            break;
          }
          case 77: {
            StartZ = input.ReadFloat();
            break;
          }
          case 85: {
            EndX = input.ReadFloat();
            break;
          }
          case 93: {
            EndY = input.ReadFloat();
            break;
          }
          case 101: {
            EndZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneItemDatas : pb::IMessage<SceneItemDatas> {
    private static readonly pb::MessageParser<SceneItemDatas> _parser = new pb::MessageParser<SceneItemDatas>(() => new SceneItemDatas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneItemDatas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneItemDatas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneItemDatas(SceneItemDatas other) : this() {
      iD_ = other.iD_;
      typeID_ = other.typeID_;
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneItemDatas Clone() {
      return new SceneItemDatas(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///子弹唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "TypeID" field.</summary>
    public const int TypeIDFieldNumber = 2;
    private int typeID_;
    /// <summary>
    /// (客户端使用的模型名字)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 3;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 4;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneItemDatas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneItemDatas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (TypeID != other.TypeID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (TypeID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TypeID);
      }
      if (X != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneItemDatas other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            TypeID = input.ReadInt32();
            break;
          }
          case 29: {
            X = input.ReadFloat();
            break;
          }
          case 37: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HaloDatas : pb::IMessage<HaloDatas> {
    private static readonly pb::MessageParser<HaloDatas> _parser = new pb::MessageParser<HaloDatas>(() => new HaloDatas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HaloDatas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HaloDatas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HaloDatas(HaloDatas other) : this() {
      iD_ = other.iD_;
      modeType_ = other.modeType_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HaloDatas Clone() {
      return new HaloDatas(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///光环唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "ModeType" field.</summary>
    public const int ModeTypeFieldNumber = 2;
    private string modeType_ = "";
    /// <summary>
    ///光环特效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModeType {
      get { return modeType_; }
      set {
        modeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 3;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 4;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 5;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HaloDatas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HaloDatas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (ModeType != other.ModeType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (ModeType.Length != 0) hash ^= ModeType.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (ModeType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ModeType);
      }
      if (X != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (ModeType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModeType);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HaloDatas other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.ModeType.Length != 0) {
        ModeType = other.ModeType;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            ModeType = input.ReadString();
            break;
          }
          case 29: {
            X = input.ReadFloat();
            break;
          }
          case 37: {
            Y = input.ReadFloat();
            break;
          }
          case 45: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgUserEnterScene : pb::IMessage<MsgUserEnterScene> {
    private static readonly pb::MessageParser<MsgUserEnterScene> _parser = new pb::MessageParser<MsgUserEnterScene>(() => new MsgUserEnterScene());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgUserEnterScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgUserEnterScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgUserEnterScene(MsgUserEnterScene other) : this() {
      uid_ = other.uid_;
      connectId_ = other.connectId_;
      srcServerName_ = other.srcServerName_;
      destServerName_ = other.destServerName_;
      sceneID_ = other.sceneID_;
      datas_ = other.datas_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgUserEnterScene Clone() {
      return new MsgUserEnterScene(this);
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "ConnectId" field.</summary>
    public const int ConnectIdFieldNumber = 2;
    private int connectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConnectId {
      get { return connectId_; }
      set {
        connectId_ = value;
      }
    }

    /// <summary>Field number for the "SrcServerName" field.</summary>
    public const int SrcServerNameFieldNumber = 3;
    private string srcServerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SrcServerName {
      get { return srcServerName_; }
      set {
        srcServerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DestServerName" field.</summary>
    public const int DestServerNameFieldNumber = 4;
    private string destServerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestServerName {
      get { return destServerName_; }
      set {
        destServerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SceneID" field.</summary>
    public const int SceneIDFieldNumber = 5;
    private int sceneID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneID {
      get { return sceneID_; }
      set {
        sceneID_ = value;
      }
    }

    /// <summary>Field number for the "Datas" field.</summary>
    public const int DatasFieldNumber = 6;
    private pb::ByteString datas_ = pb::ByteString.Empty;
    /// <summary>
    ///玩家信息数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Datas {
      get { return datas_; }
      set {
        datas_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgUserEnterScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgUserEnterScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (ConnectId != other.ConnectId) return false;
      if (SrcServerName != other.SrcServerName) return false;
      if (DestServerName != other.DestServerName) return false;
      if (SceneID != other.SceneID) return false;
      if (Datas != other.Datas) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (ConnectId != 0) hash ^= ConnectId.GetHashCode();
      if (SrcServerName.Length != 0) hash ^= SrcServerName.GetHashCode();
      if (DestServerName.Length != 0) hash ^= DestServerName.GetHashCode();
      if (SceneID != 0) hash ^= SceneID.GetHashCode();
      if (Datas.Length != 0) hash ^= Datas.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (ConnectId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConnectId);
      }
      if (SrcServerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SrcServerName);
      }
      if (DestServerName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DestServerName);
      }
      if (SceneID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SceneID);
      }
      if (Datas.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Datas);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (ConnectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConnectId);
      }
      if (SrcServerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SrcServerName);
      }
      if (DestServerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestServerName);
      }
      if (SceneID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneID);
      }
      if (Datas.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Datas);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgUserEnterScene other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.ConnectId != 0) {
        ConnectId = other.ConnectId;
      }
      if (other.SrcServerName.Length != 0) {
        SrcServerName = other.SrcServerName;
      }
      if (other.DestServerName.Length != 0) {
        DestServerName = other.DestServerName;
      }
      if (other.SceneID != 0) {
        SceneID = other.SceneID;
      }
      if (other.Datas.Length != 0) {
        Datas = other.Datas;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            ConnectId = input.ReadInt32();
            break;
          }
          case 26: {
            SrcServerName = input.ReadString();
            break;
          }
          case 34: {
            DestServerName = input.ReadString();
            break;
          }
          case 40: {
            SceneID = input.ReadInt32();
            break;
          }
          case 50: {
            Datas = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家自己造成的伤害数据
  /// </summary>
  public sealed partial class MsgPlayerHurt : pb::IMessage<MsgPlayerHurt> {
    private static readonly pb::MessageParser<MsgPlayerHurt> _parser = new pb::MessageParser<MsgPlayerHurt>(() => new MsgPlayerHurt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgPlayerHurt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerHurt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerHurt(MsgPlayerHurt other) : this() {
      hurtUnitID_ = other.hurtUnitID_;
      hurtAllValue_ = other.hurtAllValue_;
      hurtMagicValue_ = other.hurtMagicValue_;
      isCrit_ = other.isCrit_;
      getGold_ = other.getGold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerHurt Clone() {
      return new MsgPlayerHurt(this);
    }

    /// <summary>Field number for the "HurtUnitID" field.</summary>
    public const int HurtUnitIDFieldNumber = 1;
    private int hurtUnitID_;
    /// <summary>
    ///伤害单位ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HurtUnitID {
      get { return hurtUnitID_; }
      set {
        hurtUnitID_ = value;
      }
    }

    /// <summary>Field number for the "HurtAllValue" field.</summary>
    public const int HurtAllValueFieldNumber = 2;
    private int hurtAllValue_;
    /// <summary>
    ///总伤害值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HurtAllValue {
      get { return hurtAllValue_; }
      set {
        hurtAllValue_ = value;
      }
    }

    /// <summary>Field number for the "HurtMagicValue" field.</summary>
    public const int HurtMagicValueFieldNumber = 3;
    private int hurtMagicValue_;
    /// <summary>
    ///魔法伤害值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HurtMagicValue {
      get { return hurtMagicValue_; }
      set {
        hurtMagicValue_ = value;
      }
    }

    /// <summary>Field number for the "IsCrit" field.</summary>
    public const int IsCritFieldNumber = 4;
    private int isCrit_;
    /// <summary>
    ///是否暴击
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsCrit {
      get { return isCrit_; }
      set {
        isCrit_ = value;
      }
    }

    /// <summary>Field number for the "GetGold" field.</summary>
    public const int GetGoldFieldNumber = 5;
    private int getGold_;
    /// <summary>
    ///获取到的金币数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GetGold {
      get { return getGold_; }
      set {
        getGold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgPlayerHurt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgPlayerHurt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HurtUnitID != other.HurtUnitID) return false;
      if (HurtAllValue != other.HurtAllValue) return false;
      if (HurtMagicValue != other.HurtMagicValue) return false;
      if (IsCrit != other.IsCrit) return false;
      if (GetGold != other.GetGold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HurtUnitID != 0) hash ^= HurtUnitID.GetHashCode();
      if (HurtAllValue != 0) hash ^= HurtAllValue.GetHashCode();
      if (HurtMagicValue != 0) hash ^= HurtMagicValue.GetHashCode();
      if (IsCrit != 0) hash ^= IsCrit.GetHashCode();
      if (GetGold != 0) hash ^= GetGold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HurtUnitID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HurtUnitID);
      }
      if (HurtAllValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HurtAllValue);
      }
      if (HurtMagicValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HurtMagicValue);
      }
      if (IsCrit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(IsCrit);
      }
      if (GetGold != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GetGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HurtUnitID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HurtUnitID);
      }
      if (HurtAllValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HurtAllValue);
      }
      if (HurtMagicValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HurtMagicValue);
      }
      if (IsCrit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsCrit);
      }
      if (GetGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetGold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgPlayerHurt other) {
      if (other == null) {
        return;
      }
      if (other.HurtUnitID != 0) {
        HurtUnitID = other.HurtUnitID;
      }
      if (other.HurtAllValue != 0) {
        HurtAllValue = other.HurtAllValue;
      }
      if (other.HurtMagicValue != 0) {
        HurtMagicValue = other.HurtMagicValue;
      }
      if (other.IsCrit != 0) {
        IsCrit = other.IsCrit;
      }
      if (other.GetGold != 0) {
        GetGold = other.GetGold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HurtUnitID = input.ReadInt32();
            break;
          }
          case 16: {
            HurtAllValue = input.ReadInt32();
            break;
          }
          case 24: {
            HurtMagicValue = input.ReadInt32();
            break;
          }
          case 32: {
            IsCrit = input.ReadInt32();
            break;
          }
          case 40: {
            GetGold = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///每帧更新单位数据
  /// </summary>
  public sealed partial class SC_Update : pb::IMessage<SC_Update> {
    private static readonly pb::MessageParser<SC_Update> _parser = new pb::MessageParser<SC_Update>(() => new SC_Update());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Update> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Update() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Update(SC_Update other) : this() {
      curFrame_ = other.curFrame_;
      newUnits_ = other.newUnits_.Clone();
      oldUnits_ = other.oldUnits_.Clone();
      removeUnits_ = other.removeUnits_.Clone();
      newBullets_ = other.newBullets_.Clone();
      oldBullets_ = other.oldBullets_.Clone();
      removeBullets_ = other.removeBullets_.Clone();
      newHalos_ = other.newHalos_.Clone();
      oldHalos_ = other.oldHalos_.Clone();
      removeHalos_ = other.removeHalos_.Clone();
      newSceneItems_ = other.newSceneItems_.Clone();
      removeSceneItems_ = other.removeSceneItems_.Clone();
      playerHurt_ = other.playerHurt_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Update Clone() {
      return new SC_Update(this);
    }

    /// <summary>Field number for the "CurFrame" field.</summary>
    public const int CurFrameFieldNumber = 1;
    private int curFrame_;
    /// <summary>
    ///当前帧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurFrame {
      get { return curFrame_; }
      set {
        curFrame_ = value;
      }
    }

    /// <summary>Field number for the "NewUnits" field.</summary>
    public const int NewUnitsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protomsg.UnitDatas> _repeated_newUnits_codec
        = pb::FieldCodec.ForMessage(18, global::Protomsg.UnitDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.UnitDatas> newUnits_ = new pbc::RepeatedField<global::Protomsg.UnitDatas>();
    /// <summary>
    ///新的单位数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.UnitDatas> NewUnits {
      get { return newUnits_; }
    }

    /// <summary>Field number for the "OldUnits" field.</summary>
    public const int OldUnitsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protomsg.UnitDatas> _repeated_oldUnits_codec
        = pb::FieldCodec.ForMessage(26, global::Protomsg.UnitDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.UnitDatas> oldUnits_ = new pbc::RepeatedField<global::Protomsg.UnitDatas>();
    /// <summary>
    ///旧单位(只更新变化的值)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.UnitDatas> OldUnits {
      get { return oldUnits_; }
    }

    /// <summary>Field number for the "RemoveUnits" field.</summary>
    public const int RemoveUnitsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_removeUnits_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> removeUnits_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///删除单位(单位ID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RemoveUnits {
      get { return removeUnits_; }
    }

    /// <summary>Field number for the "NewBullets" field.</summary>
    public const int NewBulletsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protomsg.BulletDatas> _repeated_newBullets_codec
        = pb::FieldCodec.ForMessage(42, global::Protomsg.BulletDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.BulletDatas> newBullets_ = new pbc::RepeatedField<global::Protomsg.BulletDatas>();
    /// <summary>
    ///新的子弹
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.BulletDatas> NewBullets {
      get { return newBullets_; }
    }

    /// <summary>Field number for the "OldBullets" field.</summary>
    public const int OldBulletsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Protomsg.BulletDatas> _repeated_oldBullets_codec
        = pb::FieldCodec.ForMessage(50, global::Protomsg.BulletDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.BulletDatas> oldBullets_ = new pbc::RepeatedField<global::Protomsg.BulletDatas>();
    /// <summary>
    ///旧子弹(只更新变化值)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.BulletDatas> OldBullets {
      get { return oldBullets_; }
    }

    /// <summary>Field number for the "RemoveBullets" field.</summary>
    public const int RemoveBulletsFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_removeBullets_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> removeBullets_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///删除子弹(子弹ID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RemoveBullets {
      get { return removeBullets_; }
    }

    /// <summary>Field number for the "NewHalos" field.</summary>
    public const int NewHalosFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Protomsg.HaloDatas> _repeated_newHalos_codec
        = pb::FieldCodec.ForMessage(66, global::Protomsg.HaloDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.HaloDatas> newHalos_ = new pbc::RepeatedField<global::Protomsg.HaloDatas>();
    /// <summary>
    ///新的光环
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.HaloDatas> NewHalos {
      get { return newHalos_; }
    }

    /// <summary>Field number for the "OldHalos" field.</summary>
    public const int OldHalosFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Protomsg.HaloDatas> _repeated_oldHalos_codec
        = pb::FieldCodec.ForMessage(74, global::Protomsg.HaloDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.HaloDatas> oldHalos_ = new pbc::RepeatedField<global::Protomsg.HaloDatas>();
    /// <summary>
    ///旧光环(只更新变化值)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.HaloDatas> OldHalos {
      get { return oldHalos_; }
    }

    /// <summary>Field number for the "RemoveHalos" field.</summary>
    public const int RemoveHalosFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_removeHalos_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> removeHalos_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///删除光环(子弹ID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RemoveHalos {
      get { return removeHalos_; }
    }

    /// <summary>Field number for the "NewSceneItems" field.</summary>
    public const int NewSceneItemsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Protomsg.SceneItemDatas> _repeated_newSceneItems_codec
        = pb::FieldCodec.ForMessage(90, global::Protomsg.SceneItemDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.SceneItemDatas> newSceneItems_ = new pbc::RepeatedField<global::Protomsg.SceneItemDatas>();
    /// <summary>
    ///新的道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.SceneItemDatas> NewSceneItems {
      get { return newSceneItems_; }
    }

    /// <summary>Field number for the "RemoveSceneItems" field.</summary>
    public const int RemoveSceneItemsFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_removeSceneItems_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> removeSceneItems_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///删除道具(道具ID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RemoveSceneItems {
      get { return removeSceneItems_; }
    }

    /// <summary>Field number for the "PlayerHurt" field.</summary>
    public const int PlayerHurtFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Protomsg.MsgPlayerHurt> _repeated_playerHurt_codec
        = pb::FieldCodec.ForMessage(106, global::Protomsg.MsgPlayerHurt.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.MsgPlayerHurt> playerHurt_ = new pbc::RepeatedField<global::Protomsg.MsgPlayerHurt>();
    /// <summary>
    ///玩家造成的伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.MsgPlayerHurt> PlayerHurt {
      get { return playerHurt_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Update);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Update other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurFrame != other.CurFrame) return false;
      if(!newUnits_.Equals(other.newUnits_)) return false;
      if(!oldUnits_.Equals(other.oldUnits_)) return false;
      if(!removeUnits_.Equals(other.removeUnits_)) return false;
      if(!newBullets_.Equals(other.newBullets_)) return false;
      if(!oldBullets_.Equals(other.oldBullets_)) return false;
      if(!removeBullets_.Equals(other.removeBullets_)) return false;
      if(!newHalos_.Equals(other.newHalos_)) return false;
      if(!oldHalos_.Equals(other.oldHalos_)) return false;
      if(!removeHalos_.Equals(other.removeHalos_)) return false;
      if(!newSceneItems_.Equals(other.newSceneItems_)) return false;
      if(!removeSceneItems_.Equals(other.removeSceneItems_)) return false;
      if(!playerHurt_.Equals(other.playerHurt_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurFrame != 0) hash ^= CurFrame.GetHashCode();
      hash ^= newUnits_.GetHashCode();
      hash ^= oldUnits_.GetHashCode();
      hash ^= removeUnits_.GetHashCode();
      hash ^= newBullets_.GetHashCode();
      hash ^= oldBullets_.GetHashCode();
      hash ^= removeBullets_.GetHashCode();
      hash ^= newHalos_.GetHashCode();
      hash ^= oldHalos_.GetHashCode();
      hash ^= removeHalos_.GetHashCode();
      hash ^= newSceneItems_.GetHashCode();
      hash ^= removeSceneItems_.GetHashCode();
      hash ^= playerHurt_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurFrame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurFrame);
      }
      newUnits_.WriteTo(output, _repeated_newUnits_codec);
      oldUnits_.WriteTo(output, _repeated_oldUnits_codec);
      removeUnits_.WriteTo(output, _repeated_removeUnits_codec);
      newBullets_.WriteTo(output, _repeated_newBullets_codec);
      oldBullets_.WriteTo(output, _repeated_oldBullets_codec);
      removeBullets_.WriteTo(output, _repeated_removeBullets_codec);
      newHalos_.WriteTo(output, _repeated_newHalos_codec);
      oldHalos_.WriteTo(output, _repeated_oldHalos_codec);
      removeHalos_.WriteTo(output, _repeated_removeHalos_codec);
      newSceneItems_.WriteTo(output, _repeated_newSceneItems_codec);
      removeSceneItems_.WriteTo(output, _repeated_removeSceneItems_codec);
      playerHurt_.WriteTo(output, _repeated_playerHurt_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurFrame);
      }
      size += newUnits_.CalculateSize(_repeated_newUnits_codec);
      size += oldUnits_.CalculateSize(_repeated_oldUnits_codec);
      size += removeUnits_.CalculateSize(_repeated_removeUnits_codec);
      size += newBullets_.CalculateSize(_repeated_newBullets_codec);
      size += oldBullets_.CalculateSize(_repeated_oldBullets_codec);
      size += removeBullets_.CalculateSize(_repeated_removeBullets_codec);
      size += newHalos_.CalculateSize(_repeated_newHalos_codec);
      size += oldHalos_.CalculateSize(_repeated_oldHalos_codec);
      size += removeHalos_.CalculateSize(_repeated_removeHalos_codec);
      size += newSceneItems_.CalculateSize(_repeated_newSceneItems_codec);
      size += removeSceneItems_.CalculateSize(_repeated_removeSceneItems_codec);
      size += playerHurt_.CalculateSize(_repeated_playerHurt_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Update other) {
      if (other == null) {
        return;
      }
      if (other.CurFrame != 0) {
        CurFrame = other.CurFrame;
      }
      newUnits_.Add(other.newUnits_);
      oldUnits_.Add(other.oldUnits_);
      removeUnits_.Add(other.removeUnits_);
      newBullets_.Add(other.newBullets_);
      oldBullets_.Add(other.oldBullets_);
      removeBullets_.Add(other.removeBullets_);
      newHalos_.Add(other.newHalos_);
      oldHalos_.Add(other.oldHalos_);
      removeHalos_.Add(other.removeHalos_);
      newSceneItems_.Add(other.newSceneItems_);
      removeSceneItems_.Add(other.removeSceneItems_);
      playerHurt_.Add(other.playerHurt_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurFrame = input.ReadInt32();
            break;
          }
          case 18: {
            newUnits_.AddEntriesFrom(input, _repeated_newUnits_codec);
            break;
          }
          case 26: {
            oldUnits_.AddEntriesFrom(input, _repeated_oldUnits_codec);
            break;
          }
          case 34:
          case 32: {
            removeUnits_.AddEntriesFrom(input, _repeated_removeUnits_codec);
            break;
          }
          case 42: {
            newBullets_.AddEntriesFrom(input, _repeated_newBullets_codec);
            break;
          }
          case 50: {
            oldBullets_.AddEntriesFrom(input, _repeated_oldBullets_codec);
            break;
          }
          case 58:
          case 56: {
            removeBullets_.AddEntriesFrom(input, _repeated_removeBullets_codec);
            break;
          }
          case 66: {
            newHalos_.AddEntriesFrom(input, _repeated_newHalos_codec);
            break;
          }
          case 74: {
            oldHalos_.AddEntriesFrom(input, _repeated_oldHalos_codec);
            break;
          }
          case 82:
          case 80: {
            removeHalos_.AddEntriesFrom(input, _repeated_removeHalos_codec);
            break;
          }
          case 90: {
            newSceneItems_.AddEntriesFrom(input, _repeated_newSceneItems_codec);
            break;
          }
          case 98:
          case 96: {
            removeSceneItems_.AddEntriesFrom(input, _repeated_removeSceneItems_codec);
            break;
          }
          case 106: {
            playerHurt_.AddEntriesFrom(input, _repeated_playerHurt_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家进入新场景时的场景信息
  /// </summary>
  public sealed partial class SC_NewScene : pb::IMessage<SC_NewScene> {
    private static readonly pb::MessageParser<SC_NewScene> _parser = new pb::MessageParser<SC_NewScene>(() => new SC_NewScene());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_NewScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NewScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NewScene(SC_NewScene other) : this() {
      name_ = other.name_;
      logicFps_ = other.logicFps_;
      curFrame_ = other.curFrame_;
      serverName_ = other.serverName_;
      sceneID_ = other.sceneID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NewScene Clone() {
      return new SC_NewScene(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///场景名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LogicFps" field.</summary>
    public const int LogicFpsFieldNumber = 2;
    private int logicFps_;
    /// <summary>
    ///逻辑帧率 (20即每秒20帧)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LogicFps {
      get { return logicFps_; }
      set {
        logicFps_ = value;
      }
    }

    /// <summary>Field number for the "CurFrame" field.</summary>
    public const int CurFrameFieldNumber = 3;
    private int curFrame_;
    /// <summary>
    ///当前帧 (客户端通过当前帧和本地时间匹配计算延时逻辑)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurFrame {
      get { return curFrame_; }
      set {
        curFrame_ = value;
      }
    }

    /// <summary>Field number for the "ServerName" field.</summary>
    public const int ServerNameFieldNumber = 4;
    private string serverName_ = "";
    /// <summary>
    ///服务器名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerName {
      get { return serverName_; }
      set {
        serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SceneID" field.</summary>
    public const int SceneIDFieldNumber = 5;
    private int sceneID_;
    /// <summary>
    ///场景ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneID {
      get { return sceneID_; }
      set {
        sceneID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_NewScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_NewScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (LogicFps != other.LogicFps) return false;
      if (CurFrame != other.CurFrame) return false;
      if (ServerName != other.ServerName) return false;
      if (SceneID != other.SceneID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (LogicFps != 0) hash ^= LogicFps.GetHashCode();
      if (CurFrame != 0) hash ^= CurFrame.GetHashCode();
      if (ServerName.Length != 0) hash ^= ServerName.GetHashCode();
      if (SceneID != 0) hash ^= SceneID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (LogicFps != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LogicFps);
      }
      if (CurFrame != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurFrame);
      }
      if (ServerName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ServerName);
      }
      if (SceneID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SceneID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (LogicFps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LogicFps);
      }
      if (CurFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurFrame);
      }
      if (ServerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerName);
      }
      if (SceneID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_NewScene other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.LogicFps != 0) {
        LogicFps = other.LogicFps;
      }
      if (other.CurFrame != 0) {
        CurFrame = other.CurFrame;
      }
      if (other.ServerName.Length != 0) {
        ServerName = other.ServerName;
      }
      if (other.SceneID != 0) {
        SceneID = other.SceneID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            LogicFps = input.ReadInt32();
            break;
          }
          case 24: {
            CurFrame = input.ReadInt32();
            break;
          }
          case 34: {
            ServerName = input.ReadString();
            break;
          }
          case 40: {
            SceneID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单位数据
  /// </summary>
  public sealed partial class CharacterBaseDatas : pb::IMessage<CharacterBaseDatas> {
    private static readonly pb::MessageParser<CharacterBaseDatas> _parser = new pb::MessageParser<CharacterBaseDatas>(() => new CharacterBaseDatas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterBaseDatas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterBaseDatas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterBaseDatas(CharacterBaseDatas other) : this() {
      characterid_ = other.characterid_;
      name_ = other.name_;
      typeid_ = other.typeid_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterBaseDatas Clone() {
      return new CharacterBaseDatas(this);
    }

    /// <summary>Field number for the "Characterid" field.</summary>
    public const int CharacteridFieldNumber = 1;
    private int characterid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Characterid {
      get { return characterid_; }
      set {
        characterid_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Typeid" field.</summary>
    public const int TypeidFieldNumber = 3;
    private int typeid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Typeid {
      get { return typeid_; }
      set {
        typeid_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterBaseDatas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterBaseDatas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Characterid != other.Characterid) return false;
      if (Name != other.Name) return false;
      if (Typeid != other.Typeid) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Characterid != 0) hash ^= Characterid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Typeid != 0) hash ^= Typeid.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Characterid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Characterid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Typeid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Typeid);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Characterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Characterid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Typeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Typeid);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterBaseDatas other) {
      if (other == null) {
        return;
      }
      if (other.Characterid != 0) {
        Characterid = other.Characterid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Typeid != 0) {
        Typeid = other.Typeid;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Characterid = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Typeid = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_Logined : pb::IMessage<SC_Logined> {
    private static readonly pb::MessageParser<SC_Logined> _parser = new pb::MessageParser<SC_Logined>(() => new SC_Logined());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Logined> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Logined() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Logined(SC_Logined other) : this() {
      code_ = other.code_;
      uid_ = other.uid_;
      error_ = other.error_;
      characters_ = other.characters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Logined Clone() {
      return new SC_Logined(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///登录结果 1表示成功 0表示失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 2;
    private int uid_;
    /// <summary>
    ///UID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private string error_ = "";
    /// <summary>
    ///失败原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Characters" field.</summary>
    public const int CharactersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protomsg.CharacterBaseDatas> _repeated_characters_codec
        = pb::FieldCodec.ForMessage(34, global::Protomsg.CharacterBaseDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.CharacterBaseDatas> characters_ = new pbc::RepeatedField<global::Protomsg.CharacterBaseDatas>();
    /// <summary>
    ///已经拥有的角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.CharacterBaseDatas> Characters {
      get { return characters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Logined);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Logined other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Uid != other.Uid) return false;
      if (Error != other.Error) return false;
      if(!characters_.Equals(other.characters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      hash ^= characters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Uid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Uid);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Error);
      }
      characters_.WriteTo(output, _repeated_characters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      size += characters_.CalculateSize(_repeated_characters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Logined other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      characters_.Add(other.characters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Uid = input.ReadInt32();
            break;
          }
          case 26: {
            Error = input.ReadString();
            break;
          }
          case 34: {
            characters_.AddEntriesFrom(input, _repeated_characters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///选择角色结果()
  /// </summary>
  public sealed partial class SC_SelectCharacterResult : pb::IMessage<SC_SelectCharacterResult> {
    private static readonly pb::MessageParser<SC_SelectCharacterResult> _parser = new pb::MessageParser<SC_SelectCharacterResult>(() => new SC_SelectCharacterResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SelectCharacterResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SelectCharacterResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SelectCharacterResult(SC_SelectCharacterResult other) : this() {
      code_ = other.code_;
      characterid_ = other.characterid_;
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SelectCharacterResult Clone() {
      return new SC_SelectCharacterResult(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///选择角色结果 1表示成功 0表示失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "Characterid" field.</summary>
    public const int CharacteridFieldNumber = 2;
    private int characterid_;
    /// <summary>
    ///Characterid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Characterid {
      get { return characterid_; }
      set {
        characterid_ = value;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private int error_;
    /// <summary>
    ///失败原因  名字重复
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SelectCharacterResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SelectCharacterResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Characterid != other.Characterid) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Characterid != 0) hash ^= Characterid.GetHashCode();
      if (Error != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Characterid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Characterid);
      }
      if (Error != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Characterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Characterid);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SelectCharacterResult other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Characterid != 0) {
        Characterid = other.Characterid;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Characterid = input.ReadInt32();
            break;
          }
          case 24: {
            Error = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///商品数据
  /// </summary>
  public sealed partial class CommodityDataProto : pb::IMessage<CommodityDataProto> {
    private static readonly pb::MessageParser<CommodityDataProto> _parser = new pb::MessageParser<CommodityDataProto>(() => new CommodityDataProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommodityDataProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommodityDataProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommodityDataProto(CommodityDataProto other) : this() {
      typeID_ = other.typeID_;
      itemID_ = other.itemID_;
      priceType_ = other.priceType_;
      price_ = other.price_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommodityDataProto Clone() {
      return new CommodityDataProto(this);
    }

    /// <summary>Field number for the "TypeID" field.</summary>
    public const int TypeIDFieldNumber = 1;
    private int typeID_;
    /// <summary>
    ///商品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 2;
    private int itemID_;
    /// <summary>
    ///道具ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "PriceType" field.</summary>
    public const int PriceTypeFieldNumber = 3;
    private int priceType_;
    /// <summary>
    ///价格类型 1金币 2砖石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PriceType {
      get { return priceType_; }
      set {
        priceType_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 4;
    private int price_;
    /// <summary>
    ///价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    /// <summary>
    ///道具等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommodityDataProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommodityDataProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeID != other.TypeID) return false;
      if (ItemID != other.ItemID) return false;
      if (PriceType != other.PriceType) return false;
      if (Price != other.Price) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      if (PriceType != 0) hash ^= PriceType.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TypeID);
      }
      if (ItemID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemID);
      }
      if (PriceType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PriceType);
      }
      if (Price != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Price);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      if (PriceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PriceType);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommodityDataProto other) {
      if (other == null) {
        return;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
      if (other.PriceType != 0) {
        PriceType = other.PriceType;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TypeID = input.ReadInt32();
            break;
          }
          case 16: {
            ItemID = input.ReadInt32();
            break;
          }
          case 24: {
            PriceType = input.ReadInt32();
            break;
          }
          case 32: {
            Price = input.ReadInt32();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取商店数据
  /// </summary>
  public sealed partial class CS_GetStoreData : pb::IMessage<CS_GetStoreData> {
    private static readonly pb::MessageParser<CS_GetStoreData> _parser = new pb::MessageParser<CS_GetStoreData>(() => new CS_GetStoreData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GetStoreData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetStoreData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetStoreData(CS_GetStoreData other) : this() {
      test_ = other.test_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetStoreData Clone() {
      return new CS_GetStoreData(this);
    }

    /// <summary>Field number for the "Test" field.</summary>
    public const int TestFieldNumber = 1;
    private int test_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Test {
      get { return test_; }
      set {
        test_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GetStoreData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GetStoreData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Test != other.Test) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Test != 0) hash ^= Test.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Test != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Test);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Test != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Test);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GetStoreData other) {
      if (other == null) {
        return;
      }
      if (other.Test != 0) {
        Test = other.Test;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Test = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回商品数据
  /// </summary>
  public sealed partial class SC_StoreData : pb::IMessage<SC_StoreData> {
    private static readonly pb::MessageParser<SC_StoreData> _parser = new pb::MessageParser<SC_StoreData>(() => new SC_StoreData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_StoreData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_StoreData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_StoreData(SC_StoreData other) : this() {
      commoditys_ = other.commoditys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_StoreData Clone() {
      return new SC_StoreData(this);
    }

    /// <summary>Field number for the "Commoditys" field.</summary>
    public const int CommoditysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protomsg.CommodityDataProto> _repeated_commoditys_codec
        = pb::FieldCodec.ForMessage(10, global::Protomsg.CommodityDataProto.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.CommodityDataProto> commoditys_ = new pbc::RepeatedField<global::Protomsg.CommodityDataProto>();
    /// <summary>
    ///所有商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.CommodityDataProto> Commoditys {
      get { return commoditys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_StoreData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_StoreData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!commoditys_.Equals(other.commoditys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= commoditys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      commoditys_.WriteTo(output, _repeated_commoditys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += commoditys_.CalculateSize(_repeated_commoditys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_StoreData other) {
      if (other == null) {
        return;
      }
      commoditys_.Add(other.commoditys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            commoditys_.AddEntriesFrom(input, _repeated_commoditys_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///购买商品
  /// </summary>
  public sealed partial class CS_BuyCommodity : pb::IMessage<CS_BuyCommodity> {
    private static readonly pb::MessageParser<CS_BuyCommodity> _parser = new pb::MessageParser<CS_BuyCommodity>(() => new CS_BuyCommodity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_BuyCommodity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_BuyCommodity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_BuyCommodity(CS_BuyCommodity other) : this() {
      typeID_ = other.typeID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_BuyCommodity Clone() {
      return new CS_BuyCommodity(this);
    }

    /// <summary>Field number for the "TypeID" field.</summary>
    public const int TypeIDFieldNumber = 1;
    private int typeID_;
    /// <summary>
    ///商品ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_BuyCommodity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_BuyCommodity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeID != other.TypeID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TypeID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_BuyCommodity other) {
      if (other == null) {
        return;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TypeID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///立即复活
  /// </summary>
  public sealed partial class CS_QuickRevive : pb::IMessage<CS_QuickRevive> {
    private static readonly pb::MessageParser<CS_QuickRevive> _parser = new pb::MessageParser<CS_QuickRevive>(() => new CS_QuickRevive());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_QuickRevive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_QuickRevive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_QuickRevive(CS_QuickRevive other) : this() {
      reviveType_ = other.reviveType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_QuickRevive Clone() {
      return new CS_QuickRevive(this);
    }

    /// <summary>Field number for the "ReviveType" field.</summary>
    public const int ReviveTypeFieldNumber = 1;
    private int reviveType_;
    /// <summary>
    ///1金币复活 2砖石复活
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReviveType {
      get { return reviveType_; }
      set {
        reviveType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_QuickRevive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_QuickRevive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReviveType != other.ReviveType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReviveType != 0) hash ^= ReviveType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReviveType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReviveType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReviveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReviveType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_QuickRevive other) {
      if (other == null) {
        return;
      }
      if (other.ReviveType != 0) {
        ReviveType = other.ReviveType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReviveType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///掉线 客户端自己发给自己的消息
  /// </summary>
  public sealed partial class CC_Disconnect : pb::IMessage<CC_Disconnect> {
    private static readonly pb::MessageParser<CC_Disconnect> _parser = new pb::MessageParser<CC_Disconnect>(() => new CC_Disconnect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CC_Disconnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CC_Disconnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CC_Disconnect(CC_Disconnect other) : this() {
      err_ = other.err_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CC_Disconnect Clone() {
      return new CC_Disconnect(this);
    }

    /// <summary>Field number for the "Err" field.</summary>
    public const int ErrFieldNumber = 1;
    private string err_ = "";
    /// <summary>
    ///掉线原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Err {
      get { return err_; }
      set {
        err_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CC_Disconnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CC_Disconnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err.Length != 0) hash ^= Err.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Err);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Err);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CC_Disconnect other) {
      if (other == null) {
        return;
      }
      if (other.Err.Length != 0) {
        Err = other.Err;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Err = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///聊天信息
  /// </summary>
  public sealed partial class SC_ChatInfo : pb::IMessage<SC_ChatInfo> {
    private static readonly pb::MessageParser<SC_ChatInfo> _parser = new pb::MessageParser<SC_ChatInfo>(() => new SC_ChatInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_ChatInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_ChatInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_ChatInfo(SC_ChatInfo other) : this() {
      channel_ = other.channel_;
      time_ = other.time_;
      srcName_ = other.srcName_;
      srcPlayerUID_ = other.srcPlayerUID_;
      destPlayerUID_ = other.destPlayerUID_;
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_ChatInfo Clone() {
      return new SC_ChatInfo(this);
    }

    /// <summary>Field number for the "Channel" field.</summary>
    public const int ChannelFieldNumber = 1;
    private int channel_;
    /// <summary>
    ///聊天频道 1附近 2全服 3私聊 4队伍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "Time" field.</summary>
    public const int TimeFieldNumber = 2;
    private string time_ = "";
    /// <summary>
    ///时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SrcName" field.</summary>
    public const int SrcNameFieldNumber = 3;
    private string srcName_ = "";
    /// <summary>
    ///发送者名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SrcName {
      get { return srcName_; }
      set {
        srcName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SrcPlayerUID" field.</summary>
    public const int SrcPlayerUIDFieldNumber = 4;
    private int srcPlayerUID_;
    /// <summary>
    ///发送者uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SrcPlayerUID {
      get { return srcPlayerUID_; }
      set {
        srcPlayerUID_ = value;
      }
    }

    /// <summary>Field number for the "DestPlayerUID" field.</summary>
    public const int DestPlayerUIDFieldNumber = 5;
    private int destPlayerUID_;
    /// <summary>
    ///目标者uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestPlayerUID {
      get { return destPlayerUID_; }
      set {
        destPlayerUID_ = value;
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 6;
    private string content_ = "";
    /// <summary>
    ///内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_ChatInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_ChatInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Channel != other.Channel) return false;
      if (Time != other.Time) return false;
      if (SrcName != other.SrcName) return false;
      if (SrcPlayerUID != other.SrcPlayerUID) return false;
      if (DestPlayerUID != other.DestPlayerUID) return false;
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (SrcName.Length != 0) hash ^= SrcName.GetHashCode();
      if (SrcPlayerUID != 0) hash ^= SrcPlayerUID.GetHashCode();
      if (DestPlayerUID != 0) hash ^= DestPlayerUID.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Channel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Channel);
      }
      if (Time.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Time);
      }
      if (SrcName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SrcName);
      }
      if (SrcPlayerUID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SrcPlayerUID);
      }
      if (DestPlayerUID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DestPlayerUID);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
      }
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (SrcName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SrcName);
      }
      if (SrcPlayerUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrcPlayerUID);
      }
      if (DestPlayerUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestPlayerUID);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_ChatInfo other) {
      if (other == null) {
        return;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      if (other.SrcName.Length != 0) {
        SrcName = other.SrcName;
      }
      if (other.SrcPlayerUID != 0) {
        SrcPlayerUID = other.SrcPlayerUID;
      }
      if (other.DestPlayerUID != 0) {
        DestPlayerUID = other.DestPlayerUID;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Channel = input.ReadInt32();
            break;
          }
          case 18: {
            Time = input.ReadString();
            break;
          }
          case 26: {
            SrcName = input.ReadString();
            break;
          }
          case 32: {
            SrcPlayerUID = input.ReadInt32();
            break;
          }
          case 40: {
            DestPlayerUID = input.ReadInt32();
            break;
          }
          case 50: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送聊天信息
  /// </summary>
  public sealed partial class CS_ChatInfo : pb::IMessage<CS_ChatInfo> {
    private static readonly pb::MessageParser<CS_ChatInfo> _parser = new pb::MessageParser<CS_ChatInfo>(() => new CS_ChatInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_ChatInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ChatInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ChatInfo(CS_ChatInfo other) : this() {
      channel_ = other.channel_;
      destPlayerUID_ = other.destPlayerUID_;
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ChatInfo Clone() {
      return new CS_ChatInfo(this);
    }

    /// <summary>Field number for the "Channel" field.</summary>
    public const int ChannelFieldNumber = 1;
    private int channel_;
    /// <summary>
    ///聊天频道 1附近 2全服 3私聊 4队伍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "DestPlayerUID" field.</summary>
    public const int DestPlayerUIDFieldNumber = 5;
    private int destPlayerUID_;
    /// <summary>
    ///目标者uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestPlayerUID {
      get { return destPlayerUID_; }
      set {
        destPlayerUID_ = value;
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 6;
    private string content_ = "";
    /// <summary>
    ///内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_ChatInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_ChatInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Channel != other.Channel) return false;
      if (DestPlayerUID != other.DestPlayerUID) return false;
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (DestPlayerUID != 0) hash ^= DestPlayerUID.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Channel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Channel);
      }
      if (DestPlayerUID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DestPlayerUID);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
      }
      if (DestPlayerUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestPlayerUID);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_ChatInfo other) {
      if (other == null) {
        return;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.DestPlayerUID != 0) {
        DestPlayerUID = other.DestPlayerUID;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Channel = input.ReadInt32();
            break;
          }
          case 40: {
            DestPlayerUID = input.ReadInt32();
            break;
          }
          case 50: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///添加好友
  /// </summary>
  public sealed partial class CS_AddFriendRequest : pb::IMessage<CS_AddFriendRequest> {
    private static readonly pb::MessageParser<CS_AddFriendRequest> _parser = new pb::MessageParser<CS_AddFriendRequest>(() => new CS_AddFriendRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_AddFriendRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_AddFriendRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_AddFriendRequest(CS_AddFriendRequest other) : this() {
      uid_ = other.uid_;
      characterid_ = other.characterid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_AddFriendRequest Clone() {
      return new CS_AddFriendRequest(this);
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    /// <summary>
    ///uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "Characterid" field.</summary>
    public const int CharacteridFieldNumber = 2;
    private int characterid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Characterid {
      get { return characterid_; }
      set {
        characterid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_AddFriendRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_AddFriendRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Characterid != other.Characterid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Characterid != 0) hash ^= Characterid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (Characterid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Characterid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Characterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Characterid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_AddFriendRequest other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Characterid != 0) {
        Characterid = other.Characterid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            Characterid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///删除好友
  /// </summary>
  public sealed partial class CS_RemoveFriend : pb::IMessage<CS_RemoveFriend> {
    private static readonly pb::MessageParser<CS_RemoveFriend> _parser = new pb::MessageParser<CS_RemoveFriend>(() => new CS_RemoveFriend());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_RemoveFriend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_RemoveFriend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_RemoveFriend(CS_RemoveFriend other) : this() {
      uid_ = other.uid_;
      characterid_ = other.characterid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_RemoveFriend Clone() {
      return new CS_RemoveFriend(this);
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    /// <summary>
    ///uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "Characterid" field.</summary>
    public const int CharacteridFieldNumber = 2;
    private int characterid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Characterid {
      get { return characterid_; }
      set {
        characterid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_RemoveFriend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_RemoveFriend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Characterid != other.Characterid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Characterid != 0) hash ^= Characterid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (Characterid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Characterid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Characterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Characterid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_RemoveFriend other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Characterid != 0) {
        Characterid = other.Characterid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            Characterid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///回复好友请求
  /// </summary>
  public sealed partial class CS_AddFriendResponse : pb::IMessage<CS_AddFriendResponse> {
    private static readonly pb::MessageParser<CS_AddFriendResponse> _parser = new pb::MessageParser<CS_AddFriendResponse>(() => new CS_AddFriendResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_AddFriendResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_AddFriendResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_AddFriendResponse(CS_AddFriendResponse other) : this() {
      friendInfo_ = other.friendInfo_ != null ? other.friendInfo_.Clone() : null;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_AddFriendResponse Clone() {
      return new CS_AddFriendResponse(this);
    }

    /// <summary>Field number for the "FriendInfo" field.</summary>
    public const int FriendInfoFieldNumber = 1;
    private global::Protomsg.FriendInfoMsg friendInfo_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protomsg.FriendInfoMsg FriendInfo {
      get { return friendInfo_; }
      set {
        friendInfo_ = value;
      }
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 2;
    private int result_;
    /// <summary>
    ///1同意  2拒绝
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_AddFriendResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_AddFriendResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FriendInfo, other.FriendInfo)) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (friendInfo_ != null) hash ^= FriendInfo.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (friendInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FriendInfo);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (friendInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FriendInfo);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_AddFriendResponse other) {
      if (other == null) {
        return;
      }
      if (other.friendInfo_ != null) {
        if (friendInfo_ == null) {
          friendInfo_ = new global::Protomsg.FriendInfoMsg();
        }
        FriendInfo.MergeFrom(other.FriendInfo);
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (friendInfo_ == null) {
              friendInfo_ = new global::Protomsg.FriendInfoMsg();
            }
            input.ReadMessage(friendInfo_);
            break;
          }
          case 16: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///好友信息
  /// </summary>
  public sealed partial class FriendInfoMsg : pb::IMessage<FriendInfoMsg> {
    private static readonly pb::MessageParser<FriendInfoMsg> _parser = new pb::MessageParser<FriendInfoMsg>(() => new FriendInfoMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendInfoMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendInfoMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendInfoMsg(FriendInfoMsg other) : this() {
      uid_ = other.uid_;
      characterid_ = other.characterid_;
      name_ = other.name_;
      level_ = other.level_;
      typeid_ = other.typeid_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendInfoMsg Clone() {
      return new FriendInfoMsg(this);
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    /// <summary>
    ///uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "Characterid" field.</summary>
    public const int CharacteridFieldNumber = 2;
    private int characterid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Characterid {
      get { return characterid_; }
      set {
        characterid_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Typeid" field.</summary>
    public const int TypeidFieldNumber = 5;
    private int typeid_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Typeid {
      get { return typeid_; }
      set {
        typeid_ = value;
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 6;
    private int state_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FriendInfoMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FriendInfoMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Characterid != other.Characterid) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (Typeid != other.Typeid) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Characterid != 0) hash ^= Characterid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Typeid != 0) hash ^= Typeid.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (Characterid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Characterid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (Typeid != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Typeid);
      }
      if (State != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Characterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Characterid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Typeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Typeid);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FriendInfoMsg other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Characterid != 0) {
        Characterid = other.Characterid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Typeid != 0) {
        Typeid = other.Typeid;
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            Characterid = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            Typeid = input.ReadInt32();
            break;
          }
          case 48: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取好友列表
  /// </summary>
  public sealed partial class CS_GetFriendsList : pb::IMessage<CS_GetFriendsList> {
    private static readonly pb::MessageParser<CS_GetFriendsList> _parser = new pb::MessageParser<CS_GetFriendsList>(() => new CS_GetFriendsList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GetFriendsList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetFriendsList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetFriendsList(CS_GetFriendsList other) : this() {
      uid_ = other.uid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetFriendsList Clone() {
      return new CS_GetFriendsList(this);
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GetFriendsList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GetFriendsList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GetFriendsList other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取好友列表
  /// </summary>
  public sealed partial class SC_GetFriendsList : pb::IMessage<SC_GetFriendsList> {
    private static readonly pb::MessageParser<SC_GetFriendsList> _parser = new pb::MessageParser<SC_GetFriendsList>(() => new SC_GetFriendsList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_GetFriendsList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetFriendsList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetFriendsList(SC_GetFriendsList other) : this() {
      friends_ = other.friends_.Clone();
      friendsRequest_ = other.friendsRequest_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetFriendsList Clone() {
      return new SC_GetFriendsList(this);
    }

    /// <summary>Field number for the "Friends" field.</summary>
    public const int FriendsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protomsg.FriendInfoMsg> _repeated_friends_codec
        = pb::FieldCodec.ForMessage(10, global::Protomsg.FriendInfoMsg.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.FriendInfoMsg> friends_ = new pbc::RepeatedField<global::Protomsg.FriendInfoMsg>();
    /// <summary>
    ///好友
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.FriendInfoMsg> Friends {
      get { return friends_; }
    }

    /// <summary>Field number for the "FriendsRequest" field.</summary>
    public const int FriendsRequestFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protomsg.FriendInfoMsg> _repeated_friendsRequest_codec
        = pb::FieldCodec.ForMessage(18, global::Protomsg.FriendInfoMsg.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.FriendInfoMsg> friendsRequest_ = new pbc::RepeatedField<global::Protomsg.FriendInfoMsg>();
    /// <summary>
    ///好友请求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.FriendInfoMsg> FriendsRequest {
      get { return friendsRequest_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_GetFriendsList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_GetFriendsList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!friends_.Equals(other.friends_)) return false;
      if(!friendsRequest_.Equals(other.friendsRequest_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= friends_.GetHashCode();
      hash ^= friendsRequest_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      friends_.WriteTo(output, _repeated_friends_codec);
      friendsRequest_.WriteTo(output, _repeated_friendsRequest_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friends_.CalculateSize(_repeated_friends_codec);
      size += friendsRequest_.CalculateSize(_repeated_friendsRequest_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_GetFriendsList other) {
      if (other == null) {
        return;
      }
      friends_.Add(other.friends_);
      friendsRequest_.Add(other.friendsRequest_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            friends_.AddEntriesFrom(input, _repeated_friends_codec);
            break;
          }
          case 18: {
            friendsRequest_.AddEntriesFrom(input, _repeated_friendsRequest_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///邮件系统相关
  ///邮件简短信息
  /// </summary>
  public sealed partial class MailShortInfoMsg : pb::IMessage<MailShortInfoMsg> {
    private static readonly pb::MessageParser<MailShortInfoMsg> _parser = new pb::MessageParser<MailShortInfoMsg>(() => new MailShortInfoMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailShortInfoMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailShortInfoMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailShortInfoMsg(MailShortInfoMsg other) : this() {
      id_ = other.id_;
      sendName_ = other.sendName_;
      title_ = other.title_;
      date_ = other.date_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailShortInfoMsg Clone() {
      return new MailShortInfoMsg(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "SendName" field.</summary>
    public const int SendNameFieldNumber = 2;
    private string sendName_ = "";
    /// <summary>
    ///来自
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SendName {
      get { return sendName_; }
      set {
        sendName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 3;
    private string title_ = "";
    /// <summary>
    ///标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Date" field.</summary>
    public const int DateFieldNumber = 4;
    private string date_ = "";
    /// <summary>
    ///日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 5;
    private int state_;
    /// <summary>
    ///领取状态 0表示未领取，1表示已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MailShortInfoMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MailShortInfoMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SendName != other.SendName) return false;
      if (Title != other.Title) return false;
      if (Date != other.Date) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (SendName.Length != 0) hash ^= SendName.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (SendName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SendName);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Date);
      }
      if (State != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (SendName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SendName);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Date.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MailShortInfoMsg other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.SendName.Length != 0) {
        SendName = other.SendName;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            SendName = input.ReadString();
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
          case 34: {
            Date = input.ReadString();
            break;
          }
          case 40: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///邮件奖励 ItemType:10000表示金币 10001表示砖石  其他表示道具ID
  /// </summary>
  public sealed partial class MailRewards : pb::IMessage<MailRewards> {
    private static readonly pb::MessageParser<MailRewards> _parser = new pb::MessageParser<MailRewards>(() => new MailRewards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailRewards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailRewards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailRewards(MailRewards other) : this() {
      itemType_ = other.itemType_;
      count_ = other.count_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailRewards Clone() {
      return new MailRewards(this);
    }

    /// <summary>Field number for the "ItemType" field.</summary>
    public const int ItemTypeFieldNumber = 1;
    private int itemType_;
    /// <summary>
    ///道具类型ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemType {
      get { return itemType_; }
      set {
        itemType_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    ///道具等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MailRewards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MailRewards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemType != other.ItemType) return false;
      if (Count != other.Count) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemType != 0) hash ^= ItemType.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemType);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemType);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MailRewards other) {
      if (other == null) {
        return;
      }
      if (other.ItemType != 0) {
        ItemType = other.ItemType;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemType = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取邮件列表
  /// </summary>
  public sealed partial class CS_GetMailsList : pb::IMessage<CS_GetMailsList> {
    private static readonly pb::MessageParser<CS_GetMailsList> _parser = new pb::MessageParser<CS_GetMailsList>(() => new CS_GetMailsList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GetMailsList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetMailsList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetMailsList(CS_GetMailsList other) : this() {
      uid_ = other.uid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetMailsList Clone() {
      return new CS_GetMailsList(this);
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GetMailsList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GetMailsList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GetMailsList other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取邮件列表
  /// </summary>
  public sealed partial class SC_GetMailsList : pb::IMessage<SC_GetMailsList> {
    private static readonly pb::MessageParser<SC_GetMailsList> _parser = new pb::MessageParser<SC_GetMailsList>(() => new SC_GetMailsList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_GetMailsList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetMailsList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetMailsList(SC_GetMailsList other) : this() {
      mails_ = other.mails_.Clone();
      mailUpperLimit_ = other.mailUpperLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetMailsList Clone() {
      return new SC_GetMailsList(this);
    }

    /// <summary>Field number for the "Mails" field.</summary>
    public const int MailsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protomsg.MailShortInfoMsg> _repeated_mails_codec
        = pb::FieldCodec.ForMessage(10, global::Protomsg.MailShortInfoMsg.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.MailShortInfoMsg> mails_ = new pbc::RepeatedField<global::Protomsg.MailShortInfoMsg>();
    /// <summary>
    ///邮件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.MailShortInfoMsg> Mails {
      get { return mails_; }
    }

    /// <summary>Field number for the "MailUpperLimit" field.</summary>
    public const int MailUpperLimitFieldNumber = 2;
    private int mailUpperLimit_;
    /// <summary>
    ///邮件数量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MailUpperLimit {
      get { return mailUpperLimit_; }
      set {
        mailUpperLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_GetMailsList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_GetMailsList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mails_.Equals(other.mails_)) return false;
      if (MailUpperLimit != other.MailUpperLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mails_.GetHashCode();
      if (MailUpperLimit != 0) hash ^= MailUpperLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mails_.WriteTo(output, _repeated_mails_codec);
      if (MailUpperLimit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MailUpperLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mails_.CalculateSize(_repeated_mails_codec);
      if (MailUpperLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MailUpperLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_GetMailsList other) {
      if (other == null) {
        return;
      }
      mails_.Add(other.mails_);
      if (other.MailUpperLimit != 0) {
        MailUpperLimit = other.MailUpperLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            mails_.AddEntriesFrom(input, _repeated_mails_codec);
            break;
          }
          case 16: {
            MailUpperLimit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取具体邮件信息
  /// </summary>
  public sealed partial class CS_GetMailInfo : pb::IMessage<CS_GetMailInfo> {
    private static readonly pb::MessageParser<CS_GetMailInfo> _parser = new pb::MessageParser<CS_GetMailInfo>(() => new CS_GetMailInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GetMailInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetMailInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetMailInfo(CS_GetMailInfo other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetMailInfo Clone() {
      return new CS_GetMailInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///邮件ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GetMailInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GetMailInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GetMailInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取邮件列表
  /// </summary>
  public sealed partial class SC_GetMailInfo : pb::IMessage<SC_GetMailInfo> {
    private static readonly pb::MessageParser<SC_GetMailInfo> _parser = new pb::MessageParser<SC_GetMailInfo>(() => new SC_GetMailInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_GetMailInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetMailInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetMailInfo(SC_GetMailInfo other) : this() {
      id_ = other.id_;
      sendName_ = other.sendName_;
      title_ = other.title_;
      content_ = other.content_;
      date_ = other.date_;
      rewards_ = other.rewards_.Clone();
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetMailInfo Clone() {
      return new SC_GetMailInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "SendName" field.</summary>
    public const int SendNameFieldNumber = 2;
    private string sendName_ = "";
    /// <summary>
    ///来自
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SendName {
      get { return sendName_; }
      set {
        sendName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 3;
    private string title_ = "";
    /// <summary>
    ///标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 4;
    private string content_ = "";
    /// <summary>
    ///内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Date" field.</summary>
    public const int DateFieldNumber = 5;
    private string date_ = "";
    /// <summary>
    ///日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Rewards" field.</summary>
    public const int RewardsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Protomsg.MailRewards> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(50, global::Protomsg.MailRewards.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.MailRewards> rewards_ = new pbc::RepeatedField<global::Protomsg.MailRewards>();
    /// <summary>
    ///邮件奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.MailRewards> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 7;
    private int state_;
    /// <summary>
    ///领取状态 0表示未领取，1表示已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_GetMailInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_GetMailInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SendName != other.SendName) return false;
      if (Title != other.Title) return false;
      if (Content != other.Content) return false;
      if (Date != other.Date) return false;
      if(!rewards_.Equals(other.rewards_)) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (SendName.Length != 0) hash ^= SendName.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      hash ^= rewards_.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (SendName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SendName);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Content);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Date);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (State != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (SendName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SendName);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Date.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_GetMailInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.SendName.Length != 0) {
        SendName = other.SendName;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
      rewards_.Add(other.rewards_);
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            SendName = input.ReadString();
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
          case 34: {
            Content = input.ReadString();
            break;
          }
          case 42: {
            Date = input.ReadString();
            break;
          }
          case 50: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 56: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取邮件奖励
  /// </summary>
  public sealed partial class CS_GetMailRewards : pb::IMessage<CS_GetMailRewards> {
    private static readonly pb::MessageParser<CS_GetMailRewards> _parser = new pb::MessageParser<CS_GetMailRewards>(() => new CS_GetMailRewards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GetMailRewards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetMailRewards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetMailRewards(CS_GetMailRewards other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetMailRewards Clone() {
      return new CS_GetMailRewards(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///邮件ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GetMailRewards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GetMailRewards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GetMailRewards other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取邮件奖励
  /// </summary>
  public sealed partial class SC_GetMailRewards : pb::IMessage<SC_GetMailRewards> {
    private static readonly pb::MessageParser<SC_GetMailRewards> _parser = new pb::MessageParser<SC_GetMailRewards>(() => new SC_GetMailRewards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_GetMailRewards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetMailRewards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetMailRewards(SC_GetMailRewards other) : this() {
      id_ = other.id_;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetMailRewards Clone() {
      return new SC_GetMailRewards(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///邮件ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 2;
    private int result_;
    /// <summary>
    ///1表示成功 0表示失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_GetMailRewards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_GetMailRewards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_GetMailRewards other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///删除已经领取附件的邮件(没有附件)
  /// </summary>
  public sealed partial class CS_DeleteNoRewardMails : pb::IMessage<CS_DeleteNoRewardMails> {
    private static readonly pb::MessageParser<CS_DeleteNoRewardMails> _parser = new pb::MessageParser<CS_DeleteNoRewardMails>(() => new CS_DeleteNoRewardMails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_DeleteNoRewardMails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_DeleteNoRewardMails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_DeleteNoRewardMails(CS_DeleteNoRewardMails other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_DeleteNoRewardMails Clone() {
      return new CS_DeleteNoRewardMails(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_DeleteNoRewardMails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_DeleteNoRewardMails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_DeleteNoRewardMails other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///交易所相关
  ///获取正在售卖的道具
  /// </summary>
  public sealed partial class CS_GetExchangeShortCommoditys : pb::IMessage<CS_GetExchangeShortCommoditys> {
    private static readonly pb::MessageParser<CS_GetExchangeShortCommoditys> _parser = new pb::MessageParser<CS_GetExchangeShortCommoditys>(() => new CS_GetExchangeShortCommoditys());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GetExchangeShortCommoditys> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetExchangeShortCommoditys() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetExchangeShortCommoditys(CS_GetExchangeShortCommoditys other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetExchangeShortCommoditys Clone() {
      return new CS_GetExchangeShortCommoditys(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GetExchangeShortCommoditys);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GetExchangeShortCommoditys other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GetExchangeShortCommoditys other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///正在售卖的道具数据
  /// </summary>
  public sealed partial class ExchangeShortCommodityData : pb::IMessage<ExchangeShortCommodityData> {
    private static readonly pb::MessageParser<ExchangeShortCommodityData> _parser = new pb::MessageParser<ExchangeShortCommodityData>(() => new ExchangeShortCommodityData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeShortCommodityData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeShortCommodityData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeShortCommodityData(ExchangeShortCommodityData other) : this() {
      itemID_ = other.itemID_;
      sellCount_ = other.sellCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeShortCommodityData Clone() {
      return new ExchangeShortCommodityData(this);
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private int itemID_;
    /// <summary>
    ///道具ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "SellCount" field.</summary>
    public const int SellCountFieldNumber = 2;
    private int sellCount_;
    /// <summary>
    ///售卖数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SellCount {
      get { return sellCount_; }
      set {
        sellCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangeShortCommodityData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangeShortCommodityData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemID != other.ItemID) return false;
      if (SellCount != other.SellCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      if (SellCount != 0) hash ^= SellCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemID);
      }
      if (SellCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SellCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      if (SellCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SellCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangeShortCommodityData other) {
      if (other == null) {
        return;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
      if (other.SellCount != 0) {
        SellCount = other.SellCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemID = input.ReadInt32();
            break;
          }
          case 16: {
            SellCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回正在售卖的相同种类道具数据
  /// </summary>
  public sealed partial class SC_GetExchangeShortCommoditys : pb::IMessage<SC_GetExchangeShortCommoditys> {
    private static readonly pb::MessageParser<SC_GetExchangeShortCommoditys> _parser = new pb::MessageParser<SC_GetExchangeShortCommoditys>(() => new SC_GetExchangeShortCommoditys());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_GetExchangeShortCommoditys> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetExchangeShortCommoditys() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetExchangeShortCommoditys(SC_GetExchangeShortCommoditys other) : this() {
      commoditys_ = other.commoditys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetExchangeShortCommoditys Clone() {
      return new SC_GetExchangeShortCommoditys(this);
    }

    /// <summary>Field number for the "Commoditys" field.</summary>
    public const int CommoditysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protomsg.ExchangeShortCommodityData> _repeated_commoditys_codec
        = pb::FieldCodec.ForMessage(10, global::Protomsg.ExchangeShortCommodityData.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.ExchangeShortCommodityData> commoditys_ = new pbc::RepeatedField<global::Protomsg.ExchangeShortCommodityData>();
    /// <summary>
    ///所有商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.ExchangeShortCommodityData> Commoditys {
      get { return commoditys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_GetExchangeShortCommoditys);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_GetExchangeShortCommoditys other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!commoditys_.Equals(other.commoditys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= commoditys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      commoditys_.WriteTo(output, _repeated_commoditys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += commoditys_.CalculateSize(_repeated_commoditys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_GetExchangeShortCommoditys other) {
      if (other == null) {
        return;
      }
      commoditys_.Add(other.commoditys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            commoditys_.AddEntriesFrom(input, _repeated_commoditys_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回正在售卖的道具
  /// </summary>
  public sealed partial class CS_GetExchangeDetailedCommoditys : pb::IMessage<CS_GetExchangeDetailedCommoditys> {
    private static readonly pb::MessageParser<CS_GetExchangeDetailedCommoditys> _parser = new pb::MessageParser<CS_GetExchangeDetailedCommoditys>(() => new CS_GetExchangeDetailedCommoditys());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GetExchangeDetailedCommoditys> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetExchangeDetailedCommoditys() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetExchangeDetailedCommoditys(CS_GetExchangeDetailedCommoditys other) : this() {
      itemID_ = other.itemID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetExchangeDetailedCommoditys Clone() {
      return new CS_GetExchangeDetailedCommoditys(this);
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private int itemID_;
    /// <summary>
    /////道具ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GetExchangeDetailedCommoditys);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GetExchangeDetailedCommoditys other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemID != other.ItemID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GetExchangeDetailedCommoditys other) {
      if (other == null) {
        return;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///商品数据
  ///message CommodityDataProto{
  ///    int32 TypeID = 1;    //商品ID
  ///    int32 ItemID = 2;    //道具ID
  ///    int32 PriceType = 3; //价格类型 1金币 2砖石
  ///    int32 Price = 4;    //价格
  ///    int32 Level = 5; //道具等级
  ///}
  ///正在售卖的道具数据
  /// </summary>
  public sealed partial class ExchangeDetailedCommodityData : pb::IMessage<ExchangeDetailedCommodityData> {
    private static readonly pb::MessageParser<ExchangeDetailedCommodityData> _parser = new pb::MessageParser<ExchangeDetailedCommodityData>(() => new ExchangeDetailedCommodityData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeDetailedCommodityData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeDetailedCommodityData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeDetailedCommodityData(ExchangeDetailedCommodityData other) : this() {
      commodityData_ = other.commodityData_ != null ? other.commodityData_.Clone() : null;
      remaindTime_ = other.remaindTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeDetailedCommodityData Clone() {
      return new ExchangeDetailedCommodityData(this);
    }

    /// <summary>Field number for the "CommodityData" field.</summary>
    public const int CommodityDataFieldNumber = 1;
    private global::Protomsg.CommodityDataProto commodityData_;
    /// <summary>
    ///道具信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protomsg.CommodityDataProto CommodityData {
      get { return commodityData_; }
      set {
        commodityData_ = value;
      }
    }

    /// <summary>Field number for the "RemaindTime" field.</summary>
    public const int RemaindTimeFieldNumber = 2;
    private int remaindTime_;
    /// <summary>
    ///剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemaindTime {
      get { return remaindTime_; }
      set {
        remaindTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangeDetailedCommodityData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangeDetailedCommodityData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CommodityData, other.CommodityData)) return false;
      if (RemaindTime != other.RemaindTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commodityData_ != null) hash ^= CommodityData.GetHashCode();
      if (RemaindTime != 0) hash ^= RemaindTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (commodityData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommodityData);
      }
      if (RemaindTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RemaindTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commodityData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommodityData);
      }
      if (RemaindTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemaindTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangeDetailedCommodityData other) {
      if (other == null) {
        return;
      }
      if (other.commodityData_ != null) {
        if (commodityData_ == null) {
          commodityData_ = new global::Protomsg.CommodityDataProto();
        }
        CommodityData.MergeFrom(other.CommodityData);
      }
      if (other.RemaindTime != 0) {
        RemaindTime = other.RemaindTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (commodityData_ == null) {
              commodityData_ = new global::Protomsg.CommodityDataProto();
            }
            input.ReadMessage(commodityData_);
            break;
          }
          case 16: {
            RemaindTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回正在售卖的道具数据
  /// </summary>
  public sealed partial class SC_GetExchangeDetailedCommoditys : pb::IMessage<SC_GetExchangeDetailedCommoditys> {
    private static readonly pb::MessageParser<SC_GetExchangeDetailedCommoditys> _parser = new pb::MessageParser<SC_GetExchangeDetailedCommoditys>(() => new SC_GetExchangeDetailedCommoditys());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_GetExchangeDetailedCommoditys> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetExchangeDetailedCommoditys() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetExchangeDetailedCommoditys(SC_GetExchangeDetailedCommoditys other) : this() {
      commoditys_ = other.commoditys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetExchangeDetailedCommoditys Clone() {
      return new SC_GetExchangeDetailedCommoditys(this);
    }

    /// <summary>Field number for the "Commoditys" field.</summary>
    public const int CommoditysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protomsg.ExchangeDetailedCommodityData> _repeated_commoditys_codec
        = pb::FieldCodec.ForMessage(10, global::Protomsg.ExchangeDetailedCommodityData.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.ExchangeDetailedCommodityData> commoditys_ = new pbc::RepeatedField<global::Protomsg.ExchangeDetailedCommodityData>();
    /// <summary>
    ///所有商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.ExchangeDetailedCommodityData> Commoditys {
      get { return commoditys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_GetExchangeDetailedCommoditys);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_GetExchangeDetailedCommoditys other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!commoditys_.Equals(other.commoditys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= commoditys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      commoditys_.WriteTo(output, _repeated_commoditys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += commoditys_.CalculateSize(_repeated_commoditys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_GetExchangeDetailedCommoditys other) {
      if (other == null) {
        return;
      }
      commoditys_.Add(other.commoditys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            commoditys_.AddEntriesFrom(input, _repeated_commoditys_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///购买商品
  /// </summary>
  public sealed partial class CS_BuyExchangeCommodity : pb::IMessage<CS_BuyExchangeCommodity> {
    private static readonly pb::MessageParser<CS_BuyExchangeCommodity> _parser = new pb::MessageParser<CS_BuyExchangeCommodity>(() => new CS_BuyExchangeCommodity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_BuyExchangeCommodity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_BuyExchangeCommodity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_BuyExchangeCommodity(CS_BuyExchangeCommodity other) : this() {
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_BuyExchangeCommodity Clone() {
      return new CS_BuyExchangeCommodity(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///商品ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_BuyExchangeCommodity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_BuyExchangeCommodity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_BuyExchangeCommodity other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///上架商品(只能上架背包里面的道具)
  /// </summary>
  public sealed partial class CS_ShelfExchangeCommodity : pb::IMessage<CS_ShelfExchangeCommodity> {
    private static readonly pb::MessageParser<CS_ShelfExchangeCommodity> _parser = new pb::MessageParser<CS_ShelfExchangeCommodity>(() => new CS_ShelfExchangeCommodity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_ShelfExchangeCommodity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ShelfExchangeCommodity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ShelfExchangeCommodity(CS_ShelfExchangeCommodity other) : this() {
      bagPos_ = other.bagPos_;
      priceType_ = other.priceType_;
      price_ = other.price_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ShelfExchangeCommodity Clone() {
      return new CS_ShelfExchangeCommodity(this);
    }

    /// <summary>Field number for the "BagPos" field.</summary>
    public const int BagPosFieldNumber = 1;
    private int bagPos_;
    /// <summary>
    ///背包里的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BagPos {
      get { return bagPos_; }
      set {
        bagPos_ = value;
      }
    }

    /// <summary>Field number for the "PriceType" field.</summary>
    public const int PriceTypeFieldNumber = 2;
    private int priceType_;
    /// <summary>
    ///价格类型 10000金币 10001砖石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PriceType {
      get { return priceType_; }
      set {
        priceType_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 3;
    private int price_;
    /// <summary>
    ///价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_ShelfExchangeCommodity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_ShelfExchangeCommodity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BagPos != other.BagPos) return false;
      if (PriceType != other.PriceType) return false;
      if (Price != other.Price) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BagPos != 0) hash ^= BagPos.GetHashCode();
      if (PriceType != 0) hash ^= PriceType.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BagPos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BagPos);
      }
      if (PriceType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PriceType);
      }
      if (Price != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BagPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BagPos);
      }
      if (PriceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PriceType);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_ShelfExchangeCommodity other) {
      if (other == null) {
        return;
      }
      if (other.BagPos != 0) {
        BagPos = other.BagPos;
      }
      if (other.PriceType != 0) {
        PriceType = other.PriceType;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BagPos = input.ReadInt32();
            break;
          }
          case 16: {
            PriceType = input.ReadInt32();
            break;
          }
          case 24: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///下架商品()
  /// </summary>
  public sealed partial class CS_UnShelfExchangeCommodity : pb::IMessage<CS_UnShelfExchangeCommodity> {
    private static readonly pb::MessageParser<CS_UnShelfExchangeCommodity> _parser = new pb::MessageParser<CS_UnShelfExchangeCommodity>(() => new CS_UnShelfExchangeCommodity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_UnShelfExchangeCommodity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_UnShelfExchangeCommodity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_UnShelfExchangeCommodity(CS_UnShelfExchangeCommodity other) : this() {
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_UnShelfExchangeCommodity Clone() {
      return new CS_UnShelfExchangeCommodity(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///商品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_UnShelfExchangeCommodity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_UnShelfExchangeCommodity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_UnShelfExchangeCommodity other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取我要出售界面信息
  /// </summary>
  public sealed partial class CS_GetSellUIInfo : pb::IMessage<CS_GetSellUIInfo> {
    private static readonly pb::MessageParser<CS_GetSellUIInfo> _parser = new pb::MessageParser<CS_GetSellUIInfo>(() => new CS_GetSellUIInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GetSellUIInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetSellUIInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetSellUIInfo(CS_GetSellUIInfo other) : this() {
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetSellUIInfo Clone() {
      return new CS_GetSellUIInfo(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    /////
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GetSellUIInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GetSellUIInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GetSellUIInfo other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取我要出售界面信息
  /// </summary>
  public sealed partial class SC_GetSellUIInfo : pb::IMessage<SC_GetSellUIInfo> {
    private static readonly pb::MessageParser<SC_GetSellUIInfo> _parser = new pb::MessageParser<SC_GetSellUIInfo>(() => new SC_GetSellUIInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_GetSellUIInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetSellUIInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetSellUIInfo(SC_GetSellUIInfo other) : this() {
      shelfExchangeLimit_ = other.shelfExchangeLimit_;
      sellExchangeTax_ = other.sellExchangeTax_;
      shelfExchangeFeePriceType_ = other.shelfExchangeFeePriceType_;
      shelfExchangeFeePrice_ = other.shelfExchangeFeePrice_;
      autoUnShelfTime_ = other.autoUnShelfTime_;
      commoditys_ = other.commoditys_.Clone();
      equips_ = other.equips_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetSellUIInfo Clone() {
      return new SC_GetSellUIInfo(this);
    }

    /// <summary>Field number for the "ShelfExchangeLimit" field.</summary>
    public const int ShelfExchangeLimitFieldNumber = 1;
    private int shelfExchangeLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShelfExchangeLimit {
      get { return shelfExchangeLimit_; }
      set {
        shelfExchangeLimit_ = value;
      }
    }

    /// <summary>Field number for the "SellExchangeTax" field.</summary>
    public const int SellExchangeTaxFieldNumber = 2;
    private float sellExchangeTax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SellExchangeTax {
      get { return sellExchangeTax_; }
      set {
        sellExchangeTax_ = value;
      }
    }

    /// <summary>Field number for the "ShelfExchangeFeePriceType" field.</summary>
    public const int ShelfExchangeFeePriceTypeFieldNumber = 3;
    private int shelfExchangeFeePriceType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShelfExchangeFeePriceType {
      get { return shelfExchangeFeePriceType_; }
      set {
        shelfExchangeFeePriceType_ = value;
      }
    }

    /// <summary>Field number for the "ShelfExchangeFeePrice" field.</summary>
    public const int ShelfExchangeFeePriceFieldNumber = 4;
    private int shelfExchangeFeePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShelfExchangeFeePrice {
      get { return shelfExchangeFeePrice_; }
      set {
        shelfExchangeFeePrice_ = value;
      }
    }

    /// <summary>Field number for the "AutoUnShelfTime" field.</summary>
    public const int AutoUnShelfTimeFieldNumber = 5;
    private int autoUnShelfTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AutoUnShelfTime {
      get { return autoUnShelfTime_; }
      set {
        autoUnShelfTime_ = value;
      }
    }

    /// <summary>Field number for the "Commoditys" field.</summary>
    public const int CommoditysFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Protomsg.ExchangeDetailedCommodityData> _repeated_commoditys_codec
        = pb::FieldCodec.ForMessage(50, global::Protomsg.ExchangeDetailedCommodityData.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.ExchangeDetailedCommodityData> commoditys_ = new pbc::RepeatedField<global::Protomsg.ExchangeDetailedCommodityData>();
    /// <summary>
    ///我正在卖的商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.ExchangeDetailedCommodityData> Commoditys {
      get { return commoditys_; }
    }

    /// <summary>Field number for the "Equips" field.</summary>
    public const int EquipsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Protomsg.UnitEquip> _repeated_equips_codec
        = pb::FieldCodec.ForMessage(58, global::Protomsg.UnitEquip.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.UnitEquip> equips_ = new pbc::RepeatedField<global::Protomsg.UnitEquip>();
    /// <summary>
    ///装备 背包里可以卖的装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.UnitEquip> Equips {
      get { return equips_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_GetSellUIInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_GetSellUIInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShelfExchangeLimit != other.ShelfExchangeLimit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SellExchangeTax, other.SellExchangeTax)) return false;
      if (ShelfExchangeFeePriceType != other.ShelfExchangeFeePriceType) return false;
      if (ShelfExchangeFeePrice != other.ShelfExchangeFeePrice) return false;
      if (AutoUnShelfTime != other.AutoUnShelfTime) return false;
      if(!commoditys_.Equals(other.commoditys_)) return false;
      if(!equips_.Equals(other.equips_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShelfExchangeLimit != 0) hash ^= ShelfExchangeLimit.GetHashCode();
      if (SellExchangeTax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SellExchangeTax);
      if (ShelfExchangeFeePriceType != 0) hash ^= ShelfExchangeFeePriceType.GetHashCode();
      if (ShelfExchangeFeePrice != 0) hash ^= ShelfExchangeFeePrice.GetHashCode();
      if (AutoUnShelfTime != 0) hash ^= AutoUnShelfTime.GetHashCode();
      hash ^= commoditys_.GetHashCode();
      hash ^= equips_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShelfExchangeLimit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShelfExchangeLimit);
      }
      if (SellExchangeTax != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(SellExchangeTax);
      }
      if (ShelfExchangeFeePriceType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ShelfExchangeFeePriceType);
      }
      if (ShelfExchangeFeePrice != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ShelfExchangeFeePrice);
      }
      if (AutoUnShelfTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AutoUnShelfTime);
      }
      commoditys_.WriteTo(output, _repeated_commoditys_codec);
      equips_.WriteTo(output, _repeated_equips_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShelfExchangeLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShelfExchangeLimit);
      }
      if (SellExchangeTax != 0F) {
        size += 1 + 4;
      }
      if (ShelfExchangeFeePriceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShelfExchangeFeePriceType);
      }
      if (ShelfExchangeFeePrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShelfExchangeFeePrice);
      }
      if (AutoUnShelfTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AutoUnShelfTime);
      }
      size += commoditys_.CalculateSize(_repeated_commoditys_codec);
      size += equips_.CalculateSize(_repeated_equips_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_GetSellUIInfo other) {
      if (other == null) {
        return;
      }
      if (other.ShelfExchangeLimit != 0) {
        ShelfExchangeLimit = other.ShelfExchangeLimit;
      }
      if (other.SellExchangeTax != 0F) {
        SellExchangeTax = other.SellExchangeTax;
      }
      if (other.ShelfExchangeFeePriceType != 0) {
        ShelfExchangeFeePriceType = other.ShelfExchangeFeePriceType;
      }
      if (other.ShelfExchangeFeePrice != 0) {
        ShelfExchangeFeePrice = other.ShelfExchangeFeePrice;
      }
      if (other.AutoUnShelfTime != 0) {
        AutoUnShelfTime = other.AutoUnShelfTime;
      }
      commoditys_.Add(other.commoditys_);
      equips_.Add(other.equips_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShelfExchangeLimit = input.ReadInt32();
            break;
          }
          case 21: {
            SellExchangeTax = input.ReadFloat();
            break;
          }
          case 24: {
            ShelfExchangeFeePriceType = input.ReadInt32();
            break;
          }
          case 32: {
            ShelfExchangeFeePrice = input.ReadInt32();
            break;
          }
          case 40: {
            AutoUnShelfTime = input.ReadInt32();
            break;
          }
          case 50: {
            commoditys_.AddEntriesFrom(input, _repeated_commoditys_codec);
            break;
          }
          case 58: {
            equips_.AddEntriesFrom(input, _repeated_equips_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///-------------公会相关------------
  ///查看所有公会简短信息
  /// </summary>
  public sealed partial class CS_GetAllGuildsInfo : pb::IMessage<CS_GetAllGuildsInfo> {
    private static readonly pb::MessageParser<CS_GetAllGuildsInfo> _parser = new pb::MessageParser<CS_GetAllGuildsInfo>(() => new CS_GetAllGuildsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GetAllGuildsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetAllGuildsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetAllGuildsInfo(CS_GetAllGuildsInfo other) : this() {
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetAllGuildsInfo Clone() {
      return new CS_GetAllGuildsInfo(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    /////
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GetAllGuildsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GetAllGuildsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GetAllGuildsInfo other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会简短信息
  /// </summary>
  public sealed partial class GuildShortInfo : pb::IMessage<GuildShortInfo> {
    private static readonly pb::MessageParser<GuildShortInfo> _parser = new pb::MessageParser<GuildShortInfo>(() => new GuildShortInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildShortInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildShortInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildShortInfo(GuildShortInfo other) : this() {
      iD_ = other.iD_;
      name_ = other.name_;
      level_ = other.level_;
      experience_ = other.experience_;
      maxExperience_ = other.maxExperience_;
      characterCount_ = other.characterCount_;
      maxCount_ = other.maxCount_;
      presidentName_ = other.presidentName_;
      joinaudit_ = other.joinaudit_;
      joinlevellimit_ = other.joinlevellimit_;
      notice_ = other.notice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildShortInfo Clone() {
      return new GuildShortInfo(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Experience" field.</summary>
    public const int ExperienceFieldNumber = 4;
    private int experience_;
    /// <summary>
    ///经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Experience {
      get { return experience_; }
      set {
        experience_ = value;
      }
    }

    /// <summary>Field number for the "MaxExperience" field.</summary>
    public const int MaxExperienceFieldNumber = 5;
    private int maxExperience_;
    /// <summary>
    ///最大经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxExperience {
      get { return maxExperience_; }
      set {
        maxExperience_ = value;
      }
    }

    /// <summary>Field number for the "CharacterCount" field.</summary>
    public const int CharacterCountFieldNumber = 6;
    private int characterCount_;
    /// <summary>
    ///当前成员数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharacterCount {
      get { return characterCount_; }
      set {
        characterCount_ = value;
      }
    }

    /// <summary>Field number for the "MaxCount" field.</summary>
    public const int MaxCountFieldNumber = 7;
    private int maxCount_;
    /// <summary>
    ///最大成员数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxCount {
      get { return maxCount_; }
      set {
        maxCount_ = value;
      }
    }

    /// <summary>Field number for the "PresidentName" field.</summary>
    public const int PresidentNameFieldNumber = 8;
    private string presidentName_ = "";
    /// <summary>
    ///会长名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PresidentName {
      get { return presidentName_; }
      set {
        presidentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Joinaudit" field.</summary>
    public const int JoinauditFieldNumber = 9;
    private int joinaudit_;
    /// <summary>
    ///加入是否需要审批
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Joinaudit {
      get { return joinaudit_; }
      set {
        joinaudit_ = value;
      }
    }

    /// <summary>Field number for the "Joinlevellimit" field.</summary>
    public const int JoinlevellimitFieldNumber = 10;
    private int joinlevellimit_;
    /// <summary>
    ///加入等级限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Joinlevellimit {
      get { return joinlevellimit_; }
      set {
        joinlevellimit_ = value;
      }
    }

    /// <summary>Field number for the "Notice" field.</summary>
    public const int NoticeFieldNumber = 11;
    private string notice_ = "";
    /// <summary>
    ///公告
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Notice {
      get { return notice_; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildShortInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildShortInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (Experience != other.Experience) return false;
      if (MaxExperience != other.MaxExperience) return false;
      if (CharacterCount != other.CharacterCount) return false;
      if (MaxCount != other.MaxCount) return false;
      if (PresidentName != other.PresidentName) return false;
      if (Joinaudit != other.Joinaudit) return false;
      if (Joinlevellimit != other.Joinlevellimit) return false;
      if (Notice != other.Notice) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Experience != 0) hash ^= Experience.GetHashCode();
      if (MaxExperience != 0) hash ^= MaxExperience.GetHashCode();
      if (CharacterCount != 0) hash ^= CharacterCount.GetHashCode();
      if (MaxCount != 0) hash ^= MaxCount.GetHashCode();
      if (PresidentName.Length != 0) hash ^= PresidentName.GetHashCode();
      if (Joinaudit != 0) hash ^= Joinaudit.GetHashCode();
      if (Joinlevellimit != 0) hash ^= Joinlevellimit.GetHashCode();
      if (Notice.Length != 0) hash ^= Notice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Experience != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Experience);
      }
      if (MaxExperience != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxExperience);
      }
      if (CharacterCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CharacterCount);
      }
      if (MaxCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxCount);
      }
      if (PresidentName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PresidentName);
      }
      if (Joinaudit != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Joinaudit);
      }
      if (Joinlevellimit != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Joinlevellimit);
      }
      if (Notice.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Notice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Experience != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Experience);
      }
      if (MaxExperience != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxExperience);
      }
      if (CharacterCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharacterCount);
      }
      if (MaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCount);
      }
      if (PresidentName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PresidentName);
      }
      if (Joinaudit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Joinaudit);
      }
      if (Joinlevellimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Joinlevellimit);
      }
      if (Notice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Notice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildShortInfo other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Experience != 0) {
        Experience = other.Experience;
      }
      if (other.MaxExperience != 0) {
        MaxExperience = other.MaxExperience;
      }
      if (other.CharacterCount != 0) {
        CharacterCount = other.CharacterCount;
      }
      if (other.MaxCount != 0) {
        MaxCount = other.MaxCount;
      }
      if (other.PresidentName.Length != 0) {
        PresidentName = other.PresidentName;
      }
      if (other.Joinaudit != 0) {
        Joinaudit = other.Joinaudit;
      }
      if (other.Joinlevellimit != 0) {
        Joinlevellimit = other.Joinlevellimit;
      }
      if (other.Notice.Length != 0) {
        Notice = other.Notice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Experience = input.ReadInt32();
            break;
          }
          case 40: {
            MaxExperience = input.ReadInt32();
            break;
          }
          case 48: {
            CharacterCount = input.ReadInt32();
            break;
          }
          case 56: {
            MaxCount = input.ReadInt32();
            break;
          }
          case 66: {
            PresidentName = input.ReadString();
            break;
          }
          case 72: {
            Joinaudit = input.ReadInt32();
            break;
          }
          case 80: {
            Joinlevellimit = input.ReadInt32();
            break;
          }
          case 90: {
            Notice = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回所有公会信息
  /// </summary>
  public sealed partial class SC_GetAllGuildsInfo : pb::IMessage<SC_GetAllGuildsInfo> {
    private static readonly pb::MessageParser<SC_GetAllGuildsInfo> _parser = new pb::MessageParser<SC_GetAllGuildsInfo>(() => new SC_GetAllGuildsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_GetAllGuildsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetAllGuildsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetAllGuildsInfo(SC_GetAllGuildsInfo other) : this() {
      guilds_ = other.guilds_.Clone();
      createPriceType_ = other.createPriceType_;
      createPrice_ = other.createPrice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetAllGuildsInfo Clone() {
      return new SC_GetAllGuildsInfo(this);
    }

    /// <summary>Field number for the "Guilds" field.</summary>
    public const int GuildsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protomsg.GuildShortInfo> _repeated_guilds_codec
        = pb::FieldCodec.ForMessage(10, global::Protomsg.GuildShortInfo.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.GuildShortInfo> guilds_ = new pbc::RepeatedField<global::Protomsg.GuildShortInfo>();
    /// <summary>
    ///所有公会信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.GuildShortInfo> Guilds {
      get { return guilds_; }
    }

    /// <summary>Field number for the "CreatePriceType" field.</summary>
    public const int CreatePriceTypeFieldNumber = 2;
    private int createPriceType_;
    /// <summary>
    ///创建公会 价格类型 10000金币 10001砖石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CreatePriceType {
      get { return createPriceType_; }
      set {
        createPriceType_ = value;
      }
    }

    /// <summary>Field number for the "CreatePrice" field.</summary>
    public const int CreatePriceFieldNumber = 3;
    private int createPrice_;
    /// <summary>
    ///创建公会 价格 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CreatePrice {
      get { return createPrice_; }
      set {
        createPrice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_GetAllGuildsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_GetAllGuildsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!guilds_.Equals(other.guilds_)) return false;
      if (CreatePriceType != other.CreatePriceType) return false;
      if (CreatePrice != other.CreatePrice) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= guilds_.GetHashCode();
      if (CreatePriceType != 0) hash ^= CreatePriceType.GetHashCode();
      if (CreatePrice != 0) hash ^= CreatePrice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      guilds_.WriteTo(output, _repeated_guilds_codec);
      if (CreatePriceType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CreatePriceType);
      }
      if (CreatePrice != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CreatePrice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += guilds_.CalculateSize(_repeated_guilds_codec);
      if (CreatePriceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreatePriceType);
      }
      if (CreatePrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreatePrice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_GetAllGuildsInfo other) {
      if (other == null) {
        return;
      }
      guilds_.Add(other.guilds_);
      if (other.CreatePriceType != 0) {
        CreatePriceType = other.CreatePriceType;
      }
      if (other.CreatePrice != 0) {
        CreatePrice = other.CreatePrice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            guilds_.AddEntriesFrom(input, _repeated_guilds_codec);
            break;
          }
          case 16: {
            CreatePriceType = input.ReadInt32();
            break;
          }
          case 24: {
            CreatePrice = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建公会
  /// </summary>
  public sealed partial class CS_CreateGuild : pb::IMessage<CS_CreateGuild> {
    private static readonly pb::MessageParser<CS_CreateGuild> _parser = new pb::MessageParser<CS_CreateGuild>(() => new CS_CreateGuild());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_CreateGuild> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_CreateGuild() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_CreateGuild(CS_CreateGuild other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_CreateGuild Clone() {
      return new CS_CreateGuild(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_CreateGuild);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_CreateGuild other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_CreateGuild other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///申请加入公会
  /// </summary>
  public sealed partial class CS_JoinGuild : pb::IMessage<CS_JoinGuild> {
    private static readonly pb::MessageParser<CS_JoinGuild> _parser = new pb::MessageParser<CS_JoinGuild>(() => new CS_JoinGuild());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_JoinGuild> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_JoinGuild() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_JoinGuild(CS_JoinGuild other) : this() {
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_JoinGuild Clone() {
      return new CS_JoinGuild(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///公会ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_JoinGuild);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_JoinGuild other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_JoinGuild other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///查看公会详情
  /// </summary>
  public sealed partial class CS_GetGuildInfo : pb::IMessage<CS_GetGuildInfo> {
    private static readonly pb::MessageParser<CS_GetGuildInfo> _parser = new pb::MessageParser<CS_GetGuildInfo>(() => new CS_GetGuildInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GetGuildInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetGuildInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetGuildInfo(CS_GetGuildInfo other) : this() {
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetGuildInfo Clone() {
      return new CS_GetGuildInfo(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///公会ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GetGuildInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GetGuildInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GetGuildInfo other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_GetGuildInfo : pb::IMessage<SC_GetGuildInfo> {
    private static readonly pb::MessageParser<SC_GetGuildInfo> _parser = new pb::MessageParser<SC_GetGuildInfo>(() => new SC_GetGuildInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_GetGuildInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetGuildInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetGuildInfo(SC_GetGuildInfo other) : this() {
      guildBaseInfo_ = other.guildBaseInfo_ != null ? other.guildBaseInfo_.Clone() : null;
      characters_ = other.characters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetGuildInfo Clone() {
      return new SC_GetGuildInfo(this);
    }

    /// <summary>Field number for the "GuildBaseInfo" field.</summary>
    public const int GuildBaseInfoFieldNumber = 1;
    private global::Protomsg.GuildShortInfo guildBaseInfo_;
    /// <summary>
    ///公会基本信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protomsg.GuildShortInfo GuildBaseInfo {
      get { return guildBaseInfo_; }
      set {
        guildBaseInfo_ = value;
      }
    }

    /// <summary>Field number for the "Characters" field.</summary>
    public const int CharactersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protomsg.GuildChaInfo> _repeated_characters_codec
        = pb::FieldCodec.ForMessage(18, global::Protomsg.GuildChaInfo.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.GuildChaInfo> characters_ = new pbc::RepeatedField<global::Protomsg.GuildChaInfo>();
    /// <summary>
    ///公会所有成员信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.GuildChaInfo> Characters {
      get { return characters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_GetGuildInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_GetGuildInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GuildBaseInfo, other.GuildBaseInfo)) return false;
      if(!characters_.Equals(other.characters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (guildBaseInfo_ != null) hash ^= GuildBaseInfo.GetHashCode();
      hash ^= characters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (guildBaseInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GuildBaseInfo);
      }
      characters_.WriteTo(output, _repeated_characters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (guildBaseInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildBaseInfo);
      }
      size += characters_.CalculateSize(_repeated_characters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_GetGuildInfo other) {
      if (other == null) {
        return;
      }
      if (other.guildBaseInfo_ != null) {
        if (guildBaseInfo_ == null) {
          guildBaseInfo_ = new global::Protomsg.GuildShortInfo();
        }
        GuildBaseInfo.MergeFrom(other.GuildBaseInfo);
      }
      characters_.Add(other.characters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (guildBaseInfo_ == null) {
              guildBaseInfo_ = new global::Protomsg.GuildShortInfo();
            }
            input.ReadMessage(guildBaseInfo_);
            break;
          }
          case 18: {
            characters_.AddEntriesFrom(input, _repeated_characters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会成员信息
  /// </summary>
  public sealed partial class GuildChaInfo : pb::IMessage<GuildChaInfo> {
    private static readonly pb::MessageParser<GuildChaInfo> _parser = new pb::MessageParser<GuildChaInfo>(() => new GuildChaInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildChaInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildChaInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildChaInfo(GuildChaInfo other) : this() {
      uid_ = other.uid_;
      characterid_ = other.characterid_;
      name_ = other.name_;
      level_ = other.level_;
      typeid_ = other.typeid_;
      pinLevel_ = other.pinLevel_;
      pinExperience_ = other.pinExperience_;
      post_ = other.post_;
      pinLevelName_ = other.pinLevelName_;
      postName_ = other.postName_;
      pinMaxExperience_ = other.pinMaxExperience_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildChaInfo Clone() {
      return new GuildChaInfo(this);
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "Characterid" field.</summary>
    public const int CharacteridFieldNumber = 2;
    private int characterid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Characterid {
      get { return characterid_; }
      set {
        characterid_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Typeid" field.</summary>
    public const int TypeidFieldNumber = 5;
    private int typeid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Typeid {
      get { return typeid_; }
      set {
        typeid_ = value;
      }
    }

    /// <summary>Field number for the "PinLevel" field.</summary>
    public const int PinLevelFieldNumber = 6;
    private int pinLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PinLevel {
      get { return pinLevel_; }
      set {
        pinLevel_ = value;
      }
    }

    /// <summary>Field number for the "PinExperience" field.</summary>
    public const int PinExperienceFieldNumber = 7;
    private int pinExperience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PinExperience {
      get { return pinExperience_; }
      set {
        pinExperience_ = value;
      }
    }

    /// <summary>Field number for the "Post" field.</summary>
    public const int PostFieldNumber = 8;
    private int post_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Post {
      get { return post_; }
      set {
        post_ = value;
      }
    }

    /// <summary>Field number for the "PinLevelName" field.</summary>
    public const int PinLevelNameFieldNumber = 9;
    private string pinLevelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PinLevelName {
      get { return pinLevelName_; }
      set {
        pinLevelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PostName" field.</summary>
    public const int PostNameFieldNumber = 10;
    private string postName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PostName {
      get { return postName_; }
      set {
        postName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PinMaxExperience" field.</summary>
    public const int PinMaxExperienceFieldNumber = 11;
    private int pinMaxExperience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PinMaxExperience {
      get { return pinMaxExperience_; }
      set {
        pinMaxExperience_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildChaInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildChaInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Characterid != other.Characterid) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (Typeid != other.Typeid) return false;
      if (PinLevel != other.PinLevel) return false;
      if (PinExperience != other.PinExperience) return false;
      if (Post != other.Post) return false;
      if (PinLevelName != other.PinLevelName) return false;
      if (PostName != other.PostName) return false;
      if (PinMaxExperience != other.PinMaxExperience) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Characterid != 0) hash ^= Characterid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Typeid != 0) hash ^= Typeid.GetHashCode();
      if (PinLevel != 0) hash ^= PinLevel.GetHashCode();
      if (PinExperience != 0) hash ^= PinExperience.GetHashCode();
      if (Post != 0) hash ^= Post.GetHashCode();
      if (PinLevelName.Length != 0) hash ^= PinLevelName.GetHashCode();
      if (PostName.Length != 0) hash ^= PostName.GetHashCode();
      if (PinMaxExperience != 0) hash ^= PinMaxExperience.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (Characterid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Characterid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (Typeid != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Typeid);
      }
      if (PinLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PinLevel);
      }
      if (PinExperience != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PinExperience);
      }
      if (Post != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Post);
      }
      if (PinLevelName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PinLevelName);
      }
      if (PostName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PostName);
      }
      if (PinMaxExperience != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PinMaxExperience);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Characterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Characterid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Typeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Typeid);
      }
      if (PinLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PinLevel);
      }
      if (PinExperience != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PinExperience);
      }
      if (Post != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Post);
      }
      if (PinLevelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PinLevelName);
      }
      if (PostName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PostName);
      }
      if (PinMaxExperience != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PinMaxExperience);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildChaInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Characterid != 0) {
        Characterid = other.Characterid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Typeid != 0) {
        Typeid = other.Typeid;
      }
      if (other.PinLevel != 0) {
        PinLevel = other.PinLevel;
      }
      if (other.PinExperience != 0) {
        PinExperience = other.PinExperience;
      }
      if (other.Post != 0) {
        Post = other.Post;
      }
      if (other.PinLevelName.Length != 0) {
        PinLevelName = other.PinLevelName;
      }
      if (other.PostName.Length != 0) {
        PostName = other.PostName;
      }
      if (other.PinMaxExperience != 0) {
        PinMaxExperience = other.PinMaxExperience;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            Characterid = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            Typeid = input.ReadInt32();
            break;
          }
          case 48: {
            PinLevel = input.ReadInt32();
            break;
          }
          case 56: {
            PinExperience = input.ReadInt32();
            break;
          }
          case 64: {
            Post = input.ReadInt32();
            break;
          }
          case 74: {
            PinLevelName = input.ReadString();
            break;
          }
          case 82: {
            PostName = input.ReadString();
            break;
          }
          case 88: {
            PinMaxExperience = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取公会申请列表
  /// </summary>
  public sealed partial class CS_GetJoinGuildPlayer : pb::IMessage<CS_GetJoinGuildPlayer> {
    private static readonly pb::MessageParser<CS_GetJoinGuildPlayer> _parser = new pb::MessageParser<CS_GetJoinGuildPlayer>(() => new CS_GetJoinGuildPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GetJoinGuildPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetJoinGuildPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetJoinGuildPlayer(CS_GetJoinGuildPlayer other) : this() {
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetJoinGuildPlayer Clone() {
      return new CS_GetJoinGuildPlayer(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///公会ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GetJoinGuildPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GetJoinGuildPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GetJoinGuildPlayer other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_GetJoinGuildPlayer : pb::IMessage<SC_GetJoinGuildPlayer> {
    private static readonly pb::MessageParser<SC_GetJoinGuildPlayer> _parser = new pb::MessageParser<SC_GetJoinGuildPlayer>(() => new SC_GetJoinGuildPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_GetJoinGuildPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetJoinGuildPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetJoinGuildPlayer(SC_GetJoinGuildPlayer other) : this() {
      requestCharacters_ = other.requestCharacters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetJoinGuildPlayer Clone() {
      return new SC_GetJoinGuildPlayer(this);
    }

    /// <summary>Field number for the "RequestCharacters" field.</summary>
    public const int RequestCharactersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protomsg.GuildChaInfo> _repeated_requestCharacters_codec
        = pb::FieldCodec.ForMessage(10, global::Protomsg.GuildChaInfo.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.GuildChaInfo> requestCharacters_ = new pbc::RepeatedField<global::Protomsg.GuildChaInfo>();
    /// <summary>
    ///公会申请成员信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.GuildChaInfo> RequestCharacters {
      get { return requestCharacters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_GetJoinGuildPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_GetJoinGuildPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!requestCharacters_.Equals(other.requestCharacters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= requestCharacters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      requestCharacters_.WriteTo(output, _repeated_requestCharacters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += requestCharacters_.CalculateSize(_repeated_requestCharacters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_GetJoinGuildPlayer other) {
      if (other == null) {
        return;
      }
      requestCharacters_.Add(other.requestCharacters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            requestCharacters_.AddEntriesFrom(input, _repeated_requestCharacters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///回复玩家加入公会
  /// </summary>
  public sealed partial class CS_ResponseJoinGuildPlayer : pb::IMessage<CS_ResponseJoinGuildPlayer> {
    private static readonly pb::MessageParser<CS_ResponseJoinGuildPlayer> _parser = new pb::MessageParser<CS_ResponseJoinGuildPlayer>(() => new CS_ResponseJoinGuildPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_ResponseJoinGuildPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ResponseJoinGuildPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ResponseJoinGuildPlayer(CS_ResponseJoinGuildPlayer other) : this() {
      characterid_ = other.characterid_;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ResponseJoinGuildPlayer Clone() {
      return new CS_ResponseJoinGuildPlayer(this);
    }

    /// <summary>Field number for the "Characterid" field.</summary>
    public const int CharacteridFieldNumber = 1;
    private int characterid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Characterid {
      get { return characterid_; }
      set {
        characterid_ = value;
      }
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 2;
    private int result_;
    /// <summary>
    ///1表示同意 其他表示不同意
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_ResponseJoinGuildPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_ResponseJoinGuildPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Characterid != other.Characterid) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Characterid != 0) hash ^= Characterid.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Characterid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Characterid);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Characterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Characterid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_ResponseJoinGuildPlayer other) {
      if (other == null) {
        return;
      }
      if (other.Characterid != 0) {
        Characterid = other.Characterid;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Characterid = input.ReadInt32();
            break;
          }
          case 16: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///把玩家踢出公会
  /// </summary>
  public sealed partial class CS_DeleteGuildPlayer : pb::IMessage<CS_DeleteGuildPlayer> {
    private static readonly pb::MessageParser<CS_DeleteGuildPlayer> _parser = new pb::MessageParser<CS_DeleteGuildPlayer>(() => new CS_DeleteGuildPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_DeleteGuildPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_DeleteGuildPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_DeleteGuildPlayer(CS_DeleteGuildPlayer other) : this() {
      characterid_ = other.characterid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_DeleteGuildPlayer Clone() {
      return new CS_DeleteGuildPlayer(this);
    }

    /// <summary>Field number for the "Characterid" field.</summary>
    public const int CharacteridFieldNumber = 1;
    private int characterid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Characterid {
      get { return characterid_; }
      set {
        characterid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_DeleteGuildPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_DeleteGuildPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Characterid != other.Characterid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Characterid != 0) hash ^= Characterid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Characterid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Characterid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Characterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Characterid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_DeleteGuildPlayer other) {
      if (other == null) {
        return;
      }
      if (other.Characterid != 0) {
        Characterid = other.Characterid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Characterid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会操作
  /// </summary>
  public sealed partial class CS_GuildOperate : pb::IMessage<CS_GuildOperate> {
    private static readonly pb::MessageParser<CS_GuildOperate> _parser = new pb::MessageParser<CS_GuildOperate>(() => new CS_GuildOperate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GuildOperate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GuildOperate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GuildOperate(CS_GuildOperate other) : this() {
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GuildOperate Clone() {
      return new CS_GuildOperate(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///1表示自己退出公会 2表示解散公会
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GuildOperate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GuildOperate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GuildOperate other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取公会拍卖物品
  /// </summary>
  public sealed partial class CS_GetAuctionItems : pb::IMessage<CS_GetAuctionItems> {
    private static readonly pb::MessageParser<CS_GetAuctionItems> _parser = new pb::MessageParser<CS_GetAuctionItems>(() => new CS_GetAuctionItems());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GetAuctionItems> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetAuctionItems() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetAuctionItems(CS_GetAuctionItems other) : this() {
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetAuctionItems Clone() {
      return new CS_GetAuctionItems(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GetAuctionItems);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GetAuctionItems other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GetAuctionItems other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_GetAuctionItems : pb::IMessage<SC_GetAuctionItems> {
    private static readonly pb::MessageParser<SC_GetAuctionItems> _parser = new pb::MessageParser<SC_GetAuctionItems>(() => new SC_GetAuctionItems());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_GetAuctionItems> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetAuctionItems() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetAuctionItems(SC_GetAuctionItems other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetAuctionItems Clone() {
      return new SC_GetAuctionItems(this);
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protomsg.AuctionItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Protomsg.AuctionItem.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.AuctionItem> items_ = new pbc::RepeatedField<global::Protomsg.AuctionItem>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.AuctionItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_GetAuctionItems);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_GetAuctionItems other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_GetAuctionItems other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会拍卖物品数据
  /// </summary>
  public sealed partial class AuctionItem : pb::IMessage<AuctionItem> {
    private static readonly pb::MessageParser<AuctionItem> _parser = new pb::MessageParser<AuctionItem>(() => new AuctionItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuctionItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuctionItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuctionItem(AuctionItem other) : this() {
      iD_ = other.iD_;
      itemID_ = other.itemID_;
      priceType_ = other.priceType_;
      price_ = other.price_;
      level_ = other.level_;
      bidderCharacterName_ = other.bidderCharacterName_;
      receivecharactersName_ = other.receivecharactersName_.Clone();
      remainTime_ = other.remainTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuctionItem Clone() {
      return new AuctionItem(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///商品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 2;
    private int itemID_;
    /// <summary>
    ///道具ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "PriceType" field.</summary>
    public const int PriceTypeFieldNumber = 3;
    private int priceType_;
    /// <summary>
    ///价格类型 1金币 2砖石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PriceType {
      get { return priceType_; }
      set {
        priceType_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 4;
    private int price_;
    /// <summary>
    ///价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    /// <summary>
    ///道具等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "BidderCharacterName" field.</summary>
    public const int BidderCharacterNameFieldNumber = 6;
    private string bidderCharacterName_ = "";
    /// <summary>
    ///竞拍者名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BidderCharacterName {
      get { return bidderCharacterName_; }
      set {
        bidderCharacterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReceivecharactersName" field.</summary>
    public const int ReceivecharactersNameFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_receivecharactersName_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> receivecharactersName_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///分红的所有人名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ReceivecharactersName {
      get { return receivecharactersName_; }
    }

    /// <summary>Field number for the "RemainTime" field.</summary>
    public const int RemainTimeFieldNumber = 8;
    private int remainTime_;
    /// <summary>
    ///剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainTime {
      get { return remainTime_; }
      set {
        remainTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuctionItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuctionItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (ItemID != other.ItemID) return false;
      if (PriceType != other.PriceType) return false;
      if (Price != other.Price) return false;
      if (Level != other.Level) return false;
      if (BidderCharacterName != other.BidderCharacterName) return false;
      if(!receivecharactersName_.Equals(other.receivecharactersName_)) return false;
      if (RemainTime != other.RemainTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      if (PriceType != 0) hash ^= PriceType.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (BidderCharacterName.Length != 0) hash ^= BidderCharacterName.GetHashCode();
      hash ^= receivecharactersName_.GetHashCode();
      if (RemainTime != 0) hash ^= RemainTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (ItemID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemID);
      }
      if (PriceType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PriceType);
      }
      if (Price != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Price);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (BidderCharacterName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BidderCharacterName);
      }
      receivecharactersName_.WriteTo(output, _repeated_receivecharactersName_codec);
      if (RemainTime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RemainTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      if (PriceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PriceType);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (BidderCharacterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BidderCharacterName);
      }
      size += receivecharactersName_.CalculateSize(_repeated_receivecharactersName_codec);
      if (RemainTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuctionItem other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
      if (other.PriceType != 0) {
        PriceType = other.PriceType;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.BidderCharacterName.Length != 0) {
        BidderCharacterName = other.BidderCharacterName;
      }
      receivecharactersName_.Add(other.receivecharactersName_);
      if (other.RemainTime != 0) {
        RemainTime = other.RemainTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            ItemID = input.ReadInt32();
            break;
          }
          case 24: {
            PriceType = input.ReadInt32();
            break;
          }
          case 32: {
            Price = input.ReadInt32();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
          case 50: {
            BidderCharacterName = input.ReadString();
            break;
          }
          case 58: {
            receivecharactersName_.AddEntriesFrom(input, _repeated_receivecharactersName_codec);
            break;
          }
          case 64: {
            RemainTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///出价公会拍卖物品
  /// </summary>
  public sealed partial class CS_NewPriceAuctionItem : pb::IMessage<CS_NewPriceAuctionItem> {
    private static readonly pb::MessageParser<CS_NewPriceAuctionItem> _parser = new pb::MessageParser<CS_NewPriceAuctionItem>(() => new CS_NewPriceAuctionItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_NewPriceAuctionItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_NewPriceAuctionItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_NewPriceAuctionItem(CS_NewPriceAuctionItem other) : this() {
      iD_ = other.iD_;
      price_ = other.price_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_NewPriceAuctionItem Clone() {
      return new CS_NewPriceAuctionItem(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///商品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 2;
    private int price_;
    /// <summary>
    ///价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_NewPriceAuctionItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_NewPriceAuctionItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Price != other.Price) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Price != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_NewPriceAuctionItem other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取公会地图信息
  /// </summary>
  public sealed partial class CS_GetGuildMapsInfo : pb::IMessage<CS_GetGuildMapsInfo> {
    private static readonly pb::MessageParser<CS_GetGuildMapsInfo> _parser = new pb::MessageParser<CS_GetGuildMapsInfo>(() => new CS_GetGuildMapsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GetGuildMapsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetGuildMapsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetGuildMapsInfo(CS_GetGuildMapsInfo other) : this() {
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetGuildMapsInfo Clone() {
      return new CS_GetGuildMapsInfo(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GetGuildMapsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GetGuildMapsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GetGuildMapsInfo other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回公会地图信息
  /// </summary>
  public sealed partial class SC_GetGuildMapsInfo : pb::IMessage<SC_GetGuildMapsInfo> {
    private static readonly pb::MessageParser<SC_GetGuildMapsInfo> _parser = new pb::MessageParser<SC_GetGuildMapsInfo>(() => new SC_GetGuildMapsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_GetGuildMapsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetGuildMapsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetGuildMapsInfo(SC_GetGuildMapsInfo other) : this() {
      maps_ = other.maps_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetGuildMapsInfo Clone() {
      return new SC_GetGuildMapsInfo(this);
    }

    /// <summary>Field number for the "Maps" field.</summary>
    public const int MapsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protomsg.GuildMapInfo> _repeated_maps_codec
        = pb::FieldCodec.ForMessage(10, global::Protomsg.GuildMapInfo.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.GuildMapInfo> maps_ = new pbc::RepeatedField<global::Protomsg.GuildMapInfo>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.GuildMapInfo> Maps {
      get { return maps_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_GetGuildMapsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_GetGuildMapsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!maps_.Equals(other.maps_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= maps_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      maps_.WriteTo(output, _repeated_maps_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += maps_.CalculateSize(_repeated_maps_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_GetGuildMapsInfo other) {
      if (other == null) {
        return;
      }
      maps_.Add(other.maps_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            maps_.AddEntriesFrom(input, _repeated_maps_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会地图信息
  /// </summary>
  public sealed partial class GuildMapInfo : pb::IMessage<GuildMapInfo> {
    private static readonly pb::MessageParser<GuildMapInfo> _parser = new pb::MessageParser<GuildMapInfo>(() => new GuildMapInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildMapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildMapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildMapInfo(GuildMapInfo other) : this() {
      iD_ = other.iD_;
      openMonthDay_ = other.openMonthDay_;
      openWeekDay_ = other.openWeekDay_;
      openStartTime_ = other.openStartTime_;
      openEndTime_ = other.openEndTime_;
      needGuildLevel_ = other.needGuildLevel_;
      nextSceneID_ = other.nextSceneID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildMapInfo Clone() {
      return new GuildMapInfo(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "OpenMonthDay" field.</summary>
    public const int OpenMonthDayFieldNumber = 2;
    private int openMonthDay_;
    /// <summary>
    ///在月份的几号开启    -1表示所有 10表示10号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpenMonthDay {
      get { return openMonthDay_; }
      set {
        openMonthDay_ = value;
      }
    }

    /// <summary>Field number for the "OpenWeekDay" field.</summary>
    public const int OpenWeekDayFieldNumber = 3;
    private string openWeekDay_ = "";
    /// <summary>
    ///在一周中的星期几开启 -1表示所有 5表示星期五
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenWeekDay {
      get { return openWeekDay_; }
      set {
        openWeekDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OpenStartTime" field.</summary>
    public const int OpenStartTimeFieldNumber = 4;
    private string openStartTime_ = "";
    /// <summary>
    ///开始时间 字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenStartTime {
      get { return openStartTime_; }
      set {
        openStartTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OpenEndTime" field.</summary>
    public const int OpenEndTimeFieldNumber = 5;
    private string openEndTime_ = "";
    /// <summary>
    ///结束时间 字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenEndTime {
      get { return openEndTime_; }
      set {
        openEndTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NeedGuildLevel" field.</summary>
    public const int NeedGuildLevelFieldNumber = 6;
    private int needGuildLevel_;
    /// <summary>
    ///需要的公会等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NeedGuildLevel {
      get { return needGuildLevel_; }
      set {
        needGuildLevel_ = value;
      }
    }

    /// <summary>Field number for the "NextSceneID" field.</summary>
    public const int NextSceneIDFieldNumber = 7;
    private int nextSceneID_;
    /// <summary>
    ///场景ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextSceneID {
      get { return nextSceneID_; }
      set {
        nextSceneID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildMapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildMapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (OpenMonthDay != other.OpenMonthDay) return false;
      if (OpenWeekDay != other.OpenWeekDay) return false;
      if (OpenStartTime != other.OpenStartTime) return false;
      if (OpenEndTime != other.OpenEndTime) return false;
      if (NeedGuildLevel != other.NeedGuildLevel) return false;
      if (NextSceneID != other.NextSceneID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (OpenMonthDay != 0) hash ^= OpenMonthDay.GetHashCode();
      if (OpenWeekDay.Length != 0) hash ^= OpenWeekDay.GetHashCode();
      if (OpenStartTime.Length != 0) hash ^= OpenStartTime.GetHashCode();
      if (OpenEndTime.Length != 0) hash ^= OpenEndTime.GetHashCode();
      if (NeedGuildLevel != 0) hash ^= NeedGuildLevel.GetHashCode();
      if (NextSceneID != 0) hash ^= NextSceneID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (OpenMonthDay != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OpenMonthDay);
      }
      if (OpenWeekDay.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OpenWeekDay);
      }
      if (OpenStartTime.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OpenStartTime);
      }
      if (OpenEndTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OpenEndTime);
      }
      if (NeedGuildLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NeedGuildLevel);
      }
      if (NextSceneID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NextSceneID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (OpenMonthDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpenMonthDay);
      }
      if (OpenWeekDay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenWeekDay);
      }
      if (OpenStartTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenStartTime);
      }
      if (OpenEndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenEndTime);
      }
      if (NeedGuildLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NeedGuildLevel);
      }
      if (NextSceneID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextSceneID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildMapInfo other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.OpenMonthDay != 0) {
        OpenMonthDay = other.OpenMonthDay;
      }
      if (other.OpenWeekDay.Length != 0) {
        OpenWeekDay = other.OpenWeekDay;
      }
      if (other.OpenStartTime.Length != 0) {
        OpenStartTime = other.OpenStartTime;
      }
      if (other.OpenEndTime.Length != 0) {
        OpenEndTime = other.OpenEndTime;
      }
      if (other.NeedGuildLevel != 0) {
        NeedGuildLevel = other.NeedGuildLevel;
      }
      if (other.NextSceneID != 0) {
        NextSceneID = other.NextSceneID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            OpenMonthDay = input.ReadInt32();
            break;
          }
          case 26: {
            OpenWeekDay = input.ReadString();
            break;
          }
          case 34: {
            OpenStartTime = input.ReadString();
            break;
          }
          case 42: {
            OpenEndTime = input.ReadString();
            break;
          }
          case 48: {
            NeedGuildLevel = input.ReadInt32();
            break;
          }
          case 56: {
            NextSceneID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///进入公会地图
  /// </summary>
  public sealed partial class CS_GotoGuildMap : pb::IMessage<CS_GotoGuildMap> {
    private static readonly pb::MessageParser<CS_GotoGuildMap> _parser = new pb::MessageParser<CS_GotoGuildMap>(() => new CS_GotoGuildMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GotoGuildMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GotoGuildMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GotoGuildMap(CS_GotoGuildMap other) : this() {
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GotoGuildMap Clone() {
      return new CS_GotoGuildMap(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///公会地图ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GotoGuildMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GotoGuildMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GotoGuildMap other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_GotoGuildMap : pb::IMessage<SC_GotoGuildMap> {
    private static readonly pb::MessageParser<SC_GotoGuildMap> _parser = new pb::MessageParser<SC_GotoGuildMap>(() => new SC_GotoGuildMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_GotoGuildMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GotoGuildMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GotoGuildMap(SC_GotoGuildMap other) : this() {
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GotoGuildMap Clone() {
      return new SC_GotoGuildMap(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    /// <summary>
    ///1表示成功 其他表示失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_GotoGuildMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_GotoGuildMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_GotoGuildMap other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取活动地图
  /// </summary>
  public sealed partial class CS_GetActivityMapsInfo : pb::IMessage<CS_GetActivityMapsInfo> {
    private static readonly pb::MessageParser<CS_GetActivityMapsInfo> _parser = new pb::MessageParser<CS_GetActivityMapsInfo>(() => new CS_GetActivityMapsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GetActivityMapsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetActivityMapsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetActivityMapsInfo(CS_GetActivityMapsInfo other) : this() {
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetActivityMapsInfo Clone() {
      return new CS_GetActivityMapsInfo(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GetActivityMapsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GetActivityMapsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GetActivityMapsInfo other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回活动地图信息
  /// </summary>
  public sealed partial class SC_GetActivityMapsInfo : pb::IMessage<SC_GetActivityMapsInfo> {
    private static readonly pb::MessageParser<SC_GetActivityMapsInfo> _parser = new pb::MessageParser<SC_GetActivityMapsInfo>(() => new SC_GetActivityMapsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_GetActivityMapsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetActivityMapsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetActivityMapsInfo(SC_GetActivityMapsInfo other) : this() {
      maps_ = other.maps_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetActivityMapsInfo Clone() {
      return new SC_GetActivityMapsInfo(this);
    }

    /// <summary>Field number for the "Maps" field.</summary>
    public const int MapsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protomsg.ActivityMapInfo> _repeated_maps_codec
        = pb::FieldCodec.ForMessage(10, global::Protomsg.ActivityMapInfo.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.ActivityMapInfo> maps_ = new pbc::RepeatedField<global::Protomsg.ActivityMapInfo>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.ActivityMapInfo> Maps {
      get { return maps_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_GetActivityMapsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_GetActivityMapsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!maps_.Equals(other.maps_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= maps_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      maps_.WriteTo(output, _repeated_maps_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += maps_.CalculateSize(_repeated_maps_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_GetActivityMapsInfo other) {
      if (other == null) {
        return;
      }
      maps_.Add(other.maps_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            maps_.AddEntriesFrom(input, _repeated_maps_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///活动地图信息
  /// </summary>
  public sealed partial class ActivityMapInfo : pb::IMessage<ActivityMapInfo> {
    private static readonly pb::MessageParser<ActivityMapInfo> _parser = new pb::MessageParser<ActivityMapInfo>(() => new ActivityMapInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityMapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityMapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityMapInfo(ActivityMapInfo other) : this() {
      iD_ = other.iD_;
      openMonthDay_ = other.openMonthDay_;
      openWeekDay_ = other.openWeekDay_;
      openStartTime_ = other.openStartTime_;
      openEndTime_ = other.openEndTime_;
      needLevel_ = other.needLevel_;
      nextSceneID_ = other.nextSceneID_;
      priceType_ = other.priceType_;
      price_ = other.price_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityMapInfo Clone() {
      return new ActivityMapInfo(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "OpenMonthDay" field.</summary>
    public const int OpenMonthDayFieldNumber = 2;
    private int openMonthDay_;
    /// <summary>
    ///在月份的几号开启    -1表示所有 10表示10号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpenMonthDay {
      get { return openMonthDay_; }
      set {
        openMonthDay_ = value;
      }
    }

    /// <summary>Field number for the "OpenWeekDay" field.</summary>
    public const int OpenWeekDayFieldNumber = 3;
    private string openWeekDay_ = "";
    /// <summary>
    ///在一周中的星期几开启 -1表示所有 5表示星期五
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenWeekDay {
      get { return openWeekDay_; }
      set {
        openWeekDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OpenStartTime" field.</summary>
    public const int OpenStartTimeFieldNumber = 4;
    private string openStartTime_ = "";
    /// <summary>
    ///开始时间 字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenStartTime {
      get { return openStartTime_; }
      set {
        openStartTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OpenEndTime" field.</summary>
    public const int OpenEndTimeFieldNumber = 5;
    private string openEndTime_ = "";
    /// <summary>
    ///结束时间 字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenEndTime {
      get { return openEndTime_; }
      set {
        openEndTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NeedLevel" field.</summary>
    public const int NeedLevelFieldNumber = 6;
    private int needLevel_;
    /// <summary>
    ///需要的公会等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NeedLevel {
      get { return needLevel_; }
      set {
        needLevel_ = value;
      }
    }

    /// <summary>Field number for the "NextSceneID" field.</summary>
    public const int NextSceneIDFieldNumber = 7;
    private int nextSceneID_;
    /// <summary>
    ///场景ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextSceneID {
      get { return nextSceneID_; }
      set {
        nextSceneID_ = value;
      }
    }

    /// <summary>Field number for the "PriceType" field.</summary>
    public const int PriceTypeFieldNumber = 8;
    private int priceType_;
    /// <summary>
    ///价格类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PriceType {
      get { return priceType_; }
      set {
        priceType_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 9;
    private int price_;
    /// <summary>
    /// 价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivityMapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivityMapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (OpenMonthDay != other.OpenMonthDay) return false;
      if (OpenWeekDay != other.OpenWeekDay) return false;
      if (OpenStartTime != other.OpenStartTime) return false;
      if (OpenEndTime != other.OpenEndTime) return false;
      if (NeedLevel != other.NeedLevel) return false;
      if (NextSceneID != other.NextSceneID) return false;
      if (PriceType != other.PriceType) return false;
      if (Price != other.Price) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (OpenMonthDay != 0) hash ^= OpenMonthDay.GetHashCode();
      if (OpenWeekDay.Length != 0) hash ^= OpenWeekDay.GetHashCode();
      if (OpenStartTime.Length != 0) hash ^= OpenStartTime.GetHashCode();
      if (OpenEndTime.Length != 0) hash ^= OpenEndTime.GetHashCode();
      if (NeedLevel != 0) hash ^= NeedLevel.GetHashCode();
      if (NextSceneID != 0) hash ^= NextSceneID.GetHashCode();
      if (PriceType != 0) hash ^= PriceType.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (OpenMonthDay != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OpenMonthDay);
      }
      if (OpenWeekDay.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OpenWeekDay);
      }
      if (OpenStartTime.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OpenStartTime);
      }
      if (OpenEndTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OpenEndTime);
      }
      if (NeedLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NeedLevel);
      }
      if (NextSceneID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NextSceneID);
      }
      if (PriceType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PriceType);
      }
      if (Price != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (OpenMonthDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpenMonthDay);
      }
      if (OpenWeekDay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenWeekDay);
      }
      if (OpenStartTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenStartTime);
      }
      if (OpenEndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenEndTime);
      }
      if (NeedLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NeedLevel);
      }
      if (NextSceneID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextSceneID);
      }
      if (PriceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PriceType);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivityMapInfo other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.OpenMonthDay != 0) {
        OpenMonthDay = other.OpenMonthDay;
      }
      if (other.OpenWeekDay.Length != 0) {
        OpenWeekDay = other.OpenWeekDay;
      }
      if (other.OpenStartTime.Length != 0) {
        OpenStartTime = other.OpenStartTime;
      }
      if (other.OpenEndTime.Length != 0) {
        OpenEndTime = other.OpenEndTime;
      }
      if (other.NeedLevel != 0) {
        NeedLevel = other.NeedLevel;
      }
      if (other.NextSceneID != 0) {
        NextSceneID = other.NextSceneID;
      }
      if (other.PriceType != 0) {
        PriceType = other.PriceType;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            OpenMonthDay = input.ReadInt32();
            break;
          }
          case 26: {
            OpenWeekDay = input.ReadString();
            break;
          }
          case 34: {
            OpenStartTime = input.ReadString();
            break;
          }
          case 42: {
            OpenEndTime = input.ReadString();
            break;
          }
          case 48: {
            NeedLevel = input.ReadInt32();
            break;
          }
          case 56: {
            NextSceneID = input.ReadInt32();
            break;
          }
          case 64: {
            PriceType = input.ReadInt32();
            break;
          }
          case 72: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取地图信息包括boss刷新时间和掉落道具
  /// </summary>
  public sealed partial class CS_GetMapInfo : pb::IMessage<CS_GetMapInfo> {
    private static readonly pb::MessageParser<CS_GetMapInfo> _parser = new pb::MessageParser<CS_GetMapInfo>(() => new CS_GetMapInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GetMapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetMapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetMapInfo(CS_GetMapInfo other) : this() {
      sceneID_ = other.sceneID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetMapInfo Clone() {
      return new CS_GetMapInfo(this);
    }

    /// <summary>Field number for the "SceneID" field.</summary>
    public const int SceneIDFieldNumber = 1;
    private int sceneID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneID {
      get { return sceneID_; }
      set {
        sceneID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GetMapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GetMapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneID != other.SceneID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneID != 0) hash ^= SceneID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SceneID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SceneID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GetMapInfo other) {
      if (other == null) {
        return;
      }
      if (other.SceneID != 0) {
        SceneID = other.SceneID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SceneID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回地图信息
  /// </summary>
  public sealed partial class SC_GetMapInfo : pb::IMessage<SC_GetMapInfo> {
    private static readonly pb::MessageParser<SC_GetMapInfo> _parser = new pb::MessageParser<SC_GetMapInfo>(() => new SC_GetMapInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_GetMapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetMapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetMapInfo(SC_GetMapInfo other) : this() {
      sceneID_ = other.sceneID_;
      bossFreshTime_ = other.bossFreshTime_;
      dropItems_ = other.dropItems_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GetMapInfo Clone() {
      return new SC_GetMapInfo(this);
    }

    /// <summary>Field number for the "SceneID" field.</summary>
    public const int SceneIDFieldNumber = 1;
    private int sceneID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneID {
      get { return sceneID_; }
      set {
        sceneID_ = value;
      }
    }

    /// <summary>Field number for the "BossFreshTime" field.</summary>
    public const int BossFreshTimeFieldNumber = 2;
    private int bossFreshTime_;
    /// <summary>
    ///boss刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BossFreshTime {
      get { return bossFreshTime_; }
      set {
        bossFreshTime_ = value;
      }
    }

    /// <summary>Field number for the "DropItems" field.</summary>
    public const int DropItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_dropItems_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> dropItems_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///掉落道具类型ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DropItems {
      get { return dropItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_GetMapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_GetMapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneID != other.SceneID) return false;
      if (BossFreshTime != other.BossFreshTime) return false;
      if(!dropItems_.Equals(other.dropItems_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneID != 0) hash ^= SceneID.GetHashCode();
      if (BossFreshTime != 0) hash ^= BossFreshTime.GetHashCode();
      hash ^= dropItems_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SceneID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SceneID);
      }
      if (BossFreshTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BossFreshTime);
      }
      dropItems_.WriteTo(output, _repeated_dropItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneID);
      }
      if (BossFreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossFreshTime);
      }
      size += dropItems_.CalculateSize(_repeated_dropItems_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_GetMapInfo other) {
      if (other == null) {
        return;
      }
      if (other.SceneID != 0) {
        SceneID = other.SceneID;
      }
      if (other.BossFreshTime != 0) {
        BossFreshTime = other.BossFreshTime;
      }
      dropItems_.Add(other.dropItems_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SceneID = input.ReadInt32();
            break;
          }
          case 16: {
            BossFreshTime = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            dropItems_.AddEntriesFrom(input, _repeated_dropItems_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///进入活动地图
  /// </summary>
  public sealed partial class CS_GotoActivityMap : pb::IMessage<CS_GotoActivityMap> {
    private static readonly pb::MessageParser<CS_GotoActivityMap> _parser = new pb::MessageParser<CS_GotoActivityMap>(() => new CS_GotoActivityMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GotoActivityMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GotoActivityMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GotoActivityMap(CS_GotoActivityMap other) : this() {
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GotoActivityMap Clone() {
      return new CS_GotoActivityMap(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///活动地图ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GotoActivityMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GotoActivityMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GotoActivityMap other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_GotoActivityMap : pb::IMessage<SC_GotoActivityMap> {
    private static readonly pb::MessageParser<SC_GotoActivityMap> _parser = new pb::MessageParser<SC_GotoActivityMap>(() => new SC_GotoActivityMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_GotoActivityMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GotoActivityMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GotoActivityMap(SC_GotoActivityMap other) : this() {
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_GotoActivityMap Clone() {
      return new SC_GotoActivityMap(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    /// <summary>
    ///1表示成功 其他表示失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_GotoActivityMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_GotoActivityMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_GotoActivityMap other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
