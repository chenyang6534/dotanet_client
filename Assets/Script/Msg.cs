// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protobuf/msg.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protomsg {

  /// <summary>Holder for reflection information generated from protobuf/msg.proto</summary>
  public static partial class MsgReflection {

    #region Descriptor
    /// <summary>File descriptor for protobuf/msg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJwcm90b2J1Zi9tc2cucHJvdG8SCHByb3RvbXNnIlsKB01zZ0Jhc2USEAoI",
            "TW9kZVR5cGUYASABKAkSCwoDVWlkGAIgASgFEg8KB01zZ1R5cGUYAyABKAkS",
            "EQoJQ29ubmVjdElkGAQgASgFEg0KBURhdGFzGAUgASgMIiUKEU1zZ1JlZ2lz",
            "dGVyVG9HYXRlEhAKCE1vZGVUeXBlGAEgASgJIkUKEENTX01zZ1F1aWNrTG9n",
            "aW4SEAoIUGxhdGZvcm0YASABKAkSEQoJTWFjaGluZWlkGAIgASgJEgwKBE5h",
            "bWUYAyABKAkiZgoIQ1NfTG9naW4SEwoLUGhvbmVudW1iZXIYASABKAkSEAoI",
            "UGxhdGZvcm0YAiABKAkSEQoJTWFjaGluZWlkGAMgASgJEhEKCVdlY2hhdF9p",
            "ZBgEIAEoCRINCgVRUV9pZBgFIAEoCSJLChJDU19TZWxlY3RDaGFyYWN0ZXIS",
            "NQoPU2VsZWN0Q2hhcmFjdGVyGAEgASgLMhwucHJvdG9tc2cuQ2hhcmFjdGVy",
            "QmFzZURhdGFzIigKCVVuaXRFcXVpcBILCgNQb3MYASABKAUSDgoGVHlwZElE",
            "GAIgASgFIo8DCg5Vbml0Qm9hcmREYXRhcxIKCgJJRBgBIAEoBRIMCgROYW1l",
            "GAIgASgJEhkKEUF0dHJpYnV0ZVN0cmVuZ3RoGAMgASgCEhgKEEF0dHJpYnV0",
            "ZUFnaWxpdHkYBCABKAISHQoVQXR0cmlidXRlSW50ZWxsaWdlbmNlGAUgASgC",
            "Eg4KBkF0dGFjaxgGIAEoBRITCgtBdHRhY2tTcGVlZBgHIAEoAhITCgtBdHRh",
            "Y2tSYW5nZRgIIAEoAhIRCglNb3ZlU3BlZWQYCSABKAISEgoKTWFnaWNTY2Fs",
            "ZRgKIAEoAhIQCghNUFJlZ2FpbhgLIAEoAhIVCg1QaHlzaWNhbEFtYW9yGAwg",
            "ASgCEhYKDlBoeXNpY2FsUmVzaXN0GA0gASgCEhIKCk1hZ2ljQW1hb3IYDiAB",
            "KAISEwoLU3RhdHVzQW1hb3IYDyABKAISDQoFRG9kZ2UYECABKAISEAoISFBS",
            "ZWdhaW4YESABKAISIwoGRXF1aXBzGBIgAygLMhMucHJvdG9tc2cuVW5pdEVx",
            "dWlwIiAKDkNTX0dldFVuaXRJbmZvEg4KBlVuaXRJRBgBIAEoBSIfCg1DU19H",
            "ZXRCYWdJbmZvEg4KBlVuaXRJRBgBIAEoBSI5CgtTQ19Vbml0SW5mbxIqCghV",
            "bml0RGF0YRgBIAEoCzIYLnByb3RvbXNnLlVuaXRCb2FyZERhdGFzIkMKDUNT",
            "X1BsYXllck1vdmUSCwoDSURzGAEgAygFEgkKAVgYAiABKAISCQoBWRgDIAEo",
            "AhIPCgdJc1N0YXJ0GAQgASgIIjQKD0NTX1BsYXllckF0dGFjaxILCgNJRHMY",
            "ASADKAUSFAoMVGFyZ2V0VW5pdElEGAIgASgFIlkKDkNTX1BsYXllclNraWxs",
            "EgoKAklEGAEgASgFEg8KB1NraWxsSUQYAiABKAUSCQoBWBgDIAEoAhIJCgFZ",
            "GAQgASgCEhQKDFRhcmdldFVuaXRJRBgFIAEoBSLoAgoKU2tpbGxEYXRhcxIO",
            "CgZUeXBlSUQYASABKAUSDQoFTGV2ZWwYAiABKAUSFAoMUmVtYWluQ0RUaW1l",
            "GAMgASgCEhIKCkNhblVwZ3JhZGUYBCABKAUSDQoFSW5kZXgYBSABKAUSEAoI",
            "Q2FzdFR5cGUYBiABKAUSFgoOQ2FzdFRhcmdldFR5cGUYByABKAUSFgoOVW5p",
            "dFRhcmdldFRlYW0YCCABKAUSFgoOVW5pdFRhcmdldENhbXAYCSABKAUSGQoR",
            "Tm9DYXJlTWFnaWNJbW11bmUYCiABKAUSEQoJQ2FzdFJhbmdlGAsgASgCEhAK",
            "CENvb2xkb3duGAwgASgCEhEKCUh1cnRSYW5nZRgNIAEoAhIQCghNYW5hQ29z",
            "dBgOIAEoBRIYChBBdHRhY2tBdXRvQWN0aXZlGA8gASgFEg8KB1Zpc2libGUY",
            "ECABKAUSGAoQUmVtYWluU2tpbGxDb3VudBgRIAEoBSKkAQoJQnVmZkRhdGFz",
            "Eg4KBlR5cGVJRBgBIAEoBRISCgpSZW1haW5UaW1lGAIgASgCEgwKBFRpbWUY",
            "AyABKAISDgoGVGFnTnVtGAQgASgFEhYKDkNvbm5lY3Rpb25UeXBlGAUgASgF",
            "EhMKC0Nvbm5lY3Rpb25YGAYgASgCEhMKC0Nvbm5lY3Rpb25ZGAcgASgCEhMK",
            "C0Nvbm5lY3Rpb25aGAggASgCIoUFCglVbml0RGF0YXMSDAoETmFtZRgBIAEo",
            "CRINCgVMZXZlbBgCIAEoBRIKCgJIUBgDIAEoBRIKCgJNUBgEIAEoBRIJCgFY",
            "GAUgASgCEgkKAVkYBiABKAISCgoCSUQYByABKAUSEAoITW9kZVR5cGUYCCAB",
            "KAkSDQoFTWF4SFAYCSABKAUSDQoFTWF4TVAYCiABKAUSEgoKRXhwZXJpZW5j",
            "ZRgLIAEoBRIVCg1NYXhFeHBlcmllbmNlGAwgASgFEhEKCUNvbnRyb2xJRBgN",
            "IAEoBRIVCg1Bbmltb3RvclN0YXRlGA4gASgFEhIKCkF0dGFja1RpbWUYDyAB",
            "KAISEgoKRGlyZWN0aW9uWBgQIAEoAhISCgpEaXJlY3Rpb25ZGBEgASgCEhAK",
            "CFVuaXRUeXBlGBIgASgFEhoKEkF0dGFja0FjcGFiaWxpdGllcxgTIAEoBRIS",
            "CgpBdHRhY2tNb2RlGBQgASgFEg4KBklzTWFpbhgVIAEoBRIPCgdJc0RlYXRo",
            "GBYgASgFEhEKCUludmlzaWJsZRgXIAEoBRIMCgRDYW1wGBggASgFEg4KBklz",
            "TWlzcxgZIAEoCBIVCg1Bbmltb3RvclBhdXNlGBogASgFEhMKC1NraWxsRW5h",
            "YmxlGBsgASgFEhIKCkl0ZW1FbmFibGUYHCABKAUSCQoBWhgdIAEoAhIVCg1J",
            "c01pcnJvckltYWdlGB4gASgFEhMKC0F0dGFja1JhbmdlGB8gASgCEhIKCkF0",
            "dGFja0FuaW0YICABKAUSIAoCU0QYISADKAsyFC5wcm90b21zZy5Ta2lsbERh",
            "dGFzEh8KAkJEGCIgAygLMhMucHJvdG9tc2cuQnVmZkRhdGFzIrUBCgtCdWxs",
            "ZXREYXRhcxIKCgJJRBgBIAEoBRIQCghNb2RlVHlwZRgCIAEoCRIJCgFYGAMg",
            "ASgCEgkKAVkYBCABKAISCQoBWhgFIAEoAhINCgVTdGF0ZRgGIAEoBRIOCgZT",
            "dGFydFgYByABKAISDgoGU3RhcnRZGAggASgCEg4KBlN0YXJ0WhgJIAEoAhIM",
            "CgRFbmRYGAogASgCEgwKBEVuZFkYCyABKAISDAoERW5kWhgMIAEoAiJCCg5T",
            "Y2VuZUl0ZW1EYXRhcxIKCgJJRBgBIAEoBRIOCgZUeXBlSUQYAiABKAUSCQoB",
            "WBgDIAEoAhIJCgFZGAQgASgCIkoKCUhhbG9EYXRhcxIKCgJJRBgBIAEoBRIQ",
            "CghNb2RlVHlwZRgCIAEoCRIJCgFYGAMgASgCEgkKAVkYBCABKAISCQoBWhgF",
            "IAEoAiKCAQoRTXNnVXNlckVudGVyU2NlbmUSCwoDVWlkGAEgASgFEhEKCUNv",
            "bm5lY3RJZBgCIAEoBRIVCg1TcmNTZXJ2ZXJOYW1lGAMgASgJEhYKDkRlc3RT",
            "ZXJ2ZXJOYW1lGAQgASgJEg8KB1NjZW5lSUQYBSABKAUSDQoFRGF0YXMYBiAB",
            "KAwiYQoNTXNnUGxheWVySHVydBISCgpIdXJ0VW5pdElEGAEgASgFEhQKDEh1",
            "cnRBbGxWYWx1ZRgCIAEoBRIWCg5IdXJ0TWFnaWNWYWx1ZRgDIAEoBRIOCgZJ",
            "c0NyaXQYBCABKAUiyAMKCVNDX1VwZGF0ZRIQCghDdXJGcmFtZRgBIAEoBRIl",
            "CghOZXdVbml0cxgCIAMoCzITLnByb3RvbXNnLlVuaXREYXRhcxIlCghPbGRV",
            "bml0cxgDIAMoCzITLnByb3RvbXNnLlVuaXREYXRhcxITCgtSZW1vdmVVbml0",
            "cxgEIAMoBRIpCgpOZXdCdWxsZXRzGAUgAygLMhUucHJvdG9tc2cuQnVsbGV0",
            "RGF0YXMSKQoKT2xkQnVsbGV0cxgGIAMoCzIVLnByb3RvbXNnLkJ1bGxldERh",
            "dGFzEhUKDVJlbW92ZUJ1bGxldHMYByADKAUSJQoITmV3SGFsb3MYCCADKAsy",
            "Ey5wcm90b21zZy5IYWxvRGF0YXMSJQoIT2xkSGFsb3MYCSADKAsyEy5wcm90",
            "b21zZy5IYWxvRGF0YXMSEwoLUmVtb3ZlSGFsb3MYCiADKAUSLwoNTmV3U2Nl",
            "bmVJdGVtcxgLIAMoCzIYLnByb3RvbXNnLlNjZW5lSXRlbURhdGFzEhgKEFJl",
            "bW92ZVNjZW5lSXRlbXMYDCADKAUSKwoKUGxheWVySHVydBgNIAMoCzIXLnBy",
            "b3RvbXNnLk1zZ1BsYXllckh1cnQiUwoLU0NfTmV3U2NlbmUSDAoETmFtZRgB",
            "IAEoCRIQCghMb2dpY0ZwcxgCIAEoBRIQCghDdXJGcmFtZRgDIAEoBRISCgpT",
            "ZXJ2ZXJOYW1lGAQgASgJIlYKEkNoYXJhY3RlckJhc2VEYXRhcxITCgtDaGFy",
            "YWN0ZXJpZBgBIAEoBRIMCgROYW1lGAIgASgJEg4KBlR5cGVpZBgDIAEoBRIN",
            "CgVMZXZlbBgEIAEoBSJoCgpTQ19Mb2dpbmVkEgwKBENvZGUYASABKAUSCwoD",
            "VWlkGAIgASgFEg0KBUVycm9yGAMgASgJEjAKCkNoYXJhY3RlcnMYBCADKAsy",
            "HC5wcm90b21zZy5DaGFyYWN0ZXJCYXNlRGF0YXMiTAoYU0NfU2VsZWN0Q2hh",
            "cmFjdGVyUmVzdWx0EgwKBENvZGUYASABKAUSEwoLQ2hhcmFjdGVyaWQYAiAB",
            "KAUSDQoFRXJyb3IYAyABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.MsgBase), global::Protomsg.MsgBase.Parser, new[]{ "ModeType", "Uid", "MsgType", "ConnectId", "Datas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.MsgRegisterToGate), global::Protomsg.MsgRegisterToGate.Parser, new[]{ "ModeType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_MsgQuickLogin), global::Protomsg.CS_MsgQuickLogin.Parser, new[]{ "Platform", "Machineid", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_Login), global::Protomsg.CS_Login.Parser, new[]{ "Phonenumber", "Platform", "Machineid", "WechatId", "QQId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_SelectCharacter), global::Protomsg.CS_SelectCharacter.Parser, new[]{ "SelectCharacter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.UnitEquip), global::Protomsg.UnitEquip.Parser, new[]{ "Pos", "TypdID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.UnitBoardDatas), global::Protomsg.UnitBoardDatas.Parser, new[]{ "ID", "Name", "AttributeStrength", "AttributeAgility", "AttributeIntelligence", "Attack", "AttackSpeed", "AttackRange", "MoveSpeed", "MagicScale", "MPRegain", "PhysicalAmaor", "PhysicalResist", "MagicAmaor", "StatusAmaor", "Dodge", "HPRegain", "Equips" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GetUnitInfo), global::Protomsg.CS_GetUnitInfo.Parser, new[]{ "UnitID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_GetBagInfo), global::Protomsg.CS_GetBagInfo.Parser, new[]{ "UnitID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_UnitInfo), global::Protomsg.SC_UnitInfo.Parser, new[]{ "UnitData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_PlayerMove), global::Protomsg.CS_PlayerMove.Parser, new[]{ "IDs", "X", "Y", "IsStart" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_PlayerAttack), global::Protomsg.CS_PlayerAttack.Parser, new[]{ "IDs", "TargetUnitID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CS_PlayerSkill), global::Protomsg.CS_PlayerSkill.Parser, new[]{ "ID", "SkillID", "X", "Y", "TargetUnitID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SkillDatas), global::Protomsg.SkillDatas.Parser, new[]{ "TypeID", "Level", "RemainCDTime", "CanUpgrade", "Index", "CastType", "CastTargetType", "UnitTargetTeam", "UnitTargetCamp", "NoCareMagicImmune", "CastRange", "Cooldown", "HurtRange", "ManaCost", "AttackAutoActive", "Visible", "RemainSkillCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.BuffDatas), global::Protomsg.BuffDatas.Parser, new[]{ "TypeID", "RemainTime", "Time", "TagNum", "ConnectionType", "ConnectionX", "ConnectionY", "ConnectionZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.UnitDatas), global::Protomsg.UnitDatas.Parser, new[]{ "Name", "Level", "HP", "MP", "X", "Y", "ID", "ModeType", "MaxHP", "MaxMP", "Experience", "MaxExperience", "ControlID", "AnimotorState", "AttackTime", "DirectionX", "DirectionY", "UnitType", "AttackAcpabilities", "AttackMode", "IsMain", "IsDeath", "Invisible", "Camp", "IsMiss", "AnimotorPause", "SkillEnable", "ItemEnable", "Z", "IsMirrorImage", "AttackRange", "AttackAnim", "SD", "BD" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.BulletDatas), global::Protomsg.BulletDatas.Parser, new[]{ "ID", "ModeType", "X", "Y", "Z", "State", "StartX", "StartY", "StartZ", "EndX", "EndY", "EndZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SceneItemDatas), global::Protomsg.SceneItemDatas.Parser, new[]{ "ID", "TypeID", "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.HaloDatas), global::Protomsg.HaloDatas.Parser, new[]{ "ID", "ModeType", "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.MsgUserEnterScene), global::Protomsg.MsgUserEnterScene.Parser, new[]{ "Uid", "ConnectId", "SrcServerName", "DestServerName", "SceneID", "Datas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.MsgPlayerHurt), global::Protomsg.MsgPlayerHurt.Parser, new[]{ "HurtUnitID", "HurtAllValue", "HurtMagicValue", "IsCrit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_Update), global::Protomsg.SC_Update.Parser, new[]{ "CurFrame", "NewUnits", "OldUnits", "RemoveUnits", "NewBullets", "OldBullets", "RemoveBullets", "NewHalos", "OldHalos", "RemoveHalos", "NewSceneItems", "RemoveSceneItems", "PlayerHurt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_NewScene), global::Protomsg.SC_NewScene.Parser, new[]{ "Name", "LogicFps", "CurFrame", "ServerName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.CharacterBaseDatas), global::Protomsg.CharacterBaseDatas.Parser, new[]{ "Characterid", "Name", "Typeid", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_Logined), global::Protomsg.SC_Logined.Parser, new[]{ "Code", "Uid", "Error", "Characters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protomsg.SC_SelectCharacterResult), global::Protomsg.SC_SelectCharacterResult.Parser, new[]{ "Code", "Characterid", "Error" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MsgBase : pb::IMessage<MsgBase> {
    private static readonly pb::MessageParser<MsgBase> _parser = new pb::MessageParser<MsgBase>(() => new MsgBase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBase(MsgBase other) : this() {
      modeType_ = other.modeType_;
      uid_ = other.uid_;
      msgType_ = other.msgType_;
      connectId_ = other.connectId_;
      datas_ = other.datas_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBase Clone() {
      return new MsgBase(this);
    }

    /// <summary>Field number for the "ModeType" field.</summary>
    public const int ModeTypeFieldNumber = 1;
    private string modeType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModeType {
      get { return modeType_; }
      set {
        modeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 2;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 3;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ConnectId" field.</summary>
    public const int ConnectIdFieldNumber = 4;
    private int connectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConnectId {
      get { return connectId_; }
      set {
        connectId_ = value;
      }
    }

    /// <summary>Field number for the "Datas" field.</summary>
    public const int DatasFieldNumber = 5;
    private pb::ByteString datas_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Datas {
      get { return datas_; }
      set {
        datas_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModeType != other.ModeType) return false;
      if (Uid != other.Uid) return false;
      if (MsgType != other.MsgType) return false;
      if (ConnectId != other.ConnectId) return false;
      if (Datas != other.Datas) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModeType.Length != 0) hash ^= ModeType.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (ConnectId != 0) hash ^= ConnectId.GetHashCode();
      if (Datas.Length != 0) hash ^= Datas.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModeType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ModeType);
      }
      if (Uid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Uid);
      }
      if (MsgType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MsgType);
      }
      if (ConnectId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ConnectId);
      }
      if (Datas.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Datas);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModeType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModeType);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (MsgType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (ConnectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConnectId);
      }
      if (Datas.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Datas);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgBase other) {
      if (other == null) {
        return;
      }
      if (other.ModeType.Length != 0) {
        ModeType = other.ModeType;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.ConnectId != 0) {
        ConnectId = other.ConnectId;
      }
      if (other.Datas.Length != 0) {
        Datas = other.Datas;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ModeType = input.ReadString();
            break;
          }
          case 16: {
            Uid = input.ReadInt32();
            break;
          }
          case 26: {
            MsgType = input.ReadString();
            break;
          }
          case 32: {
            ConnectId = input.ReadInt32();
            break;
          }
          case 42: {
            Datas = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgRegisterToGate : pb::IMessage<MsgRegisterToGate> {
    private static readonly pb::MessageParser<MsgRegisterToGate> _parser = new pb::MessageParser<MsgRegisterToGate>(() => new MsgRegisterToGate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgRegisterToGate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgRegisterToGate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgRegisterToGate(MsgRegisterToGate other) : this() {
      modeType_ = other.modeType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgRegisterToGate Clone() {
      return new MsgRegisterToGate(this);
    }

    /// <summary>Field number for the "ModeType" field.</summary>
    public const int ModeTypeFieldNumber = 1;
    private string modeType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModeType {
      get { return modeType_; }
      set {
        modeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgRegisterToGate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgRegisterToGate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModeType != other.ModeType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModeType.Length != 0) hash ^= ModeType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModeType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ModeType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModeType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModeType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgRegisterToGate other) {
      if (other == null) {
        return;
      }
      if (other.ModeType.Length != 0) {
        ModeType = other.ModeType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ModeType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CS_MsgQuickLogin : pb::IMessage<CS_MsgQuickLogin> {
    private static readonly pb::MessageParser<CS_MsgQuickLogin> _parser = new pb::MessageParser<CS_MsgQuickLogin>(() => new CS_MsgQuickLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_MsgQuickLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_MsgQuickLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_MsgQuickLogin(CS_MsgQuickLogin other) : this() {
      platform_ = other.platform_;
      machineid_ = other.machineid_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_MsgQuickLogin Clone() {
      return new CS_MsgQuickLogin(this);
    }

    /// <summary>Field number for the "Platform" field.</summary>
    public const int PlatformFieldNumber = 1;
    private string platform_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Machineid" field.</summary>
    public const int MachineidFieldNumber = 2;
    private string machineid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Machineid {
      get { return machineid_; }
      set {
        machineid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_MsgQuickLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_MsgQuickLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Platform != other.Platform) return false;
      if (Machineid != other.Machineid) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (Machineid.Length != 0) hash ^= Machineid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Platform.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Platform);
      }
      if (Machineid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Machineid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (Machineid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Machineid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_MsgQuickLogin other) {
      if (other == null) {
        return;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.Machineid.Length != 0) {
        Machineid = other.Machineid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Platform = input.ReadString();
            break;
          }
          case 18: {
            Machineid = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CS_Login : pb::IMessage<CS_Login> {
    private static readonly pb::MessageParser<CS_Login> _parser = new pb::MessageParser<CS_Login>(() => new CS_Login());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Login> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Login() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Login(CS_Login other) : this() {
      phonenumber_ = other.phonenumber_;
      platform_ = other.platform_;
      machineid_ = other.machineid_;
      wechatId_ = other.wechatId_;
      qQId_ = other.qQId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Login Clone() {
      return new CS_Login(this);
    }

    /// <summary>Field number for the "Phonenumber" field.</summary>
    public const int PhonenumberFieldNumber = 1;
    private string phonenumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phonenumber {
      get { return phonenumber_; }
      set {
        phonenumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Platform" field.</summary>
    public const int PlatformFieldNumber = 2;
    private string platform_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Machineid" field.</summary>
    public const int MachineidFieldNumber = 3;
    private string machineid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Machineid {
      get { return machineid_; }
      set {
        machineid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Wechat_id" field.</summary>
    public const int WechatIdFieldNumber = 4;
    private string wechatId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WechatId {
      get { return wechatId_; }
      set {
        wechatId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "QQ_id" field.</summary>
    public const int QQIdFieldNumber = 5;
    private string qQId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QQId {
      get { return qQId_; }
      set {
        qQId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Login);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Login other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Phonenumber != other.Phonenumber) return false;
      if (Platform != other.Platform) return false;
      if (Machineid != other.Machineid) return false;
      if (WechatId != other.WechatId) return false;
      if (QQId != other.QQId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Phonenumber.Length != 0) hash ^= Phonenumber.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (Machineid.Length != 0) hash ^= Machineid.GetHashCode();
      if (WechatId.Length != 0) hash ^= WechatId.GetHashCode();
      if (QQId.Length != 0) hash ^= QQId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Phonenumber.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Phonenumber);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Platform);
      }
      if (Machineid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Machineid);
      }
      if (WechatId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WechatId);
      }
      if (QQId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(QQId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Phonenumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phonenumber);
      }
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (Machineid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Machineid);
      }
      if (WechatId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WechatId);
      }
      if (QQId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QQId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Login other) {
      if (other == null) {
        return;
      }
      if (other.Phonenumber.Length != 0) {
        Phonenumber = other.Phonenumber;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.Machineid.Length != 0) {
        Machineid = other.Machineid;
      }
      if (other.WechatId.Length != 0) {
        WechatId = other.WechatId;
      }
      if (other.QQId.Length != 0) {
        QQId = other.QQId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Phonenumber = input.ReadString();
            break;
          }
          case 18: {
            Platform = input.ReadString();
            break;
          }
          case 26: {
            Machineid = input.ReadString();
            break;
          }
          case 34: {
            WechatId = input.ReadString();
            break;
          }
          case 42: {
            QQId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登录成功后的 选择角色
  /// </summary>
  public sealed partial class CS_SelectCharacter : pb::IMessage<CS_SelectCharacter> {
    private static readonly pb::MessageParser<CS_SelectCharacter> _parser = new pb::MessageParser<CS_SelectCharacter>(() => new CS_SelectCharacter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_SelectCharacter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_SelectCharacter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_SelectCharacter(CS_SelectCharacter other) : this() {
      selectCharacter_ = other.selectCharacter_ != null ? other.selectCharacter_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_SelectCharacter Clone() {
      return new CS_SelectCharacter(this);
    }

    /// <summary>Field number for the "SelectCharacter" field.</summary>
    public const int SelectCharacterFieldNumber = 1;
    private global::Protomsg.CharacterBaseDatas selectCharacter_;
    /// <summary>
    ///选择角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protomsg.CharacterBaseDatas SelectCharacter {
      get { return selectCharacter_; }
      set {
        selectCharacter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_SelectCharacter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_SelectCharacter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SelectCharacter, other.SelectCharacter)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selectCharacter_ != null) hash ^= SelectCharacter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selectCharacter_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SelectCharacter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selectCharacter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectCharacter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_SelectCharacter other) {
      if (other == null) {
        return;
      }
      if (other.selectCharacter_ != null) {
        if (selectCharacter_ == null) {
          selectCharacter_ = new global::Protomsg.CharacterBaseDatas();
        }
        SelectCharacter.MergeFrom(other.SelectCharacter);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selectCharacter_ == null) {
              selectCharacter_ = new global::Protomsg.CharacterBaseDatas();
            }
            input.ReadMessage(selectCharacter_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///装备栏
  /// </summary>
  public sealed partial class UnitEquip : pb::IMessage<UnitEquip> {
    private static readonly pb::MessageParser<UnitEquip> _parser = new pb::MessageParser<UnitEquip>(() => new UnitEquip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitEquip(UnitEquip other) : this() {
      pos_ = other.pos_;
      typdID_ = other.typdID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitEquip Clone() {
      return new UnitEquip(this);
    }

    /// <summary>Field number for the "Pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "TypdID" field.</summary>
    public const int TypdIDFieldNumber = 2;
    private int typdID_;
    /// <summary>
    ///类型id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypdID {
      get { return typdID_; }
      set {
        typdID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnitEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnitEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (TypdID != other.TypdID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (TypdID != 0) hash ^= TypdID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (TypdID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TypdID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (TypdID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypdID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnitEquip other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.TypdID != 0) {
        TypdID = other.TypdID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 16: {
            TypdID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单位面板详细信息
  /// </summary>
  public sealed partial class UnitBoardDatas : pb::IMessage<UnitBoardDatas> {
    private static readonly pb::MessageParser<UnitBoardDatas> _parser = new pb::MessageParser<UnitBoardDatas>(() => new UnitBoardDatas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitBoardDatas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitBoardDatas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitBoardDatas(UnitBoardDatas other) : this() {
      iD_ = other.iD_;
      name_ = other.name_;
      attributeStrength_ = other.attributeStrength_;
      attributeAgility_ = other.attributeAgility_;
      attributeIntelligence_ = other.attributeIntelligence_;
      attack_ = other.attack_;
      attackSpeed_ = other.attackSpeed_;
      attackRange_ = other.attackRange_;
      moveSpeed_ = other.moveSpeed_;
      magicScale_ = other.magicScale_;
      mPRegain_ = other.mPRegain_;
      physicalAmaor_ = other.physicalAmaor_;
      physicalResist_ = other.physicalResist_;
      magicAmaor_ = other.magicAmaor_;
      statusAmaor_ = other.statusAmaor_;
      dodge_ = other.dodge_;
      hPRegain_ = other.hPRegain_;
      equips_ = other.equips_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitBoardDatas Clone() {
      return new UnitBoardDatas(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AttributeStrength" field.</summary>
    public const int AttributeStrengthFieldNumber = 3;
    private float attributeStrength_;
    /// <summary>
    ///力量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttributeStrength {
      get { return attributeStrength_; }
      set {
        attributeStrength_ = value;
      }
    }

    /// <summary>Field number for the "AttributeAgility" field.</summary>
    public const int AttributeAgilityFieldNumber = 4;
    private float attributeAgility_;
    /// <summary>
    ///敏捷
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttributeAgility {
      get { return attributeAgility_; }
      set {
        attributeAgility_ = value;
      }
    }

    /// <summary>Field number for the "AttributeIntelligence" field.</summary>
    public const int AttributeIntelligenceFieldNumber = 5;
    private float attributeIntelligence_;
    /// <summary>
    ///智力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttributeIntelligence {
      get { return attributeIntelligence_; }
      set {
        attributeIntelligence_ = value;
      }
    }

    /// <summary>Field number for the "Attack" field.</summary>
    public const int AttackFieldNumber = 6;
    private int attack_;
    /// <summary>
    ///攻击力 (基础攻击力+属性影响+buff影响)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "AttackSpeed" field.</summary>
    public const int AttackSpeedFieldNumber = 7;
    private float attackSpeed_;
    /// <summary>
    ///攻击速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackSpeed {
      get { return attackSpeed_; }
      set {
        attackSpeed_ = value;
      }
    }

    /// <summary>Field number for the "AttackRange" field.</summary>
    public const int AttackRangeFieldNumber = 8;
    private float attackRange_;
    /// <summary>
    ///攻击范围 攻击距离
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackRange {
      get { return attackRange_; }
      set {
        attackRange_ = value;
      }
    }

    /// <summary>Field number for the "MoveSpeed" field.</summary>
    public const int MoveSpeedFieldNumber = 9;
    private float moveSpeed_;
    /// <summary>
    ///移动速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveSpeed {
      get { return moveSpeed_; }
      set {
        moveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "MagicScale" field.</summary>
    public const int MagicScaleFieldNumber = 10;
    private float magicScale_;
    /// <summary>
    ///技能增强
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MagicScale {
      get { return magicScale_; }
      set {
        magicScale_ = value;
      }
    }

    /// <summary>Field number for the "MPRegain" field.</summary>
    public const int MPRegainFieldNumber = 11;
    private float mPRegain_;
    /// <summary>
    ///魔法恢复
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MPRegain {
      get { return mPRegain_; }
      set {
        mPRegain_ = value;
      }
    }

    /// <summary>Field number for the "PhysicalAmaor" field.</summary>
    public const int PhysicalAmaorFieldNumber = 12;
    private float physicalAmaor_;
    /// <summary>
    ///物理护甲
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PhysicalAmaor {
      get { return physicalAmaor_; }
      set {
        physicalAmaor_ = value;
      }
    }

    /// <summary>Field number for the "PhysicalResist" field.</summary>
    public const int PhysicalResistFieldNumber = 13;
    private float physicalResist_;
    /// <summary>
    ///物理伤害抵挡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PhysicalResist {
      get { return physicalResist_; }
      set {
        physicalResist_ = value;
      }
    }

    /// <summary>Field number for the "MagicAmaor" field.</summary>
    public const int MagicAmaorFieldNumber = 14;
    private float magicAmaor_;
    /// <summary>
    ///魔法抗性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MagicAmaor {
      get { return magicAmaor_; }
      set {
        magicAmaor_ = value;
      }
    }

    /// <summary>Field number for the "StatusAmaor" field.</summary>
    public const int StatusAmaorFieldNumber = 15;
    private float statusAmaor_;
    /// <summary>
    ///状态抗性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StatusAmaor {
      get { return statusAmaor_; }
      set {
        statusAmaor_ = value;
      }
    }

    /// <summary>Field number for the "Dodge" field.</summary>
    public const int DodgeFieldNumber = 16;
    private float dodge_;
    /// <summary>
    ///闪避(0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Dodge {
      get { return dodge_; }
      set {
        dodge_ = value;
      }
    }

    /// <summary>Field number for the "HPRegain" field.</summary>
    public const int HPRegainFieldNumber = 17;
    private float hPRegain_;
    /// <summary>
    ///生命恢复
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HPRegain {
      get { return hPRegain_; }
      set {
        hPRegain_ = value;
      }
    }

    /// <summary>Field number for the "Equips" field.</summary>
    public const int EquipsFieldNumber = 18;
    private static readonly pb::FieldCodec<global::Protomsg.UnitEquip> _repeated_equips_codec
        = pb::FieldCodec.ForMessage(146, global::Protomsg.UnitEquip.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.UnitEquip> equips_ = new pbc::RepeatedField<global::Protomsg.UnitEquip>();
    /// <summary>
    ///装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.UnitEquip> Equips {
      get { return equips_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnitBoardDatas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnitBoardDatas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttributeStrength, other.AttributeStrength)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttributeAgility, other.AttributeAgility)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttributeIntelligence, other.AttributeIntelligence)) return false;
      if (Attack != other.Attack) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackSpeed, other.AttackSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackRange, other.AttackRange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveSpeed, other.MoveSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MagicScale, other.MagicScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MPRegain, other.MPRegain)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PhysicalAmaor, other.PhysicalAmaor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PhysicalResist, other.PhysicalResist)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MagicAmaor, other.MagicAmaor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StatusAmaor, other.StatusAmaor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Dodge, other.Dodge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HPRegain, other.HPRegain)) return false;
      if(!equips_.Equals(other.equips_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (AttributeStrength != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttributeStrength);
      if (AttributeAgility != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttributeAgility);
      if (AttributeIntelligence != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttributeIntelligence);
      if (Attack != 0) hash ^= Attack.GetHashCode();
      if (AttackSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackSpeed);
      if (AttackRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackRange);
      if (MoveSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveSpeed);
      if (MagicScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MagicScale);
      if (MPRegain != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MPRegain);
      if (PhysicalAmaor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PhysicalAmaor);
      if (PhysicalResist != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PhysicalResist);
      if (MagicAmaor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MagicAmaor);
      if (StatusAmaor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StatusAmaor);
      if (Dodge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Dodge);
      if (HPRegain != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HPRegain);
      hash ^= equips_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (AttributeStrength != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(AttributeStrength);
      }
      if (AttributeAgility != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(AttributeAgility);
      }
      if (AttributeIntelligence != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(AttributeIntelligence);
      }
      if (Attack != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Attack);
      }
      if (AttackSpeed != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(AttackSpeed);
      }
      if (AttackRange != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(AttackRange);
      }
      if (MoveSpeed != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(MoveSpeed);
      }
      if (MagicScale != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(MagicScale);
      }
      if (MPRegain != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(MPRegain);
      }
      if (PhysicalAmaor != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(PhysicalAmaor);
      }
      if (PhysicalResist != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(PhysicalResist);
      }
      if (MagicAmaor != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(MagicAmaor);
      }
      if (StatusAmaor != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(StatusAmaor);
      }
      if (Dodge != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(Dodge);
      }
      if (HPRegain != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(HPRegain);
      }
      equips_.WriteTo(output, _repeated_equips_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (AttributeStrength != 0F) {
        size += 1 + 4;
      }
      if (AttributeAgility != 0F) {
        size += 1 + 4;
      }
      if (AttributeIntelligence != 0F) {
        size += 1 + 4;
      }
      if (Attack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
      }
      if (AttackSpeed != 0F) {
        size += 1 + 4;
      }
      if (AttackRange != 0F) {
        size += 1 + 4;
      }
      if (MoveSpeed != 0F) {
        size += 1 + 4;
      }
      if (MagicScale != 0F) {
        size += 1 + 4;
      }
      if (MPRegain != 0F) {
        size += 1 + 4;
      }
      if (PhysicalAmaor != 0F) {
        size += 1 + 4;
      }
      if (PhysicalResist != 0F) {
        size += 1 + 4;
      }
      if (MagicAmaor != 0F) {
        size += 1 + 4;
      }
      if (StatusAmaor != 0F) {
        size += 1 + 4;
      }
      if (Dodge != 0F) {
        size += 2 + 4;
      }
      if (HPRegain != 0F) {
        size += 2 + 4;
      }
      size += equips_.CalculateSize(_repeated_equips_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnitBoardDatas other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.AttributeStrength != 0F) {
        AttributeStrength = other.AttributeStrength;
      }
      if (other.AttributeAgility != 0F) {
        AttributeAgility = other.AttributeAgility;
      }
      if (other.AttributeIntelligence != 0F) {
        AttributeIntelligence = other.AttributeIntelligence;
      }
      if (other.Attack != 0) {
        Attack = other.Attack;
      }
      if (other.AttackSpeed != 0F) {
        AttackSpeed = other.AttackSpeed;
      }
      if (other.AttackRange != 0F) {
        AttackRange = other.AttackRange;
      }
      if (other.MoveSpeed != 0F) {
        MoveSpeed = other.MoveSpeed;
      }
      if (other.MagicScale != 0F) {
        MagicScale = other.MagicScale;
      }
      if (other.MPRegain != 0F) {
        MPRegain = other.MPRegain;
      }
      if (other.PhysicalAmaor != 0F) {
        PhysicalAmaor = other.PhysicalAmaor;
      }
      if (other.PhysicalResist != 0F) {
        PhysicalResist = other.PhysicalResist;
      }
      if (other.MagicAmaor != 0F) {
        MagicAmaor = other.MagicAmaor;
      }
      if (other.StatusAmaor != 0F) {
        StatusAmaor = other.StatusAmaor;
      }
      if (other.Dodge != 0F) {
        Dodge = other.Dodge;
      }
      if (other.HPRegain != 0F) {
        HPRegain = other.HPRegain;
      }
      equips_.Add(other.equips_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 29: {
            AttributeStrength = input.ReadFloat();
            break;
          }
          case 37: {
            AttributeAgility = input.ReadFloat();
            break;
          }
          case 45: {
            AttributeIntelligence = input.ReadFloat();
            break;
          }
          case 48: {
            Attack = input.ReadInt32();
            break;
          }
          case 61: {
            AttackSpeed = input.ReadFloat();
            break;
          }
          case 69: {
            AttackRange = input.ReadFloat();
            break;
          }
          case 77: {
            MoveSpeed = input.ReadFloat();
            break;
          }
          case 85: {
            MagicScale = input.ReadFloat();
            break;
          }
          case 93: {
            MPRegain = input.ReadFloat();
            break;
          }
          case 101: {
            PhysicalAmaor = input.ReadFloat();
            break;
          }
          case 109: {
            PhysicalResist = input.ReadFloat();
            break;
          }
          case 117: {
            MagicAmaor = input.ReadFloat();
            break;
          }
          case 125: {
            StatusAmaor = input.ReadFloat();
            break;
          }
          case 133: {
            Dodge = input.ReadFloat();
            break;
          }
          case 141: {
            HPRegain = input.ReadFloat();
            break;
          }
          case 146: {
            equips_.AddEntriesFrom(input, _repeated_equips_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取单位面板详细信息 
  /// </summary>
  public sealed partial class CS_GetUnitInfo : pb::IMessage<CS_GetUnitInfo> {
    private static readonly pb::MessageParser<CS_GetUnitInfo> _parser = new pb::MessageParser<CS_GetUnitInfo>(() => new CS_GetUnitInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GetUnitInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetUnitInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetUnitInfo(CS_GetUnitInfo other) : this() {
      unitID_ = other.unitID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetUnitInfo Clone() {
      return new CS_GetUnitInfo(this);
    }

    /// <summary>Field number for the "UnitID" field.</summary>
    public const int UnitIDFieldNumber = 1;
    private int unitID_;
    /// <summary>
    ///单位对象id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnitID {
      get { return unitID_; }
      set {
        unitID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GetUnitInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GetUnitInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitID != other.UnitID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnitID != 0) hash ^= UnitID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnitID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GetUnitInfo other) {
      if (other == null) {
        return;
      }
      if (other.UnitID != 0) {
        UnitID = other.UnitID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnitID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取自己背包详细信息 
  /// </summary>
  public sealed partial class CS_GetBagInfo : pb::IMessage<CS_GetBagInfo> {
    private static readonly pb::MessageParser<CS_GetBagInfo> _parser = new pb::MessageParser<CS_GetBagInfo>(() => new CS_GetBagInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_GetBagInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetBagInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetBagInfo(CS_GetBagInfo other) : this() {
      unitID_ = other.unitID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_GetBagInfo Clone() {
      return new CS_GetBagInfo(this);
    }

    /// <summary>Field number for the "UnitID" field.</summary>
    public const int UnitIDFieldNumber = 1;
    private int unitID_;
    /// <summary>
    ///单位对象id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnitID {
      get { return unitID_; }
      set {
        unitID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_GetBagInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_GetBagInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitID != other.UnitID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnitID != 0) hash ^= UnitID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnitID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_GetBagInfo other) {
      if (other == null) {
        return;
      }
      if (other.UnitID != 0) {
        UnitID = other.UnitID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnitID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_UnitInfo : pb::IMessage<SC_UnitInfo> {
    private static readonly pb::MessageParser<SC_UnitInfo> _parser = new pb::MessageParser<SC_UnitInfo>(() => new SC_UnitInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_UnitInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_UnitInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_UnitInfo(SC_UnitInfo other) : this() {
      unitData_ = other.unitData_ != null ? other.unitData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_UnitInfo Clone() {
      return new SC_UnitInfo(this);
    }

    /// <summary>Field number for the "UnitData" field.</summary>
    public const int UnitDataFieldNumber = 1;
    private global::Protomsg.UnitBoardDatas unitData_;
    /// <summary>
    ///单位面板信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protomsg.UnitBoardDatas UnitData {
      get { return unitData_; }
      set {
        unitData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_UnitInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_UnitInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UnitData, other.UnitData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (unitData_ != null) hash ^= UnitData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (unitData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UnitData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (unitData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_UnitInfo other) {
      if (other == null) {
        return;
      }
      if (other.unitData_ != null) {
        if (unitData_ == null) {
          unitData_ = new global::Protomsg.UnitBoardDatas();
        }
        UnitData.MergeFrom(other.UnitData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (unitData_ == null) {
              unitData_ = new global::Protomsg.UnitBoardDatas();
            }
            input.ReadMessage(unitData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家移动操作
  /// </summary>
  public sealed partial class CS_PlayerMove : pb::IMessage<CS_PlayerMove> {
    private static readonly pb::MessageParser<CS_PlayerMove> _parser = new pb::MessageParser<CS_PlayerMove>(() => new CS_PlayerMove());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_PlayerMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerMove(CS_PlayerMove other) : this() {
      iDs_ = other.iDs_.Clone();
      x_ = other.x_;
      y_ = other.y_;
      isStart_ = other.isStart_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerMove Clone() {
      return new CS_PlayerMove(this);
    }

    /// <summary>Field number for the "IDs" field.</summary>
    public const int IDsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_iDs_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> iDs_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///操作的单位对象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IDs {
      get { return iDs_; }
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    /// <summary>
    ///移动的x方向 技能的目标点x或目标方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    /// <summary>
    ///移动的Y方向 技能的目标点Y或目标方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "IsStart" field.</summary>
    public const int IsStartFieldNumber = 4;
    private bool isStart_;
    /// <summary>
    ///true 表示开始移动  false表示结束移动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStart {
      get { return isStart_; }
      set {
        isStart_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_PlayerMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_PlayerMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!iDs_.Equals(other.iDs_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (IsStart != other.IsStart) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= iDs_.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (IsStart != false) hash ^= IsStart.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      iDs_.WriteTo(output, _repeated_iDs_codec);
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (IsStart != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsStart);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += iDs_.CalculateSize(_repeated_iDs_codec);
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (IsStart != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_PlayerMove other) {
      if (other == null) {
        return;
      }
      iDs_.Add(other.iDs_);
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.IsStart != false) {
        IsStart = other.IsStart;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            iDs_.AddEntriesFrom(input, _repeated_iDs_codec);
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 32: {
            IsStart = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家攻击操作
  /// </summary>
  public sealed partial class CS_PlayerAttack : pb::IMessage<CS_PlayerAttack> {
    private static readonly pb::MessageParser<CS_PlayerAttack> _parser = new pb::MessageParser<CS_PlayerAttack>(() => new CS_PlayerAttack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_PlayerAttack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerAttack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerAttack(CS_PlayerAttack other) : this() {
      iDs_ = other.iDs_.Clone();
      targetUnitID_ = other.targetUnitID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerAttack Clone() {
      return new CS_PlayerAttack(this);
    }

    /// <summary>Field number for the "IDs" field.</summary>
    public const int IDsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_iDs_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> iDs_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///操作的单位对象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IDs {
      get { return iDs_; }
    }

    /// <summary>Field number for the "TargetUnitID" field.</summary>
    public const int TargetUnitIDFieldNumber = 2;
    private int targetUnitID_;
    /// <summary>
    ///攻击对象id 或者技能对象ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetUnitID {
      get { return targetUnitID_; }
      set {
        targetUnitID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_PlayerAttack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_PlayerAttack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!iDs_.Equals(other.iDs_)) return false;
      if (TargetUnitID != other.TargetUnitID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= iDs_.GetHashCode();
      if (TargetUnitID != 0) hash ^= TargetUnitID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      iDs_.WriteTo(output, _repeated_iDs_codec);
      if (TargetUnitID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetUnitID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += iDs_.CalculateSize(_repeated_iDs_codec);
      if (TargetUnitID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetUnitID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_PlayerAttack other) {
      if (other == null) {
        return;
      }
      iDs_.Add(other.iDs_);
      if (other.TargetUnitID != 0) {
        TargetUnitID = other.TargetUnitID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            iDs_.AddEntriesFrom(input, _repeated_iDs_codec);
            break;
          }
          case 16: {
            TargetUnitID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家技能操作(包括道具)
  /// </summary>
  public sealed partial class CS_PlayerSkill : pb::IMessage<CS_PlayerSkill> {
    private static readonly pb::MessageParser<CS_PlayerSkill> _parser = new pb::MessageParser<CS_PlayerSkill>(() => new CS_PlayerSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_PlayerSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerSkill(CS_PlayerSkill other) : this() {
      iD_ = other.iD_;
      skillID_ = other.skillID_;
      x_ = other.x_;
      y_ = other.y_;
      targetUnitID_ = other.targetUnitID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PlayerSkill Clone() {
      return new CS_PlayerSkill(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///操作的单位对象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "SkillID" field.</summary>
    public const int SkillIDFieldNumber = 2;
    private int skillID_;
    /// <summary>
    ///技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillID {
      get { return skillID_; }
      set {
        skillID_ = value;
      }
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 3;
    private float x_;
    /// <summary>
    ///移动的x方向 技能的目标点x或目标方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 4;
    private float y_;
    /// <summary>
    ///移动的Y方向 技能的目标点Y或目标方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "TargetUnitID" field.</summary>
    public const int TargetUnitIDFieldNumber = 5;
    private int targetUnitID_;
    /// <summary>
    ///攻击对象id 或者技能对象ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetUnitID {
      get { return targetUnitID_; }
      set {
        targetUnitID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_PlayerSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_PlayerSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (SkillID != other.SkillID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (TargetUnitID != other.TargetUnitID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (SkillID != 0) hash ^= SkillID.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (TargetUnitID != 0) hash ^= TargetUnitID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (SkillID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillID);
      }
      if (X != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Y);
      }
      if (TargetUnitID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TargetUnitID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (SkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillID);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (TargetUnitID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetUnitID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_PlayerSkill other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.SkillID != 0) {
        SkillID = other.SkillID;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.TargetUnitID != 0) {
        TargetUnitID = other.TargetUnitID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            SkillID = input.ReadInt32();
            break;
          }
          case 29: {
            X = input.ReadFloat();
            break;
          }
          case 37: {
            Y = input.ReadFloat();
            break;
          }
          case 40: {
            TargetUnitID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///技能数据
  /// </summary>
  public sealed partial class SkillDatas : pb::IMessage<SkillDatas> {
    private static readonly pb::MessageParser<SkillDatas> _parser = new pb::MessageParser<SkillDatas>(() => new SkillDatas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillDatas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillDatas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillDatas(SkillDatas other) : this() {
      typeID_ = other.typeID_;
      level_ = other.level_;
      remainCDTime_ = other.remainCDTime_;
      canUpgrade_ = other.canUpgrade_;
      index_ = other.index_;
      castType_ = other.castType_;
      castTargetType_ = other.castTargetType_;
      unitTargetTeam_ = other.unitTargetTeam_;
      unitTargetCamp_ = other.unitTargetCamp_;
      noCareMagicImmune_ = other.noCareMagicImmune_;
      castRange_ = other.castRange_;
      cooldown_ = other.cooldown_;
      hurtRange_ = other.hurtRange_;
      manaCost_ = other.manaCost_;
      attackAutoActive_ = other.attackAutoActive_;
      visible_ = other.visible_;
      remainSkillCount_ = other.remainSkillCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillDatas Clone() {
      return new SkillDatas(this);
    }

    /// <summary>Field number for the "TypeID" field.</summary>
    public const int TypeIDFieldNumber = 1;
    private int typeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "RemainCDTime" field.</summary>
    public const int RemainCDTimeFieldNumber = 3;
    private float remainCDTime_;
    /// <summary>
    ///技能CD剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RemainCDTime {
      get { return remainCDTime_; }
      set {
        remainCDTime_ = value;
      }
    }

    /// <summary>Field number for the "CanUpgrade" field.</summary>
    public const int CanUpgradeFieldNumber = 4;
    private int canUpgrade_;
    /// <summary>
    ///是否可以升级 1 表示可以  2 表示不可以
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanUpgrade {
      get { return canUpgrade_; }
      set {
        canUpgrade_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 5;
    private int index_;
    /// <summary>
    ///位置索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "CastType" field.</summary>
    public const int CastTypeFieldNumber = 6;
    private int castType_;
    /// <summary>
    ///施法类型:  1:主动技能  2:被动技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CastType {
      get { return castType_; }
      set {
        castType_ = value;
      }
    }

    /// <summary>Field number for the "CastTargetType" field.</summary>
    public const int CastTargetTypeFieldNumber = 7;
    private int castTargetType_;
    /// <summary>
    ///施法目标类型 1:自身为目标 2:以单位为目标 3:以地面1点为目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CastTargetType {
      get { return castTargetType_; }
      set {
        castTargetType_ = value;
      }
    }

    /// <summary>Field number for the "UnitTargetTeam" field.</summary>
    public const int UnitTargetTeamFieldNumber = 8;
    private int unitTargetTeam_;
    /// <summary>
    ///目标单位关系 1:友方  2:敌方 3:友方敌方都行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnitTargetTeam {
      get { return unitTargetTeam_; }
      set {
        unitTargetTeam_ = value;
      }
    }

    /// <summary>Field number for the "UnitTargetCamp" field.</summary>
    public const int UnitTargetCampFieldNumber = 9;
    private int unitTargetCamp_;
    /// <summary>
    ///目标单位阵营 (1:玩家 2:NPC) 3:玩家NPC都行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnitTargetCamp {
      get { return unitTargetCamp_; }
      set {
        unitTargetCamp_ = value;
      }
    }

    /// <summary>Field number for the "NoCareMagicImmune" field.</summary>
    public const int NoCareMagicImmuneFieldNumber = 10;
    private int noCareMagicImmune_;
    /// <summary>
    ///无视技能免疫 (1:无视技能免疫 2:非)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NoCareMagicImmune {
      get { return noCareMagicImmune_; }
      set {
        noCareMagicImmune_ = value;
      }
    }

    /// <summary>Field number for the "CastRange" field.</summary>
    public const int CastRangeFieldNumber = 11;
    private float castRange_;
    /// <summary>
    ///施法距离
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CastRange {
      get { return castRange_; }
      set {
        castRange_ = value;
      }
    }

    /// <summary>Field number for the "Cooldown" field.</summary>
    public const int CooldownFieldNumber = 12;
    private float cooldown_;
    /// <summary>
    ///技能冷却时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Cooldown {
      get { return cooldown_; }
      set {
        cooldown_ = value;
      }
    }

    /// <summary>Field number for the "HurtRange" field.</summary>
    public const int HurtRangeFieldNumber = 13;
    private float hurtRange_;
    /// <summary>
    ///伤害范围 小于等于0表示单体
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HurtRange {
      get { return hurtRange_; }
      set {
        hurtRange_ = value;
      }
    }

    /// <summary>Field number for the "ManaCost" field.</summary>
    public const int ManaCostFieldNumber = 14;
    private int manaCost_;
    /// <summary>
    ///技能魔法消耗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ManaCost {
      get { return manaCost_; }
      set {
        manaCost_ = value;
      }
    }

    /// <summary>Field number for the "AttackAutoActive" field.</summary>
    public const int AttackAutoActiveFieldNumber = 15;
    private int attackAutoActive_;
    /// <summary>
    /////攻击时自动释放 是否激活 1:激活 2:否
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackAutoActive {
      get { return attackAutoActive_; }
      set {
        attackAutoActive_ = value;
      }
    }

    /// <summary>Field number for the "Visible" field.</summary>
    public const int VisibleFieldNumber = 16;
    private int visible_;
    /// <summary>
    /////技能是否显示 1:是 2:否
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Visible {
      get { return visible_; }
      set {
        visible_ = value;
      }
    }

    /// <summary>Field number for the "RemainSkillCount" field.</summary>
    public const int RemainSkillCountFieldNumber = 17;
    private int remainSkillCount_;
    /// <summary>
    ///技能剩余点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainSkillCount {
      get { return remainSkillCount_; }
      set {
        remainSkillCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillDatas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillDatas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeID != other.TypeID) return false;
      if (Level != other.Level) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RemainCDTime, other.RemainCDTime)) return false;
      if (CanUpgrade != other.CanUpgrade) return false;
      if (Index != other.Index) return false;
      if (CastType != other.CastType) return false;
      if (CastTargetType != other.CastTargetType) return false;
      if (UnitTargetTeam != other.UnitTargetTeam) return false;
      if (UnitTargetCamp != other.UnitTargetCamp) return false;
      if (NoCareMagicImmune != other.NoCareMagicImmune) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CastRange, other.CastRange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Cooldown, other.Cooldown)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HurtRange, other.HurtRange)) return false;
      if (ManaCost != other.ManaCost) return false;
      if (AttackAutoActive != other.AttackAutoActive) return false;
      if (Visible != other.Visible) return false;
      if (RemainSkillCount != other.RemainSkillCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (RemainCDTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RemainCDTime);
      if (CanUpgrade != 0) hash ^= CanUpgrade.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (CastType != 0) hash ^= CastType.GetHashCode();
      if (CastTargetType != 0) hash ^= CastTargetType.GetHashCode();
      if (UnitTargetTeam != 0) hash ^= UnitTargetTeam.GetHashCode();
      if (UnitTargetCamp != 0) hash ^= UnitTargetCamp.GetHashCode();
      if (NoCareMagicImmune != 0) hash ^= NoCareMagicImmune.GetHashCode();
      if (CastRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CastRange);
      if (Cooldown != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Cooldown);
      if (HurtRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HurtRange);
      if (ManaCost != 0) hash ^= ManaCost.GetHashCode();
      if (AttackAutoActive != 0) hash ^= AttackAutoActive.GetHashCode();
      if (Visible != 0) hash ^= Visible.GetHashCode();
      if (RemainSkillCount != 0) hash ^= RemainSkillCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TypeID);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (RemainCDTime != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(RemainCDTime);
      }
      if (CanUpgrade != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CanUpgrade);
      }
      if (Index != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Index);
      }
      if (CastType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CastType);
      }
      if (CastTargetType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CastTargetType);
      }
      if (UnitTargetTeam != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(UnitTargetTeam);
      }
      if (UnitTargetCamp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(UnitTargetCamp);
      }
      if (NoCareMagicImmune != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(NoCareMagicImmune);
      }
      if (CastRange != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(CastRange);
      }
      if (Cooldown != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(Cooldown);
      }
      if (HurtRange != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(HurtRange);
      }
      if (ManaCost != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ManaCost);
      }
      if (AttackAutoActive != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(AttackAutoActive);
      }
      if (Visible != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Visible);
      }
      if (RemainSkillCount != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(RemainSkillCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (RemainCDTime != 0F) {
        size += 1 + 4;
      }
      if (CanUpgrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanUpgrade);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (CastType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CastType);
      }
      if (CastTargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CastTargetType);
      }
      if (UnitTargetTeam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitTargetTeam);
      }
      if (UnitTargetCamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitTargetCamp);
      }
      if (NoCareMagicImmune != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NoCareMagicImmune);
      }
      if (CastRange != 0F) {
        size += 1 + 4;
      }
      if (Cooldown != 0F) {
        size += 1 + 4;
      }
      if (HurtRange != 0F) {
        size += 1 + 4;
      }
      if (ManaCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ManaCost);
      }
      if (AttackAutoActive != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackAutoActive);
      }
      if (Visible != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Visible);
      }
      if (RemainSkillCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RemainSkillCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillDatas other) {
      if (other == null) {
        return;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.RemainCDTime != 0F) {
        RemainCDTime = other.RemainCDTime;
      }
      if (other.CanUpgrade != 0) {
        CanUpgrade = other.CanUpgrade;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.CastType != 0) {
        CastType = other.CastType;
      }
      if (other.CastTargetType != 0) {
        CastTargetType = other.CastTargetType;
      }
      if (other.UnitTargetTeam != 0) {
        UnitTargetTeam = other.UnitTargetTeam;
      }
      if (other.UnitTargetCamp != 0) {
        UnitTargetCamp = other.UnitTargetCamp;
      }
      if (other.NoCareMagicImmune != 0) {
        NoCareMagicImmune = other.NoCareMagicImmune;
      }
      if (other.CastRange != 0F) {
        CastRange = other.CastRange;
      }
      if (other.Cooldown != 0F) {
        Cooldown = other.Cooldown;
      }
      if (other.HurtRange != 0F) {
        HurtRange = other.HurtRange;
      }
      if (other.ManaCost != 0) {
        ManaCost = other.ManaCost;
      }
      if (other.AttackAutoActive != 0) {
        AttackAutoActive = other.AttackAutoActive;
      }
      if (other.Visible != 0) {
        Visible = other.Visible;
      }
      if (other.RemainSkillCount != 0) {
        RemainSkillCount = other.RemainSkillCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TypeID = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 29: {
            RemainCDTime = input.ReadFloat();
            break;
          }
          case 32: {
            CanUpgrade = input.ReadInt32();
            break;
          }
          case 40: {
            Index = input.ReadInt32();
            break;
          }
          case 48: {
            CastType = input.ReadInt32();
            break;
          }
          case 56: {
            CastTargetType = input.ReadInt32();
            break;
          }
          case 64: {
            UnitTargetTeam = input.ReadInt32();
            break;
          }
          case 72: {
            UnitTargetCamp = input.ReadInt32();
            break;
          }
          case 80: {
            NoCareMagicImmune = input.ReadInt32();
            break;
          }
          case 93: {
            CastRange = input.ReadFloat();
            break;
          }
          case 101: {
            Cooldown = input.ReadFloat();
            break;
          }
          case 109: {
            HurtRange = input.ReadFloat();
            break;
          }
          case 112: {
            ManaCost = input.ReadInt32();
            break;
          }
          case 120: {
            AttackAutoActive = input.ReadInt32();
            break;
          }
          case 128: {
            Visible = input.ReadInt32();
            break;
          }
          case 136: {
            RemainSkillCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///buff数据
  /// </summary>
  public sealed partial class BuffDatas : pb::IMessage<BuffDatas> {
    private static readonly pb::MessageParser<BuffDatas> _parser = new pb::MessageParser<BuffDatas>(() => new BuffDatas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuffDatas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffDatas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffDatas(BuffDatas other) : this() {
      typeID_ = other.typeID_;
      remainTime_ = other.remainTime_;
      time_ = other.time_;
      tagNum_ = other.tagNum_;
      connectionType_ = other.connectionType_;
      connectionX_ = other.connectionX_;
      connectionY_ = other.connectionY_;
      connectionZ_ = other.connectionZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffDatas Clone() {
      return new BuffDatas(this);
    }

    /// <summary>Field number for the "TypeID" field.</summary>
    public const int TypeIDFieldNumber = 1;
    private int typeID_;
    /// <summary>
    ///buffid 对应人物身上的特效 buff图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "RemainTime" field.</summary>
    public const int RemainTimeFieldNumber = 2;
    private float remainTime_;
    /// <summary>
    ///剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RemainTime {
      get { return remainTime_; }
      set {
        remainTime_ = value;
      }
    }

    /// <summary>Field number for the "Time" field.</summary>
    public const int TimeFieldNumber = 3;
    private float time_;
    /// <summary>
    ///总时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "TagNum" field.</summary>
    public const int TagNumFieldNumber = 4;
    private int tagNum_;
    /// <summary>
    ///标记数字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TagNum {
      get { return tagNum_; }
      set {
        tagNum_ = value;
      }
    }

    /// <summary>Field number for the "ConnectionType" field.</summary>
    public const int ConnectionTypeFieldNumber = 5;
    private int connectionType_;
    /// <summary>
    ///是否有连接 0表示没有 1表示有连接点 2表示有连接单位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConnectionType {
      get { return connectionType_; }
      set {
        connectionType_ = value;
      }
    }

    /// <summary>Field number for the "ConnectionX" field.</summary>
    public const int ConnectionXFieldNumber = 6;
    private float connectionX_;
    /// <summary>
    ///连接点x
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConnectionX {
      get { return connectionX_; }
      set {
        connectionX_ = value;
      }
    }

    /// <summary>Field number for the "ConnectionY" field.</summary>
    public const int ConnectionYFieldNumber = 7;
    private float connectionY_;
    /// <summary>
    ///连接点y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConnectionY {
      get { return connectionY_; }
      set {
        connectionY_ = value;
      }
    }

    /// <summary>Field number for the "ConnectionZ" field.</summary>
    public const int ConnectionZFieldNumber = 8;
    private float connectionZ_;
    /// <summary>
    ///连接点z
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConnectionZ {
      get { return connectionZ_; }
      set {
        connectionZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuffDatas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuffDatas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeID != other.TypeID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RemainTime, other.RemainTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
      if (TagNum != other.TagNum) return false;
      if (ConnectionType != other.ConnectionType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConnectionX, other.ConnectionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConnectionY, other.ConnectionY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConnectionZ, other.ConnectionZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (RemainTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RemainTime);
      if (Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
      if (TagNum != 0) hash ^= TagNum.GetHashCode();
      if (ConnectionType != 0) hash ^= ConnectionType.GetHashCode();
      if (ConnectionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConnectionX);
      if (ConnectionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConnectionY);
      if (ConnectionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConnectionZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TypeID);
      }
      if (RemainTime != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(RemainTime);
      }
      if (Time != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Time);
      }
      if (TagNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TagNum);
      }
      if (ConnectionType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ConnectionType);
      }
      if (ConnectionX != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(ConnectionX);
      }
      if (ConnectionY != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(ConnectionY);
      }
      if (ConnectionZ != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(ConnectionZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (RemainTime != 0F) {
        size += 1 + 4;
      }
      if (Time != 0F) {
        size += 1 + 4;
      }
      if (TagNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TagNum);
      }
      if (ConnectionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConnectionType);
      }
      if (ConnectionX != 0F) {
        size += 1 + 4;
      }
      if (ConnectionY != 0F) {
        size += 1 + 4;
      }
      if (ConnectionZ != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuffDatas other) {
      if (other == null) {
        return;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.RemainTime != 0F) {
        RemainTime = other.RemainTime;
      }
      if (other.Time != 0F) {
        Time = other.Time;
      }
      if (other.TagNum != 0) {
        TagNum = other.TagNum;
      }
      if (other.ConnectionType != 0) {
        ConnectionType = other.ConnectionType;
      }
      if (other.ConnectionX != 0F) {
        ConnectionX = other.ConnectionX;
      }
      if (other.ConnectionY != 0F) {
        ConnectionY = other.ConnectionY;
      }
      if (other.ConnectionZ != 0F) {
        ConnectionZ = other.ConnectionZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TypeID = input.ReadInt32();
            break;
          }
          case 21: {
            RemainTime = input.ReadFloat();
            break;
          }
          case 29: {
            Time = input.ReadFloat();
            break;
          }
          case 32: {
            TagNum = input.ReadInt32();
            break;
          }
          case 40: {
            ConnectionType = input.ReadInt32();
            break;
          }
          case 53: {
            ConnectionX = input.ReadFloat();
            break;
          }
          case 61: {
            ConnectionY = input.ReadFloat();
            break;
          }
          case 69: {
            ConnectionZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单位数据
  /// </summary>
  public sealed partial class UnitDatas : pb::IMessage<UnitDatas> {
    private static readonly pb::MessageParser<UnitDatas> _parser = new pb::MessageParser<UnitDatas>(() => new UnitDatas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitDatas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitDatas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitDatas(UnitDatas other) : this() {
      name_ = other.name_;
      level_ = other.level_;
      hP_ = other.hP_;
      mP_ = other.mP_;
      x_ = other.x_;
      y_ = other.y_;
      iD_ = other.iD_;
      modeType_ = other.modeType_;
      maxHP_ = other.maxHP_;
      maxMP_ = other.maxMP_;
      experience_ = other.experience_;
      maxExperience_ = other.maxExperience_;
      controlID_ = other.controlID_;
      animotorState_ = other.animotorState_;
      attackTime_ = other.attackTime_;
      directionX_ = other.directionX_;
      directionY_ = other.directionY_;
      unitType_ = other.unitType_;
      attackAcpabilities_ = other.attackAcpabilities_;
      attackMode_ = other.attackMode_;
      isMain_ = other.isMain_;
      isDeath_ = other.isDeath_;
      invisible_ = other.invisible_;
      camp_ = other.camp_;
      isMiss_ = other.isMiss_;
      animotorPause_ = other.animotorPause_;
      skillEnable_ = other.skillEnable_;
      itemEnable_ = other.itemEnable_;
      z_ = other.z_;
      isMirrorImage_ = other.isMirrorImage_;
      attackRange_ = other.attackRange_;
      attackAnim_ = other.attackAnim_;
      sD_ = other.sD_.Clone();
      bD_ = other.bD_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitDatas Clone() {
      return new UnitDatas(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "HP" field.</summary>
    public const int HPFieldNumber = 3;
    private int hP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HP {
      get { return hP_; }
      set {
        hP_ = value;
      }
    }

    /// <summary>Field number for the "MP" field.</summary>
    public const int MPFieldNumber = 4;
    private int mP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MP {
      get { return mP_; }
      set {
        mP_ = value;
      }
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 5;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 6;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 7;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "ModeType" field.</summary>
    public const int ModeTypeFieldNumber = 8;
    private string modeType_ = "";
    /// <summary>
    ///模型类型(客户端使用的模型名字)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModeType {
      get { return modeType_; }
      set {
        modeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaxHP" field.</summary>
    public const int MaxHPFieldNumber = 9;
    private int maxHP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHP {
      get { return maxHP_; }
      set {
        maxHP_ = value;
      }
    }

    /// <summary>Field number for the "MaxMP" field.</summary>
    public const int MaxMPFieldNumber = 10;
    private int maxMP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxMP {
      get { return maxMP_; }
      set {
        maxMP_ = value;
      }
    }

    /// <summary>Field number for the "Experience" field.</summary>
    public const int ExperienceFieldNumber = 11;
    private int experience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Experience {
      get { return experience_; }
      set {
        experience_ = value;
      }
    }

    /// <summary>Field number for the "MaxExperience" field.</summary>
    public const int MaxExperienceFieldNumber = 12;
    private int maxExperience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxExperience {
      get { return maxExperience_; }
      set {
        maxExperience_ = value;
      }
    }

    /// <summary>Field number for the "ControlID" field.</summary>
    public const int ControlIDFieldNumber = 13;
    private int controlID_;
    /// <summary>
    ///控制者id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ControlID {
      get { return controlID_; }
      set {
        controlID_ = value;
      }
    }

    /// <summary>Field number for the "AnimotorState" field.</summary>
    public const int AnimotorStateFieldNumber = 14;
    private int animotorState_;
    /// <summary>
    ///动画状态 1:idle 2:walk 3:attack 4:skill 5:death
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimotorState {
      get { return animotorState_; }
      set {
        animotorState_ = value;
      }
    }

    /// <summary>Field number for the "AttackTime" field.</summary>
    public const int AttackTimeFieldNumber = 15;
    private float attackTime_;
    /// <summary>
    ///攻击动画时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackTime {
      get { return attackTime_; }
      set {
        attackTime_ = value;
      }
    }

    /// <summary>Field number for the "DirectionX" field.</summary>
    public const int DirectionXFieldNumber = 16;
    private float directionX_;
    /// <summary>
    ///方向x
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirectionX {
      get { return directionX_; }
      set {
        directionX_ = value;
      }
    }

    /// <summary>Field number for the "DirectionY" field.</summary>
    public const int DirectionYFieldNumber = 17;
    private float directionY_;
    /// <summary>
    ///方向y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirectionY {
      get { return directionY_; }
      set {
        directionY_ = value;
      }
    }

    /// <summary>Field number for the "UnitType" field.</summary>
    public const int UnitTypeFieldNumber = 18;
    private int unitType_;
    /// <summary>
    ///单位类型(1:英雄 2:普通单位 3:远古 4:boss)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnitType {
      get { return unitType_; }
      set {
        unitType_ = value;
      }
    }

    /// <summary>Field number for the "AttackAcpabilities" field.</summary>
    public const int AttackAcpabilitiesFieldNumber = 19;
    private int attackAcpabilities_;
    /// <summary>
    ///(1:近程攻击 2:远程攻击)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackAcpabilities {
      get { return attackAcpabilities_; }
      set {
        attackAcpabilities_ = value;
      }
    }

    /// <summary>Field number for the "AttackMode" field.</summary>
    public const int AttackModeFieldNumber = 20;
    private int attackMode_;
    /// <summary>
    ///攻击模式(1:和平模式 2:组队模式 3:全体模式 4:阵营模式(玩家,NPC) 5:行会模式)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackMode {
      get { return attackMode_; }
      set {
        attackMode_ = value;
      }
    }

    /// <summary>Field number for the "IsMain" field.</summary>
    public const int IsMainFieldNumber = 21;
    private int isMain_;
    /// <summary>
    ///是否是主单位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsMain {
      get { return isMain_; }
      set {
        isMain_ = value;
      }
    }

    /// <summary>Field number for the "IsDeath" field.</summary>
    public const int IsDeathFieldNumber = 22;
    private int isDeath_;
    /// <summary>
    ///是否死亡((1:死亡 2:没死)) 死亡后不显示血条
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsDeath {
      get { return isDeath_; }
      set {
        isDeath_ = value;
      }
    }

    /// <summary>Field number for the "Invisible" field.</summary>
    public const int InvisibleFieldNumber = 23;
    private int invisible_;
    /// <summary>
    ///是否隐身 1:是 2:否
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Invisible {
      get { return invisible_; }
      set {
        invisible_ = value;
      }
    }

    /// <summary>Field number for the "Camp" field.</summary>
    public const int CampFieldNumber = 24;
    private int camp_;
    /// <summary>
    ///阵营 (1:玩家 2:NPC)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    /// <summary>Field number for the "IsMiss" field.</summary>
    public const int IsMissFieldNumber = 25;
    private bool isMiss_;
    /// <summary>
    ///显示相关的 本次是否有miss效果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMiss {
      get { return isMiss_; }
      set {
        isMiss_ = value;
      }
    }

    /// <summary>Field number for the "AnimotorPause" field.</summary>
    public const int AnimotorPauseFieldNumber = 26;
    private int animotorPause_;
    /// <summary>
    ///动画暂停 1表示是 2表示否
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimotorPause {
      get { return animotorPause_; }
      set {
        animotorPause_ = value;
      }
    }

    /// <summary>Field number for the "SkillEnable" field.</summary>
    public const int SkillEnableFieldNumber = 27;
    private int skillEnable_;
    /// <summary>
    ///能否使用主动技能 (比如 被眩晕和沉默不能使用主动技能) 1:可以 2:不可以
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillEnable {
      get { return skillEnable_; }
      set {
        skillEnable_ = value;
      }
    }

    /// <summary>Field number for the "ItemEnable" field.</summary>
    public const int ItemEnableFieldNumber = 28;
    private int itemEnable_;
    /// <summary>
    ///能否使用主动道具 (比如 被眩晕和禁用道具不能使用主动道具) 1:可以 2:不可以
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemEnable {
      get { return itemEnable_; }
      set {
        itemEnable_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 29;
    private float z_;
    /// <summary>
    ///z坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "IsMirrorImage" field.</summary>
    public const int IsMirrorImageFieldNumber = 30;
    private int isMirrorImage_;
    /// <summary>
    ///是否是镜像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsMirrorImage {
      get { return isMirrorImage_; }
      set {
        isMirrorImage_ = value;
      }
    }

    /// <summary>Field number for the "AttackRange" field.</summary>
    public const int AttackRangeFieldNumber = 31;
    private float attackRange_;
    /// <summary>
    ///攻击距离
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackRange {
      get { return attackRange_; }
      set {
        attackRange_ = value;
      }
    }

    /// <summary>Field number for the "AttackAnim" field.</summary>
    public const int AttackAnimFieldNumber = 32;
    private int attackAnim_;
    /// <summary>
    ///攻击动画
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackAnim {
      get { return attackAnim_; }
      set {
        attackAnim_ = value;
      }
    }

    /// <summary>Field number for the "SD" field.</summary>
    public const int SDFieldNumber = 33;
    private static readonly pb::FieldCodec<global::Protomsg.SkillDatas> _repeated_sD_codec
        = pb::FieldCodec.ForMessage(266, global::Protomsg.SkillDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.SkillDatas> sD_ = new pbc::RepeatedField<global::Protomsg.SkillDatas>();
    /// <summary>
    ///技能数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.SkillDatas> SD {
      get { return sD_; }
    }

    /// <summary>Field number for the "BD" field.</summary>
    public const int BDFieldNumber = 34;
    private static readonly pb::FieldCodec<global::Protomsg.BuffDatas> _repeated_bD_codec
        = pb::FieldCodec.ForMessage(274, global::Protomsg.BuffDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.BuffDatas> bD_ = new pbc::RepeatedField<global::Protomsg.BuffDatas>();
    /// <summary>
    ///buff数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.BuffDatas> BD {
      get { return bD_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnitDatas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnitDatas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (HP != other.HP) return false;
      if (MP != other.MP) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (ID != other.ID) return false;
      if (ModeType != other.ModeType) return false;
      if (MaxHP != other.MaxHP) return false;
      if (MaxMP != other.MaxMP) return false;
      if (Experience != other.Experience) return false;
      if (MaxExperience != other.MaxExperience) return false;
      if (ControlID != other.ControlID) return false;
      if (AnimotorState != other.AnimotorState) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackTime, other.AttackTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DirectionX, other.DirectionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DirectionY, other.DirectionY)) return false;
      if (UnitType != other.UnitType) return false;
      if (AttackAcpabilities != other.AttackAcpabilities) return false;
      if (AttackMode != other.AttackMode) return false;
      if (IsMain != other.IsMain) return false;
      if (IsDeath != other.IsDeath) return false;
      if (Invisible != other.Invisible) return false;
      if (Camp != other.Camp) return false;
      if (IsMiss != other.IsMiss) return false;
      if (AnimotorPause != other.AnimotorPause) return false;
      if (SkillEnable != other.SkillEnable) return false;
      if (ItemEnable != other.ItemEnable) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (IsMirrorImage != other.IsMirrorImage) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackRange, other.AttackRange)) return false;
      if (AttackAnim != other.AttackAnim) return false;
      if(!sD_.Equals(other.sD_)) return false;
      if(!bD_.Equals(other.bD_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (HP != 0) hash ^= HP.GetHashCode();
      if (MP != 0) hash ^= MP.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (ID != 0) hash ^= ID.GetHashCode();
      if (ModeType.Length != 0) hash ^= ModeType.GetHashCode();
      if (MaxHP != 0) hash ^= MaxHP.GetHashCode();
      if (MaxMP != 0) hash ^= MaxMP.GetHashCode();
      if (Experience != 0) hash ^= Experience.GetHashCode();
      if (MaxExperience != 0) hash ^= MaxExperience.GetHashCode();
      if (ControlID != 0) hash ^= ControlID.GetHashCode();
      if (AnimotorState != 0) hash ^= AnimotorState.GetHashCode();
      if (AttackTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackTime);
      if (DirectionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DirectionX);
      if (DirectionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DirectionY);
      if (UnitType != 0) hash ^= UnitType.GetHashCode();
      if (AttackAcpabilities != 0) hash ^= AttackAcpabilities.GetHashCode();
      if (AttackMode != 0) hash ^= AttackMode.GetHashCode();
      if (IsMain != 0) hash ^= IsMain.GetHashCode();
      if (IsDeath != 0) hash ^= IsDeath.GetHashCode();
      if (Invisible != 0) hash ^= Invisible.GetHashCode();
      if (Camp != 0) hash ^= Camp.GetHashCode();
      if (IsMiss != false) hash ^= IsMiss.GetHashCode();
      if (AnimotorPause != 0) hash ^= AnimotorPause.GetHashCode();
      if (SkillEnable != 0) hash ^= SkillEnable.GetHashCode();
      if (ItemEnable != 0) hash ^= ItemEnable.GetHashCode();
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (IsMirrorImage != 0) hash ^= IsMirrorImage.GetHashCode();
      if (AttackRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackRange);
      if (AttackAnim != 0) hash ^= AttackAnim.GetHashCode();
      hash ^= sD_.GetHashCode();
      hash ^= bD_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (HP != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HP);
      }
      if (MP != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MP);
      }
      if (X != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Y);
      }
      if (ID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ID);
      }
      if (ModeType.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ModeType);
      }
      if (MaxHP != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MaxHP);
      }
      if (MaxMP != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxMP);
      }
      if (Experience != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Experience);
      }
      if (MaxExperience != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MaxExperience);
      }
      if (ControlID != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ControlID);
      }
      if (AnimotorState != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(AnimotorState);
      }
      if (AttackTime != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(AttackTime);
      }
      if (DirectionX != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(DirectionX);
      }
      if (DirectionY != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(DirectionY);
      }
      if (UnitType != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(UnitType);
      }
      if (AttackAcpabilities != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(AttackAcpabilities);
      }
      if (AttackMode != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(AttackMode);
      }
      if (IsMain != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(IsMain);
      }
      if (IsDeath != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(IsDeath);
      }
      if (Invisible != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Invisible);
      }
      if (Camp != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Camp);
      }
      if (IsMiss != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(IsMiss);
      }
      if (AnimotorPause != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(AnimotorPause);
      }
      if (SkillEnable != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(SkillEnable);
      }
      if (ItemEnable != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(ItemEnable);
      }
      if (Z != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(Z);
      }
      if (IsMirrorImage != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(IsMirrorImage);
      }
      if (AttackRange != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(AttackRange);
      }
      if (AttackAnim != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(AttackAnim);
      }
      sD_.WriteTo(output, _repeated_sD_codec);
      bD_.WriteTo(output, _repeated_bD_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (HP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HP);
      }
      if (MP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MP);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (ModeType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModeType);
      }
      if (MaxHP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHP);
      }
      if (MaxMP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMP);
      }
      if (Experience != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Experience);
      }
      if (MaxExperience != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxExperience);
      }
      if (ControlID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ControlID);
      }
      if (AnimotorState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimotorState);
      }
      if (AttackTime != 0F) {
        size += 1 + 4;
      }
      if (DirectionX != 0F) {
        size += 2 + 4;
      }
      if (DirectionY != 0F) {
        size += 2 + 4;
      }
      if (UnitType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnitType);
      }
      if (AttackAcpabilities != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackAcpabilities);
      }
      if (AttackMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackMode);
      }
      if (IsMain != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsMain);
      }
      if (IsDeath != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsDeath);
      }
      if (Invisible != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Invisible);
      }
      if (Camp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Camp);
      }
      if (IsMiss != false) {
        size += 2 + 1;
      }
      if (AnimotorPause != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AnimotorPause);
      }
      if (SkillEnable != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SkillEnable);
      }
      if (ItemEnable != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemEnable);
      }
      if (Z != 0F) {
        size += 2 + 4;
      }
      if (IsMirrorImage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsMirrorImage);
      }
      if (AttackRange != 0F) {
        size += 2 + 4;
      }
      if (AttackAnim != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackAnim);
      }
      size += sD_.CalculateSize(_repeated_sD_codec);
      size += bD_.CalculateSize(_repeated_bD_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnitDatas other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.HP != 0) {
        HP = other.HP;
      }
      if (other.MP != 0) {
        MP = other.MP;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.ModeType.Length != 0) {
        ModeType = other.ModeType;
      }
      if (other.MaxHP != 0) {
        MaxHP = other.MaxHP;
      }
      if (other.MaxMP != 0) {
        MaxMP = other.MaxMP;
      }
      if (other.Experience != 0) {
        Experience = other.Experience;
      }
      if (other.MaxExperience != 0) {
        MaxExperience = other.MaxExperience;
      }
      if (other.ControlID != 0) {
        ControlID = other.ControlID;
      }
      if (other.AnimotorState != 0) {
        AnimotorState = other.AnimotorState;
      }
      if (other.AttackTime != 0F) {
        AttackTime = other.AttackTime;
      }
      if (other.DirectionX != 0F) {
        DirectionX = other.DirectionX;
      }
      if (other.DirectionY != 0F) {
        DirectionY = other.DirectionY;
      }
      if (other.UnitType != 0) {
        UnitType = other.UnitType;
      }
      if (other.AttackAcpabilities != 0) {
        AttackAcpabilities = other.AttackAcpabilities;
      }
      if (other.AttackMode != 0) {
        AttackMode = other.AttackMode;
      }
      if (other.IsMain != 0) {
        IsMain = other.IsMain;
      }
      if (other.IsDeath != 0) {
        IsDeath = other.IsDeath;
      }
      if (other.Invisible != 0) {
        Invisible = other.Invisible;
      }
      if (other.Camp != 0) {
        Camp = other.Camp;
      }
      if (other.IsMiss != false) {
        IsMiss = other.IsMiss;
      }
      if (other.AnimotorPause != 0) {
        AnimotorPause = other.AnimotorPause;
      }
      if (other.SkillEnable != 0) {
        SkillEnable = other.SkillEnable;
      }
      if (other.ItemEnable != 0) {
        ItemEnable = other.ItemEnable;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.IsMirrorImage != 0) {
        IsMirrorImage = other.IsMirrorImage;
      }
      if (other.AttackRange != 0F) {
        AttackRange = other.AttackRange;
      }
      if (other.AttackAnim != 0) {
        AttackAnim = other.AttackAnim;
      }
      sD_.Add(other.sD_);
      bD_.Add(other.bD_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            HP = input.ReadInt32();
            break;
          }
          case 32: {
            MP = input.ReadInt32();
            break;
          }
          case 45: {
            X = input.ReadFloat();
            break;
          }
          case 53: {
            Y = input.ReadFloat();
            break;
          }
          case 56: {
            ID = input.ReadInt32();
            break;
          }
          case 66: {
            ModeType = input.ReadString();
            break;
          }
          case 72: {
            MaxHP = input.ReadInt32();
            break;
          }
          case 80: {
            MaxMP = input.ReadInt32();
            break;
          }
          case 88: {
            Experience = input.ReadInt32();
            break;
          }
          case 96: {
            MaxExperience = input.ReadInt32();
            break;
          }
          case 104: {
            ControlID = input.ReadInt32();
            break;
          }
          case 112: {
            AnimotorState = input.ReadInt32();
            break;
          }
          case 125: {
            AttackTime = input.ReadFloat();
            break;
          }
          case 133: {
            DirectionX = input.ReadFloat();
            break;
          }
          case 141: {
            DirectionY = input.ReadFloat();
            break;
          }
          case 144: {
            UnitType = input.ReadInt32();
            break;
          }
          case 152: {
            AttackAcpabilities = input.ReadInt32();
            break;
          }
          case 160: {
            AttackMode = input.ReadInt32();
            break;
          }
          case 168: {
            IsMain = input.ReadInt32();
            break;
          }
          case 176: {
            IsDeath = input.ReadInt32();
            break;
          }
          case 184: {
            Invisible = input.ReadInt32();
            break;
          }
          case 192: {
            Camp = input.ReadInt32();
            break;
          }
          case 200: {
            IsMiss = input.ReadBool();
            break;
          }
          case 208: {
            AnimotorPause = input.ReadInt32();
            break;
          }
          case 216: {
            SkillEnable = input.ReadInt32();
            break;
          }
          case 224: {
            ItemEnable = input.ReadInt32();
            break;
          }
          case 237: {
            Z = input.ReadFloat();
            break;
          }
          case 240: {
            IsMirrorImage = input.ReadInt32();
            break;
          }
          case 253: {
            AttackRange = input.ReadFloat();
            break;
          }
          case 256: {
            AttackAnim = input.ReadInt32();
            break;
          }
          case 266: {
            sD_.AddEntriesFrom(input, _repeated_sD_codec);
            break;
          }
          case 274: {
            bD_.AddEntriesFrom(input, _repeated_bD_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BulletDatas : pb::IMessage<BulletDatas> {
    private static readonly pb::MessageParser<BulletDatas> _parser = new pb::MessageParser<BulletDatas>(() => new BulletDatas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BulletDatas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletDatas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletDatas(BulletDatas other) : this() {
      iD_ = other.iD_;
      modeType_ = other.modeType_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      state_ = other.state_;
      startX_ = other.startX_;
      startY_ = other.startY_;
      startZ_ = other.startZ_;
      endX_ = other.endX_;
      endY_ = other.endY_;
      endZ_ = other.endZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletDatas Clone() {
      return new BulletDatas(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///子弹唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "ModeType" field.</summary>
    public const int ModeTypeFieldNumber = 2;
    private string modeType_ = "";
    /// <summary>
    ///弹道特效模型 (客户端使用的模型名字)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModeType {
      get { return modeType_; }
      set {
        modeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 3;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 4;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 5;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 6;
    private int state_;
    /// <summary>
    ///状态 子弹状态(1:创建 需要创建特效,2:移动,3:到达后计算结果(伤害和回血) 4:完成 可以删除了)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "StartX" field.</summary>
    public const int StartXFieldNumber = 7;
    private float startX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartX {
      get { return startX_; }
      set {
        startX_ = value;
      }
    }

    /// <summary>Field number for the "StartY" field.</summary>
    public const int StartYFieldNumber = 8;
    private float startY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartY {
      get { return startY_; }
      set {
        startY_ = value;
      }
    }

    /// <summary>Field number for the "StartZ" field.</summary>
    public const int StartZFieldNumber = 9;
    private float startZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartZ {
      get { return startZ_; }
      set {
        startZ_ = value;
      }
    }

    /// <summary>Field number for the "EndX" field.</summary>
    public const int EndXFieldNumber = 10;
    private float endX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndX {
      get { return endX_; }
      set {
        endX_ = value;
      }
    }

    /// <summary>Field number for the "EndY" field.</summary>
    public const int EndYFieldNumber = 11;
    private float endY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndY {
      get { return endY_; }
      set {
        endY_ = value;
      }
    }

    /// <summary>Field number for the "EndZ" field.</summary>
    public const int EndZFieldNumber = 12;
    private float endZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndZ {
      get { return endZ_; }
      set {
        endZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BulletDatas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BulletDatas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (ModeType != other.ModeType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (State != other.State) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartX, other.StartX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartY, other.StartY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartZ, other.StartZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndX, other.EndX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndY, other.EndY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndZ, other.EndZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (ModeType.Length != 0) hash ^= ModeType.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (State != 0) hash ^= State.GetHashCode();
      if (StartX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartX);
      if (StartY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartY);
      if (StartZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartZ);
      if (EndX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndX);
      if (EndY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndY);
      if (EndZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (ModeType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ModeType);
      }
      if (X != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Z);
      }
      if (State != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(State);
      }
      if (StartX != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(StartX);
      }
      if (StartY != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(StartY);
      }
      if (StartZ != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(StartZ);
      }
      if (EndX != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(EndX);
      }
      if (EndY != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(EndY);
      }
      if (EndZ != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(EndZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (ModeType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModeType);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (StartX != 0F) {
        size += 1 + 4;
      }
      if (StartY != 0F) {
        size += 1 + 4;
      }
      if (StartZ != 0F) {
        size += 1 + 4;
      }
      if (EndX != 0F) {
        size += 1 + 4;
      }
      if (EndY != 0F) {
        size += 1 + 4;
      }
      if (EndZ != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BulletDatas other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.ModeType.Length != 0) {
        ModeType = other.ModeType;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.StartX != 0F) {
        StartX = other.StartX;
      }
      if (other.StartY != 0F) {
        StartY = other.StartY;
      }
      if (other.StartZ != 0F) {
        StartZ = other.StartZ;
      }
      if (other.EndX != 0F) {
        EndX = other.EndX;
      }
      if (other.EndY != 0F) {
        EndY = other.EndY;
      }
      if (other.EndZ != 0F) {
        EndZ = other.EndZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            ModeType = input.ReadString();
            break;
          }
          case 29: {
            X = input.ReadFloat();
            break;
          }
          case 37: {
            Y = input.ReadFloat();
            break;
          }
          case 45: {
            Z = input.ReadFloat();
            break;
          }
          case 48: {
            State = input.ReadInt32();
            break;
          }
          case 61: {
            StartX = input.ReadFloat();
            break;
          }
          case 69: {
            StartY = input.ReadFloat();
            break;
          }
          case 77: {
            StartZ = input.ReadFloat();
            break;
          }
          case 85: {
            EndX = input.ReadFloat();
            break;
          }
          case 93: {
            EndY = input.ReadFloat();
            break;
          }
          case 101: {
            EndZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneItemDatas : pb::IMessage<SceneItemDatas> {
    private static readonly pb::MessageParser<SceneItemDatas> _parser = new pb::MessageParser<SceneItemDatas>(() => new SceneItemDatas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneItemDatas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneItemDatas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneItemDatas(SceneItemDatas other) : this() {
      iD_ = other.iD_;
      typeID_ = other.typeID_;
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneItemDatas Clone() {
      return new SceneItemDatas(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///子弹唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "TypeID" field.</summary>
    public const int TypeIDFieldNumber = 2;
    private int typeID_;
    /// <summary>
    /// (客户端使用的模型名字)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 3;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 4;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneItemDatas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneItemDatas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (TypeID != other.TypeID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (TypeID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TypeID);
      }
      if (X != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneItemDatas other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            TypeID = input.ReadInt32();
            break;
          }
          case 29: {
            X = input.ReadFloat();
            break;
          }
          case 37: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HaloDatas : pb::IMessage<HaloDatas> {
    private static readonly pb::MessageParser<HaloDatas> _parser = new pb::MessageParser<HaloDatas>(() => new HaloDatas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HaloDatas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HaloDatas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HaloDatas(HaloDatas other) : this() {
      iD_ = other.iD_;
      modeType_ = other.modeType_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HaloDatas Clone() {
      return new HaloDatas(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///光环唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "ModeType" field.</summary>
    public const int ModeTypeFieldNumber = 2;
    private string modeType_ = "";
    /// <summary>
    ///光环特效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModeType {
      get { return modeType_; }
      set {
        modeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 3;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 4;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 5;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HaloDatas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HaloDatas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (ModeType != other.ModeType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (ModeType.Length != 0) hash ^= ModeType.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (ModeType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ModeType);
      }
      if (X != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (ModeType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModeType);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HaloDatas other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.ModeType.Length != 0) {
        ModeType = other.ModeType;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            ModeType = input.ReadString();
            break;
          }
          case 29: {
            X = input.ReadFloat();
            break;
          }
          case 37: {
            Y = input.ReadFloat();
            break;
          }
          case 45: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgUserEnterScene : pb::IMessage<MsgUserEnterScene> {
    private static readonly pb::MessageParser<MsgUserEnterScene> _parser = new pb::MessageParser<MsgUserEnterScene>(() => new MsgUserEnterScene());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgUserEnterScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgUserEnterScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgUserEnterScene(MsgUserEnterScene other) : this() {
      uid_ = other.uid_;
      connectId_ = other.connectId_;
      srcServerName_ = other.srcServerName_;
      destServerName_ = other.destServerName_;
      sceneID_ = other.sceneID_;
      datas_ = other.datas_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgUserEnterScene Clone() {
      return new MsgUserEnterScene(this);
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "ConnectId" field.</summary>
    public const int ConnectIdFieldNumber = 2;
    private int connectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConnectId {
      get { return connectId_; }
      set {
        connectId_ = value;
      }
    }

    /// <summary>Field number for the "SrcServerName" field.</summary>
    public const int SrcServerNameFieldNumber = 3;
    private string srcServerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SrcServerName {
      get { return srcServerName_; }
      set {
        srcServerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DestServerName" field.</summary>
    public const int DestServerNameFieldNumber = 4;
    private string destServerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestServerName {
      get { return destServerName_; }
      set {
        destServerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SceneID" field.</summary>
    public const int SceneIDFieldNumber = 5;
    private int sceneID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneID {
      get { return sceneID_; }
      set {
        sceneID_ = value;
      }
    }

    /// <summary>Field number for the "Datas" field.</summary>
    public const int DatasFieldNumber = 6;
    private pb::ByteString datas_ = pb::ByteString.Empty;
    /// <summary>
    ///玩家信息数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Datas {
      get { return datas_; }
      set {
        datas_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgUserEnterScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgUserEnterScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (ConnectId != other.ConnectId) return false;
      if (SrcServerName != other.SrcServerName) return false;
      if (DestServerName != other.DestServerName) return false;
      if (SceneID != other.SceneID) return false;
      if (Datas != other.Datas) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (ConnectId != 0) hash ^= ConnectId.GetHashCode();
      if (SrcServerName.Length != 0) hash ^= SrcServerName.GetHashCode();
      if (DestServerName.Length != 0) hash ^= DestServerName.GetHashCode();
      if (SceneID != 0) hash ^= SceneID.GetHashCode();
      if (Datas.Length != 0) hash ^= Datas.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (ConnectId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConnectId);
      }
      if (SrcServerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SrcServerName);
      }
      if (DestServerName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DestServerName);
      }
      if (SceneID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SceneID);
      }
      if (Datas.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Datas);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (ConnectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConnectId);
      }
      if (SrcServerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SrcServerName);
      }
      if (DestServerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestServerName);
      }
      if (SceneID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneID);
      }
      if (Datas.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Datas);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgUserEnterScene other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.ConnectId != 0) {
        ConnectId = other.ConnectId;
      }
      if (other.SrcServerName.Length != 0) {
        SrcServerName = other.SrcServerName;
      }
      if (other.DestServerName.Length != 0) {
        DestServerName = other.DestServerName;
      }
      if (other.SceneID != 0) {
        SceneID = other.SceneID;
      }
      if (other.Datas.Length != 0) {
        Datas = other.Datas;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            ConnectId = input.ReadInt32();
            break;
          }
          case 26: {
            SrcServerName = input.ReadString();
            break;
          }
          case 34: {
            DestServerName = input.ReadString();
            break;
          }
          case 40: {
            SceneID = input.ReadInt32();
            break;
          }
          case 50: {
            Datas = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家自己造成的伤害数据
  /// </summary>
  public sealed partial class MsgPlayerHurt : pb::IMessage<MsgPlayerHurt> {
    private static readonly pb::MessageParser<MsgPlayerHurt> _parser = new pb::MessageParser<MsgPlayerHurt>(() => new MsgPlayerHurt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgPlayerHurt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerHurt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerHurt(MsgPlayerHurt other) : this() {
      hurtUnitID_ = other.hurtUnitID_;
      hurtAllValue_ = other.hurtAllValue_;
      hurtMagicValue_ = other.hurtMagicValue_;
      isCrit_ = other.isCrit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPlayerHurt Clone() {
      return new MsgPlayerHurt(this);
    }

    /// <summary>Field number for the "HurtUnitID" field.</summary>
    public const int HurtUnitIDFieldNumber = 1;
    private int hurtUnitID_;
    /// <summary>
    ///伤害单位ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HurtUnitID {
      get { return hurtUnitID_; }
      set {
        hurtUnitID_ = value;
      }
    }

    /// <summary>Field number for the "HurtAllValue" field.</summary>
    public const int HurtAllValueFieldNumber = 2;
    private int hurtAllValue_;
    /// <summary>
    ///总伤害值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HurtAllValue {
      get { return hurtAllValue_; }
      set {
        hurtAllValue_ = value;
      }
    }

    /// <summary>Field number for the "HurtMagicValue" field.</summary>
    public const int HurtMagicValueFieldNumber = 3;
    private int hurtMagicValue_;
    /// <summary>
    ///魔法伤害值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HurtMagicValue {
      get { return hurtMagicValue_; }
      set {
        hurtMagicValue_ = value;
      }
    }

    /// <summary>Field number for the "IsCrit" field.</summary>
    public const int IsCritFieldNumber = 4;
    private int isCrit_;
    /// <summary>
    ///是否暴击
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsCrit {
      get { return isCrit_; }
      set {
        isCrit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgPlayerHurt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgPlayerHurt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HurtUnitID != other.HurtUnitID) return false;
      if (HurtAllValue != other.HurtAllValue) return false;
      if (HurtMagicValue != other.HurtMagicValue) return false;
      if (IsCrit != other.IsCrit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HurtUnitID != 0) hash ^= HurtUnitID.GetHashCode();
      if (HurtAllValue != 0) hash ^= HurtAllValue.GetHashCode();
      if (HurtMagicValue != 0) hash ^= HurtMagicValue.GetHashCode();
      if (IsCrit != 0) hash ^= IsCrit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HurtUnitID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HurtUnitID);
      }
      if (HurtAllValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HurtAllValue);
      }
      if (HurtMagicValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HurtMagicValue);
      }
      if (IsCrit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(IsCrit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HurtUnitID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HurtUnitID);
      }
      if (HurtAllValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HurtAllValue);
      }
      if (HurtMagicValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HurtMagicValue);
      }
      if (IsCrit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsCrit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgPlayerHurt other) {
      if (other == null) {
        return;
      }
      if (other.HurtUnitID != 0) {
        HurtUnitID = other.HurtUnitID;
      }
      if (other.HurtAllValue != 0) {
        HurtAllValue = other.HurtAllValue;
      }
      if (other.HurtMagicValue != 0) {
        HurtMagicValue = other.HurtMagicValue;
      }
      if (other.IsCrit != 0) {
        IsCrit = other.IsCrit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HurtUnitID = input.ReadInt32();
            break;
          }
          case 16: {
            HurtAllValue = input.ReadInt32();
            break;
          }
          case 24: {
            HurtMagicValue = input.ReadInt32();
            break;
          }
          case 32: {
            IsCrit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///每帧更新单位数据
  /// </summary>
  public sealed partial class SC_Update : pb::IMessage<SC_Update> {
    private static readonly pb::MessageParser<SC_Update> _parser = new pb::MessageParser<SC_Update>(() => new SC_Update());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Update> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Update() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Update(SC_Update other) : this() {
      curFrame_ = other.curFrame_;
      newUnits_ = other.newUnits_.Clone();
      oldUnits_ = other.oldUnits_.Clone();
      removeUnits_ = other.removeUnits_.Clone();
      newBullets_ = other.newBullets_.Clone();
      oldBullets_ = other.oldBullets_.Clone();
      removeBullets_ = other.removeBullets_.Clone();
      newHalos_ = other.newHalos_.Clone();
      oldHalos_ = other.oldHalos_.Clone();
      removeHalos_ = other.removeHalos_.Clone();
      newSceneItems_ = other.newSceneItems_.Clone();
      removeSceneItems_ = other.removeSceneItems_.Clone();
      playerHurt_ = other.playerHurt_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Update Clone() {
      return new SC_Update(this);
    }

    /// <summary>Field number for the "CurFrame" field.</summary>
    public const int CurFrameFieldNumber = 1;
    private int curFrame_;
    /// <summary>
    ///当前帧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurFrame {
      get { return curFrame_; }
      set {
        curFrame_ = value;
      }
    }

    /// <summary>Field number for the "NewUnits" field.</summary>
    public const int NewUnitsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protomsg.UnitDatas> _repeated_newUnits_codec
        = pb::FieldCodec.ForMessage(18, global::Protomsg.UnitDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.UnitDatas> newUnits_ = new pbc::RepeatedField<global::Protomsg.UnitDatas>();
    /// <summary>
    ///新的单位数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.UnitDatas> NewUnits {
      get { return newUnits_; }
    }

    /// <summary>Field number for the "OldUnits" field.</summary>
    public const int OldUnitsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protomsg.UnitDatas> _repeated_oldUnits_codec
        = pb::FieldCodec.ForMessage(26, global::Protomsg.UnitDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.UnitDatas> oldUnits_ = new pbc::RepeatedField<global::Protomsg.UnitDatas>();
    /// <summary>
    ///旧单位(只更新变化的值)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.UnitDatas> OldUnits {
      get { return oldUnits_; }
    }

    /// <summary>Field number for the "RemoveUnits" field.</summary>
    public const int RemoveUnitsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_removeUnits_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> removeUnits_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///删除单位(单位ID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RemoveUnits {
      get { return removeUnits_; }
    }

    /// <summary>Field number for the "NewBullets" field.</summary>
    public const int NewBulletsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protomsg.BulletDatas> _repeated_newBullets_codec
        = pb::FieldCodec.ForMessage(42, global::Protomsg.BulletDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.BulletDatas> newBullets_ = new pbc::RepeatedField<global::Protomsg.BulletDatas>();
    /// <summary>
    ///新的子弹
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.BulletDatas> NewBullets {
      get { return newBullets_; }
    }

    /// <summary>Field number for the "OldBullets" field.</summary>
    public const int OldBulletsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Protomsg.BulletDatas> _repeated_oldBullets_codec
        = pb::FieldCodec.ForMessage(50, global::Protomsg.BulletDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.BulletDatas> oldBullets_ = new pbc::RepeatedField<global::Protomsg.BulletDatas>();
    /// <summary>
    ///旧子弹(只更新变化值)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.BulletDatas> OldBullets {
      get { return oldBullets_; }
    }

    /// <summary>Field number for the "RemoveBullets" field.</summary>
    public const int RemoveBulletsFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_removeBullets_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> removeBullets_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///删除子弹(子弹ID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RemoveBullets {
      get { return removeBullets_; }
    }

    /// <summary>Field number for the "NewHalos" field.</summary>
    public const int NewHalosFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Protomsg.HaloDatas> _repeated_newHalos_codec
        = pb::FieldCodec.ForMessage(66, global::Protomsg.HaloDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.HaloDatas> newHalos_ = new pbc::RepeatedField<global::Protomsg.HaloDatas>();
    /// <summary>
    ///新的光环
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.HaloDatas> NewHalos {
      get { return newHalos_; }
    }

    /// <summary>Field number for the "OldHalos" field.</summary>
    public const int OldHalosFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Protomsg.HaloDatas> _repeated_oldHalos_codec
        = pb::FieldCodec.ForMessage(74, global::Protomsg.HaloDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.HaloDatas> oldHalos_ = new pbc::RepeatedField<global::Protomsg.HaloDatas>();
    /// <summary>
    ///旧光环(只更新变化值)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.HaloDatas> OldHalos {
      get { return oldHalos_; }
    }

    /// <summary>Field number for the "RemoveHalos" field.</summary>
    public const int RemoveHalosFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_removeHalos_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> removeHalos_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///删除光环(子弹ID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RemoveHalos {
      get { return removeHalos_; }
    }

    /// <summary>Field number for the "NewSceneItems" field.</summary>
    public const int NewSceneItemsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Protomsg.SceneItemDatas> _repeated_newSceneItems_codec
        = pb::FieldCodec.ForMessage(90, global::Protomsg.SceneItemDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.SceneItemDatas> newSceneItems_ = new pbc::RepeatedField<global::Protomsg.SceneItemDatas>();
    /// <summary>
    ///新的道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.SceneItemDatas> NewSceneItems {
      get { return newSceneItems_; }
    }

    /// <summary>Field number for the "RemoveSceneItems" field.</summary>
    public const int RemoveSceneItemsFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_removeSceneItems_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> removeSceneItems_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///删除道具(道具ID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RemoveSceneItems {
      get { return removeSceneItems_; }
    }

    /// <summary>Field number for the "PlayerHurt" field.</summary>
    public const int PlayerHurtFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Protomsg.MsgPlayerHurt> _repeated_playerHurt_codec
        = pb::FieldCodec.ForMessage(106, global::Protomsg.MsgPlayerHurt.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.MsgPlayerHurt> playerHurt_ = new pbc::RepeatedField<global::Protomsg.MsgPlayerHurt>();
    /// <summary>
    ///玩家造成的伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.MsgPlayerHurt> PlayerHurt {
      get { return playerHurt_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Update);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Update other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurFrame != other.CurFrame) return false;
      if(!newUnits_.Equals(other.newUnits_)) return false;
      if(!oldUnits_.Equals(other.oldUnits_)) return false;
      if(!removeUnits_.Equals(other.removeUnits_)) return false;
      if(!newBullets_.Equals(other.newBullets_)) return false;
      if(!oldBullets_.Equals(other.oldBullets_)) return false;
      if(!removeBullets_.Equals(other.removeBullets_)) return false;
      if(!newHalos_.Equals(other.newHalos_)) return false;
      if(!oldHalos_.Equals(other.oldHalos_)) return false;
      if(!removeHalos_.Equals(other.removeHalos_)) return false;
      if(!newSceneItems_.Equals(other.newSceneItems_)) return false;
      if(!removeSceneItems_.Equals(other.removeSceneItems_)) return false;
      if(!playerHurt_.Equals(other.playerHurt_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurFrame != 0) hash ^= CurFrame.GetHashCode();
      hash ^= newUnits_.GetHashCode();
      hash ^= oldUnits_.GetHashCode();
      hash ^= removeUnits_.GetHashCode();
      hash ^= newBullets_.GetHashCode();
      hash ^= oldBullets_.GetHashCode();
      hash ^= removeBullets_.GetHashCode();
      hash ^= newHalos_.GetHashCode();
      hash ^= oldHalos_.GetHashCode();
      hash ^= removeHalos_.GetHashCode();
      hash ^= newSceneItems_.GetHashCode();
      hash ^= removeSceneItems_.GetHashCode();
      hash ^= playerHurt_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurFrame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurFrame);
      }
      newUnits_.WriteTo(output, _repeated_newUnits_codec);
      oldUnits_.WriteTo(output, _repeated_oldUnits_codec);
      removeUnits_.WriteTo(output, _repeated_removeUnits_codec);
      newBullets_.WriteTo(output, _repeated_newBullets_codec);
      oldBullets_.WriteTo(output, _repeated_oldBullets_codec);
      removeBullets_.WriteTo(output, _repeated_removeBullets_codec);
      newHalos_.WriteTo(output, _repeated_newHalos_codec);
      oldHalos_.WriteTo(output, _repeated_oldHalos_codec);
      removeHalos_.WriteTo(output, _repeated_removeHalos_codec);
      newSceneItems_.WriteTo(output, _repeated_newSceneItems_codec);
      removeSceneItems_.WriteTo(output, _repeated_removeSceneItems_codec);
      playerHurt_.WriteTo(output, _repeated_playerHurt_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurFrame);
      }
      size += newUnits_.CalculateSize(_repeated_newUnits_codec);
      size += oldUnits_.CalculateSize(_repeated_oldUnits_codec);
      size += removeUnits_.CalculateSize(_repeated_removeUnits_codec);
      size += newBullets_.CalculateSize(_repeated_newBullets_codec);
      size += oldBullets_.CalculateSize(_repeated_oldBullets_codec);
      size += removeBullets_.CalculateSize(_repeated_removeBullets_codec);
      size += newHalos_.CalculateSize(_repeated_newHalos_codec);
      size += oldHalos_.CalculateSize(_repeated_oldHalos_codec);
      size += removeHalos_.CalculateSize(_repeated_removeHalos_codec);
      size += newSceneItems_.CalculateSize(_repeated_newSceneItems_codec);
      size += removeSceneItems_.CalculateSize(_repeated_removeSceneItems_codec);
      size += playerHurt_.CalculateSize(_repeated_playerHurt_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Update other) {
      if (other == null) {
        return;
      }
      if (other.CurFrame != 0) {
        CurFrame = other.CurFrame;
      }
      newUnits_.Add(other.newUnits_);
      oldUnits_.Add(other.oldUnits_);
      removeUnits_.Add(other.removeUnits_);
      newBullets_.Add(other.newBullets_);
      oldBullets_.Add(other.oldBullets_);
      removeBullets_.Add(other.removeBullets_);
      newHalos_.Add(other.newHalos_);
      oldHalos_.Add(other.oldHalos_);
      removeHalos_.Add(other.removeHalos_);
      newSceneItems_.Add(other.newSceneItems_);
      removeSceneItems_.Add(other.removeSceneItems_);
      playerHurt_.Add(other.playerHurt_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurFrame = input.ReadInt32();
            break;
          }
          case 18: {
            newUnits_.AddEntriesFrom(input, _repeated_newUnits_codec);
            break;
          }
          case 26: {
            oldUnits_.AddEntriesFrom(input, _repeated_oldUnits_codec);
            break;
          }
          case 34:
          case 32: {
            removeUnits_.AddEntriesFrom(input, _repeated_removeUnits_codec);
            break;
          }
          case 42: {
            newBullets_.AddEntriesFrom(input, _repeated_newBullets_codec);
            break;
          }
          case 50: {
            oldBullets_.AddEntriesFrom(input, _repeated_oldBullets_codec);
            break;
          }
          case 58:
          case 56: {
            removeBullets_.AddEntriesFrom(input, _repeated_removeBullets_codec);
            break;
          }
          case 66: {
            newHalos_.AddEntriesFrom(input, _repeated_newHalos_codec);
            break;
          }
          case 74: {
            oldHalos_.AddEntriesFrom(input, _repeated_oldHalos_codec);
            break;
          }
          case 82:
          case 80: {
            removeHalos_.AddEntriesFrom(input, _repeated_removeHalos_codec);
            break;
          }
          case 90: {
            newSceneItems_.AddEntriesFrom(input, _repeated_newSceneItems_codec);
            break;
          }
          case 98:
          case 96: {
            removeSceneItems_.AddEntriesFrom(input, _repeated_removeSceneItems_codec);
            break;
          }
          case 106: {
            playerHurt_.AddEntriesFrom(input, _repeated_playerHurt_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家进入新场景时的场景信息
  /// </summary>
  public sealed partial class SC_NewScene : pb::IMessage<SC_NewScene> {
    private static readonly pb::MessageParser<SC_NewScene> _parser = new pb::MessageParser<SC_NewScene>(() => new SC_NewScene());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_NewScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NewScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NewScene(SC_NewScene other) : this() {
      name_ = other.name_;
      logicFps_ = other.logicFps_;
      curFrame_ = other.curFrame_;
      serverName_ = other.serverName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NewScene Clone() {
      return new SC_NewScene(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///场景名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LogicFps" field.</summary>
    public const int LogicFpsFieldNumber = 2;
    private int logicFps_;
    /// <summary>
    ///逻辑帧率 (20即每秒20帧)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LogicFps {
      get { return logicFps_; }
      set {
        logicFps_ = value;
      }
    }

    /// <summary>Field number for the "CurFrame" field.</summary>
    public const int CurFrameFieldNumber = 3;
    private int curFrame_;
    /// <summary>
    ///当前帧 (客户端通过当前帧和本地时间匹配计算延时逻辑)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurFrame {
      get { return curFrame_; }
      set {
        curFrame_ = value;
      }
    }

    /// <summary>Field number for the "ServerName" field.</summary>
    public const int ServerNameFieldNumber = 4;
    private string serverName_ = "";
    /// <summary>
    ///服务器名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerName {
      get { return serverName_; }
      set {
        serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_NewScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_NewScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (LogicFps != other.LogicFps) return false;
      if (CurFrame != other.CurFrame) return false;
      if (ServerName != other.ServerName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (LogicFps != 0) hash ^= LogicFps.GetHashCode();
      if (CurFrame != 0) hash ^= CurFrame.GetHashCode();
      if (ServerName.Length != 0) hash ^= ServerName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (LogicFps != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LogicFps);
      }
      if (CurFrame != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurFrame);
      }
      if (ServerName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ServerName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (LogicFps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LogicFps);
      }
      if (CurFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurFrame);
      }
      if (ServerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_NewScene other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.LogicFps != 0) {
        LogicFps = other.LogicFps;
      }
      if (other.CurFrame != 0) {
        CurFrame = other.CurFrame;
      }
      if (other.ServerName.Length != 0) {
        ServerName = other.ServerName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            LogicFps = input.ReadInt32();
            break;
          }
          case 24: {
            CurFrame = input.ReadInt32();
            break;
          }
          case 34: {
            ServerName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单位数据
  /// </summary>
  public sealed partial class CharacterBaseDatas : pb::IMessage<CharacterBaseDatas> {
    private static readonly pb::MessageParser<CharacterBaseDatas> _parser = new pb::MessageParser<CharacterBaseDatas>(() => new CharacterBaseDatas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterBaseDatas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterBaseDatas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterBaseDatas(CharacterBaseDatas other) : this() {
      characterid_ = other.characterid_;
      name_ = other.name_;
      typeid_ = other.typeid_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterBaseDatas Clone() {
      return new CharacterBaseDatas(this);
    }

    /// <summary>Field number for the "Characterid" field.</summary>
    public const int CharacteridFieldNumber = 1;
    private int characterid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Characterid {
      get { return characterid_; }
      set {
        characterid_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Typeid" field.</summary>
    public const int TypeidFieldNumber = 3;
    private int typeid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Typeid {
      get { return typeid_; }
      set {
        typeid_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterBaseDatas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterBaseDatas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Characterid != other.Characterid) return false;
      if (Name != other.Name) return false;
      if (Typeid != other.Typeid) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Characterid != 0) hash ^= Characterid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Typeid != 0) hash ^= Typeid.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Characterid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Characterid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Typeid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Typeid);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Characterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Characterid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Typeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Typeid);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterBaseDatas other) {
      if (other == null) {
        return;
      }
      if (other.Characterid != 0) {
        Characterid = other.Characterid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Typeid != 0) {
        Typeid = other.Typeid;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Characterid = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Typeid = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_Logined : pb::IMessage<SC_Logined> {
    private static readonly pb::MessageParser<SC_Logined> _parser = new pb::MessageParser<SC_Logined>(() => new SC_Logined());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Logined> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Logined() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Logined(SC_Logined other) : this() {
      code_ = other.code_;
      uid_ = other.uid_;
      error_ = other.error_;
      characters_ = other.characters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Logined Clone() {
      return new SC_Logined(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///登录结果 1表示成功 0表示失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 2;
    private int uid_;
    /// <summary>
    ///UID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private string error_ = "";
    /// <summary>
    ///失败原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Characters" field.</summary>
    public const int CharactersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protomsg.CharacterBaseDatas> _repeated_characters_codec
        = pb::FieldCodec.ForMessage(34, global::Protomsg.CharacterBaseDatas.Parser);
    private readonly pbc::RepeatedField<global::Protomsg.CharacterBaseDatas> characters_ = new pbc::RepeatedField<global::Protomsg.CharacterBaseDatas>();
    /// <summary>
    ///已经拥有的角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protomsg.CharacterBaseDatas> Characters {
      get { return characters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Logined);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Logined other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Uid != other.Uid) return false;
      if (Error != other.Error) return false;
      if(!characters_.Equals(other.characters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      hash ^= characters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Uid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Uid);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Error);
      }
      characters_.WriteTo(output, _repeated_characters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      size += characters_.CalculateSize(_repeated_characters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Logined other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      characters_.Add(other.characters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Uid = input.ReadInt32();
            break;
          }
          case 26: {
            Error = input.ReadString();
            break;
          }
          case 34: {
            characters_.AddEntriesFrom(input, _repeated_characters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///选择角色结果()
  /// </summary>
  public sealed partial class SC_SelectCharacterResult : pb::IMessage<SC_SelectCharacterResult> {
    private static readonly pb::MessageParser<SC_SelectCharacterResult> _parser = new pb::MessageParser<SC_SelectCharacterResult>(() => new SC_SelectCharacterResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SelectCharacterResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protomsg.MsgReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SelectCharacterResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SelectCharacterResult(SC_SelectCharacterResult other) : this() {
      code_ = other.code_;
      characterid_ = other.characterid_;
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SelectCharacterResult Clone() {
      return new SC_SelectCharacterResult(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///选择角色结果 1表示成功 0表示失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "Characterid" field.</summary>
    public const int CharacteridFieldNumber = 2;
    private int characterid_;
    /// <summary>
    ///Characterid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Characterid {
      get { return characterid_; }
      set {
        characterid_ = value;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private string error_ = "";
    /// <summary>
    ///失败原因  名字重复
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SelectCharacterResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SelectCharacterResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Characterid != other.Characterid) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Characterid != 0) hash ^= Characterid.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Characterid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Characterid);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Characterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Characterid);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SelectCharacterResult other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Characterid != 0) {
        Characterid = other.Characterid;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Characterid = input.ReadInt32();
            break;
          }
          case 26: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
